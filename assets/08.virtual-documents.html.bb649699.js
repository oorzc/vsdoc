import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as p,a as n,b as s,d as t,e as c,r as i}from"./app.ed9f300c.js";const u={},l=n("h1",{id:"虚拟文档",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#虚拟文档","aria-hidden":"true"},"#"),s(" 虚拟文档")],-1),r={href:"https://github.com/Microsoft/vscode-extension-samples/blob/master/virtual-document-sample/README.md",target:"_blank",rel:"noopener noreferrer"},d=c(`<h2 id="textdocumentcontentprovider" tabindex="-1"><a class="header-anchor" href="#textdocumentcontentprovider" aria-hidden="true">#</a> TextDocumentContentProvider</h2><hr><p>这个API工作于uri协议之上，你需要声明一个<em>供应器函数(provider)</em>，然后这个函数还需要返回文本内容。供应器函数必须提供<em>协议(scheme)</em>，而且函数注册之后不可改变这个协议。一个供应器函数可以对应多个协议，而多个供应器函数也可以只注册一个协议。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>vscode<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">registerTextDocumentContentProvider</span><span class="token punctuation">(</span>myScheme<span class="token punctuation">,</span> myProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用<code>registerTextDocumentContentProvider</code>函数会返回一个用于释放资源的<em>释放器</em>。供应器函数还必须实现<code>provideTextDocumentContent</code>函数，这个函数需要传入uri参数和取消式令牌(cancellation token)调用。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> myProvider <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">implements</span></span> vscode<span class="token punctuation">.</span>TextDocumentContentProvider <span class="token punctuation">{</span>
	<span class="token function">provideTextDocumentContent</span><span class="token punctuation">(</span>uri<span class="token operator">:</span> vscode<span class="token punctuation">.</span>Uri<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
		<span class="token comment">// 简单调用cowsay, 直接把uri-path当做文本内容</span>
		<span class="token keyword">return</span> cowsay<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token operator">:</span> uri<span class="token punctuation">.</span>path <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>!&gt; <strong>注意</strong>：我们的供应器函数不为虚拟文档创建uri——他的角色仅仅只是<strong>根据uri返回对应的文本内容</strong>。</p><p>下面我们简单使用一个&#39;cowsay&#39;命令创建一个uri，然后编辑器就能显示了：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>vscode<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">registerCommand</span><span class="token punctuation">(</span><span class="token string">&#39;cowsay.say&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> what <span class="token operator">=</span> <span class="token keyword">await</span> vscode<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">showInputBox</span><span class="token punctuation">(</span><span class="token punctuation">{</span> placeHolder<span class="token operator">:</span> <span class="token string">&#39;cow say?&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> uri <span class="token operator">=</span> vscode<span class="token punctuation">.</span>Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;cowsay:&#39;</span> <span class="token operator">+</span> what<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> doc <span class="token operator">=</span> <span class="token keyword">await</span> vscode<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">openTextDocument</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用供应器函数</span>
		<span class="token keyword">await</span> vscode<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">showTextDocument</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token punctuation">{</span> preview<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个命令首先弹出了一个输入框，然后创建了一个*<code>cowsay</code>协议*的uri，再然后根据这个uri读取了文档，最后为这个文档内容打开了一个编辑器（这里的“编辑器”不是指VS Code本身，而是VS Code中打开的单个编辑区tab）。在第三步中，<em>供应器函数</em>需要为这个uri提供对应的内容。</p><p>经过这整个流程，我们才算完整地实现了一个<em>文本内容供应器</em>，接下来的部分我们继续学习怎么更新虚拟文档，怎么注册虚拟文档的 UI命令。</p><h3 id="更新虚拟文档" tabindex="-1"><a class="header-anchor" href="#更新虚拟文档" aria-hidden="true">#</a> 更新虚拟文档</h3><p>为了支持跟踪虚拟文档发生的变化，供应器实现了<code>onDidChange</code>事件。如果文档正在被使用，那么必须为其提供一个uri来调用它，同时编辑器会请求新的内容。</p><p><code>vscode.Event</code>定义了VS Code的事件规范。实现事件的最好方式就是使用<code>vscode.EventEmitter</code>，比如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> myProvider <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">implements</span></span> vscode<span class="token punctuation">.</span>TextDocumentContentProvider <span class="token punctuation">{</span>
  <span class="token comment">// 事件发射器和事件</span>
  onDidChangeEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">EventEmitter</span><span class="token generic class-name"><span class="token operator">&lt;</span>vscode<span class="token punctuation">.</span>Uri<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  onDidChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onDidChangeEmitter<span class="token punctuation">.</span>event<span class="token punctuation">;</span>

  <span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述就是VS Code监听虚拟文档变化所必须的内容。下面将使用事件发射器来添加<em>编辑器行为</em>。</p><h3 id="添加编辑器命令" tabindex="-1"><a class="header-anchor" href="#添加编辑器命令" aria-hidden="true">#</a> 添加编辑器命令</h3><p>为了阐述事件变动和获取更多cowsay，我们需要倒叙cow刚刚说的东西。首先我们需要一个命令：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 注册一个可以更新当前cow的命令</span>
subscriptions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
	vscode<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">registerCommand</span><span class="token punctuation">(</span><span class="token string">&#39;cowsay.backwards&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vscode<span class="token punctuation">.</span>window<span class="token punctuation">.</span>activeTextEditor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 不打开编辑器</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">let</span> <span class="token punctuation">{</span> document <span class="token punctuation">}</span> <span class="token operator">=</span> vscode<span class="token punctuation">.</span>window<span class="token punctuation">.</span>activeTextEditor<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>uri<span class="token punctuation">.</span>scheme <span class="token operator">!==</span> myScheme<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 不是我的协议时直接返回</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 获取path的内容, 对这个内容倒序处理, 然后创建一个新的uri</span>
		<span class="token keyword">let</span> say <span class="token operator">=</span> document<span class="token punctuation">.</span>uri<span class="token punctuation">.</span>path<span class="token punctuation">;</span>
		<span class="token keyword">let</span> newSay <span class="token operator">=</span> say
			<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> newUri <span class="token operator">=</span> document<span class="token punctuation">.</span>uri<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> newSay <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">await</span> vscode<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">showTextDocument</span><span class="token punctuation">(</span>newUri<span class="token punctuation">,</span> <span class="token punctuation">{</span> preview<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码片段检查了我们当前是不是激活了一个编辑器（用户当前选中的编辑器tab），对应的文档是不是符合我们的协议。因为命令是对任何人生效的，所以我们有必要去做这些检查。然后uri的path对象被翻转，再重新创建出一个新的uri，最后则打开了一个编辑器。</p><p>注册命令最重要事就是在<code>package.json</code>中声明配置。我们在<code>contributes</code>部分添加下列配置：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;menus&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;editor/title&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cowsay.backwards&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;group&quot;</span><span class="token operator">:</span> <span class="token string">&quot;navigation&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;when&quot;</span><span class="token operator">:</span> <span class="token string">&quot;resourceScheme == cowsay&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>contributes/commands</code>中的<code>cowsay.backwards</code>命令告诉编辑器<em>操作</em>出现在编辑器的标题菜单中（工具栏右上角），但如果只是这样简单的配置，每个编辑器就都会显示这个命令。然后我们的<code>when</code>语句就出场了，它描述了何时才显示这个操作。在这个例子中，文档的资源协议必须是<code>cowsay</code>，我们的命令才会生效。这个配置对默认显示全部命令的<code>commandPalette</code>菜单同样生效。</p><p><img src="https://media.githubusercontent.com/media/Microsoft/vscode-docs/master/api/extension-guides/images/virtual-documents/cowsay-bwd.png" alt="cowsay-bwd"></p><h3 id="事件的可见性" tabindex="-1"><a class="header-anchor" href="#事件的可见性" aria-hidden="true">#</a> 事件的可见性</h3><p><em>文档供应器函数</em>是VS Code中的一等公民，它们的内容以常规的文本文档格式呈现，它们共用一套基础实现方式——如：使用了文件系统的实现。这也就意味着“你的”文档无法被隐藏，它们必定会出现在<code>onDidOpenTextDocument</code>和<code>onDidCloseTextDocument</code>事件中，它们是<code>vscode.workspace.textDocuments</code>中的一部分。通用的准则就是根据文档的<code>协议</code>决定你是否需要对文档进行什么操作。</p><h3 id="文件系统api" tabindex="-1"><a class="header-anchor" href="#文件系统api" aria-hidden="true">#</a> 文件系统API</h3>`,27),k={href:"https://code.visualstudio.com/api/references/vscode-api#FileSystemProvider",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"FileSystemProvider",-1);function v(b,h){const a=i("ExternalLinkIcon");return o(),p("div",null,[l,n("p",null,[s("通过VS Code的文本内容供应器API(text document content provider API)，你可以为任意来源的文件创建只读文档。本示例源码请查看"),n("a",r,[s("https://github.com/Microsoft/vscode-extension-samples/blob/master/virtual-document-sample/README.md"),t(a)])]),d,n("p",null,[s("如果你需要更强的灵活性和掌控力，请查看"),n("a",k,[m,t(a)]),s("API，它可以实现整套完整的文件系统，获取文件、文件夹、二进制数据，删除文件，创建文件等等。")])])}const g=e(u,[["render",v],["__file","08.virtual-documents.html.vue"]]);export{g as default};
