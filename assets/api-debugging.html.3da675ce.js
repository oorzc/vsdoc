import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as l,a as e,b as o,d as t,w as s,e as d,r as i}from"./app.ed9f300c.js";const p={},g=d('<h1 id="调试器api" tabindex="-1"><a class="header-anchor" href="#调试器api" aria-hidden="true">#</a> 调试器API</h1><p>VS Code 允许插件创作者制作新的<strong>调试器插件</strong>，或为已有的调试功能添加<strong>特性</strong>。</p><p>我们提供了两个领域的API：</p><ul><li>通过成熟又强力的<strong>协议</strong>生成新的VS Code常规调试界面</li><li>常规的<strong>插件API</strong>，但不包括VS Code的全部调试功能</li></ul><p>提供这两种截然不同的API是因为VS Code的“热拔插调试器”插件架构（我们不会移除向后兼容的基于<em>协议</em>的调试器连接方法）</p><p>下列图片展示了两种API在VS Code中协作的方式：</p><p><img src="https://raw.githubusercontent.com/Microsoft/vscode-docs/master/docs/extensionAPI/images/api-debugging/debug-extension-api.png" alt="debug-extension-api"></p><p><strong>调试适配器</strong>是一个典型的脱机程序，通过**调试适配器协议（Debug Adapter Protocol）**连接到真实的调试器和具体的调试器API上。因为调试适配器可以用任意的语言实现，因此非常适合先前<em>已有</em>的调试器或者运行时存在的场合，连接协议比实现了协议本身的客户端库提供的API更加重要。</p><p>调试适配器并不是VS Code本身的插件，而要创作者封装出一个调试器插件才行，不要担心，你并不需要写太多代码。这个插件只是一个容器，在<code>package.json</code>中只要提供必要的<strong>配置项</strong>即可。当调试器会话运行后，VS Code会进入调试器插件，启动调试适配器，然后用调试适配器协议通信。</p><p>下面是我们为调试器插件提供的最新的API。</p><h2 id="调试器插件api" tabindex="-1"><a class="header-anchor" href="#调试器插件api" aria-hidden="true">#</a> 调试器插件API</h2><hr>',12),u=e("code",null,"vscode.debug",-1),h={href:"https://github.com/Microsoft/vscode-docs/blob/master/docs/extensionAPI/vscode-api.md#debug",target:"_blank",rel:"noopener noreferrer"},b=e("h4",{id:"调试型钩子",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#调试型钩子","aria-hidden":"true"},"#"),o(" 调试型钩子")],-1),m=e("p",null,[o("所有调试型的钩子都在"),e("code",null,"DebugConfigurationProvider"),o("中。")],-1),_=e("code",null,"registerDebugConfigurationProvider",-1),f=e("code",null,"DebugConfigurationProvider",-1),S={href:"https://github.com/Microsoft/vscode-docs/blob/master/docs/extensionAPI/extension-points.md#contributesdebuggers",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"debugger",-1),C=d('<p>当前，你可以使用的钩子有：</p><ul><li><p>只要VS Code通过<code>launch.json</code>初始化出一个新的调试器配置就会为所有注册了<code>DebugConfigurationProviders</code>的插件调用<code>provideDebugConfigurations</code>，然后合并返回的调试器配置，注入到package.json中。</p></li><li><p>VS Code每次在启动调试会话前调用<code>resolveDebugConfiguration</code>方法，<code>resolveDebugConfiguration</code>的实现可以通过给调试配置中传入缺省值或者添加/改变/移除配置项的方式和调试配置“通信”。通过这个机制，甚至可以实时调整调试类型。</p></li><li><p><code>debugAdapterExecutable</code>方法会在VS Code启动了调试器之后调用，这个方法会返回调试适配器执行的路径（接受可选参数）。如果没有实现这个方法，VS Code则会使用package.json中配置的静态路径。</p></li></ul><h4 id="调试会话生命周期api" tabindex="-1"><a class="header-anchor" href="#调试会话生命周期api" aria-hidden="true">#</a> 调试会话生命周期API</h4><p>一个调试会话在插件API中表示为<code>DebugSession</code>，它的声明周期可以通过下列方式控制和追踪：</p><ul><li><code>startDebugging </code>：调试启动时触发，可以接受一个命名的调试器/复合配置/内存中的配置。</li><li><code>onDidStartDebugSession</code>：调试会话启动后触发。</li><li>当前激活的调试会话可由变量<code>activeDebugSession</code>获得，调试会话变动反应在<code>onDidChangeActiveDebugSession</code>事件中。</li><li><code>onDidTerminateDebugSession</code>：调试会话关闭后触发。</li></ul><h4 id="调试会话api" tabindex="-1"><a class="header-anchor" href="#调试会话api" aria-hidden="true">#</a> 调试会话API</h4><p>目前调试会话的API还比较少：</p><ul><li>通过<code>customRequest</code>方法将调试适配器的请求发送到受控调试方。</li><li>自定义的调试适配器事件在<code>onDidReceiveDebugSessionCustomEvent</code>中获取。</li></ul><h4 id="断点api" tabindex="-1"><a class="header-anchor" href="#断点api" aria-hidden="true">#</a> 断点API</h4><p>所有的断点类型都是<code>Breakpoint</code>的子类，当前提供的子类有<code>SourceBreakpoint</code>和<code>FunctionBreakpoint</code></p><ul><li><code>vscode.debug.breakpoints</code>提供了工作区所有的断点集合。用<code>instanceof</code>检查单个断点的具体对象类型。</li><li><code>vscode.debug.onDidChangeBreakpoints</code>侦听断点的添加、移除、改变事件。</li><li><code>SourceBreakpoints</code>和<code>FunctionBreakpoints</code>只能通过<code>addBreakpoints</code>和<code>removeBreakpoints</code>函数添加。</li></ul><p>!&gt;注意：一开始获取断点可能是一个空数组，而随后则会触发<code>BreakpointsChangeEvent</code>事件并更新<code>vscode.debug.breakpoints</code>，在这个时间点你就能获得正确的集合。所以如果你需要正确的断点集合，不要忘了注册<code>BreakpointsChangeEvent</code>事件。</p><h2 id="调试适配器协议-dap-debug-adapter-protocol" tabindex="-1"><a class="header-anchor" href="#调试适配器协议-dap-debug-adapter-protocol" aria-hidden="true">#</a> 调试适配器协议（DAP - Debug Adapter Protocol）</h2><hr>',14),k={href:"https://github.com/Microsoft/vscode-debugadapter-node",target:"_blank",rel:"noopener noreferrer"},V={href:"https://microsoft.github.io/debug-adapter-protocol",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.npmjs.com/package/vscode-debugprotocol",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/Microsoft/vscode-debugadapter-node",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/Microsoft/vscode-mono-debug/blob/master/src/DebugSession.cs",target:"_blank",rel:"noopener noreferrer"},A=e("p",null,"下列调试器插件项目会教你如何实现调试适配器：",-1),I=e("thead",null,[e("tr",null,[e("th",null,"GitHub项目"),e("th",null,"描述"),e("th",null,"实现语言")])],-1),B={href:"https://github.com/Microsoft/vscode-mock-debug.git",target:"_blank",rel:"noopener noreferrer"},M=e("td",null,"一个假的调试器",-1),N=e("td",null,"TypeScript",-1),y={href:"https://github.com/Microsoft/vscode-node-debug2.git",target:"_blank",rel:"noopener noreferrer"},T=e("td",null,"内建的基于CDP-based的Node.js调试器",-1),j=e("td",null,"TypeScript",-1),E={href:"https://github.com/Microsoft/vscode-node-debug.git",target:"_blank",rel:"noopener noreferrer"},w=e("td",null,"内建的传统Node.js调试器",-1),R=e("td",null,"TypeScript",-1),F={href:"https://github.com/Microsoft/vscode-mono-debug.git",target:"_blank",rel:"noopener noreferrer"},L=e("td",null,"一个供Mono使用的简单的C#调试器",-1),q=e("td",null,"C#",-1),z=d(`<h2 id="一语道破——调试适配器协议" tabindex="-1"><a class="header-anchor" href="#一语道破——调试适配器协议" aria-hidden="true">#</a> 一语道破——调试适配器协议</h2><hr><p>我们快速地看一下VS Code和调试器间的互动，这应该能帮你快速地实现基于调试适配器协议的调试适配器。</p><p>调试器会话启动，VS Code加载调试适配器，通过<em>stdin</em>和<em>stdout</em>进行通信。VS Code发送了一个<strong>初始化</strong>请求，然后用<em>行列值是0，1</em>的路径格式信息（原生或URI）配置好调试器。如果你的调试器是TypeScript或C#实现的<code>Debugsession</code>中派生出来的，你则不需要自行处理初始化请求。</p><p>根据用户创建的启动配置文件中的<em>请求</em>属性，VS Code会发送*加载（launch）<em>或是</em>附加（attch）*请求。对于<strong>加载</strong>类型，调试适配器需要加载一个运行时或者可以调试的程序。如果这个程序可以通过stdin/stdout和用户进行交互，那么调试适配器就会在一个可交互的终端或者控制台加载这个程序。对于<strong>附加</strong>类型，调试适配器则会连接或者附加到一个已经运行的程序上面。</p><p>因为这两种请求的参数都高度依赖特定的调试适配器实现，所以调试适配器协议不提供任何参数描述。而VS Code则会把所有用户启动配置传给<em>加载</em>或<em>附加</em>请求。这两种属性的智能补全和悬停信息提示可以在适配器插件中的<code>package.json</code>进行配置，以帮助用户知道何时可以创建或编辑<em>启动配置</em>。</p><p>VS Code会帮调试适配器保留断点，所以必须要在调试会话启动时，对应地注册适配器中的断点。因为VS Code不知道注册断点的最佳时机，所以调试适配器会发送一个<strong>initialize</strong>事件给VS Code，告知它已经准备好接收断点配置请求了。</p><p>然后VS Code就会调用断点配置请求，发送所有的断点：</p><ul><li><strong>setBreakpoints</strong> 为每个源文件带上断点，</li><li><strong>setFunctionBreakpoints</strong> 如果调试适配器支持函数断点，</li><li><strong>setExceptionBreakpoints</strong> 如果调试适配器支持异常选项，</li><li><strong>configurationDoneRequest</strong> 指示配置序列已经结束。</li></ul><p>所以，当你准备好了的时候不要忘了发送<em>initialize</em>事件接收断点。不然已保留的断点不会再储存下来。</p><p><em>setBreakpoints</em>请求为文件设置所有已存在的断点（所以不是增量的哦）。常见的场景就是为某个文件清除所有的断点，然后再根据请求设置断点。<em>setFunctionBreakpoints</em>和<em>setFunctionBreakpoints</em>需要返回真正的断点，然后VS Code就会动态地更新UI，如果断点无法跟随请求设置然后就会在后台移除。</p><p>当程序停止（在程序入口，断点命中，抛出异常，或者用户需要暂停执行），那么调试适配器必须发出<strong>stopped</strong>事件，带上原因和线程id。根据这条信息，VS Code会先请求<strong>threads</strong>（见下），然后列出停止的线程的堆栈追踪日志（栈帧列表）。如果用户深入到栈帧（stack frame）中去，VS Code会先请求这个栈帧的<strong>scopes</strong>，然后是这个scope的变量。如果变量是自构建的，VS Code会通过额外的<em>variables</em>请求获取它的属性。这个过程会生成下列事件层级：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Threads
   Stackframes
      Scopes
         Variables
            ...
               Variables
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>VS Code调试界面支持多线程（如果你只用Node.js调试器的话可能还不知道这个功能）。当VS Code接收到<strong>stopped</strong>或<strong>thread</strong>事件，然后它会立刻请求当时所有的<strong>threads</strong>并显示到界面上。如果只检测到一个线程，VS Code则会保留在单线程模式。<strong>Thread</strong>事件是可选的，不过调试适配器可以强制发送这个事件，即使不在暂停状态，VS Code也会动态地更新线程界面。</p><p>成功地<strong>加载</strong>或<strong>附加</strong>了调试适配器后，VS Code会发送<strong>threads</strong>请求当前线程，获取线程基线，然后开始侦听<strong>threads</strong>事件检查是否有新的或是终止的线程。即使你的调试适配器不支持多线程，它也必须实现<strong>threads</strong>请求，然后返回一个（虚假的）线程。线程的id必须要在所有需要线程id的地方消费掉，比如：<strong>stacktrace</strong>， <strong>pause</strong>，<strong>continue</strong>，<strong>next</strong>，<strong>stepIn</strong>，和 <strong>stepOut</strong>。</p><p>当发送<strong>disconnect</strong>请求时，VS Code会终止调试会话。如果调试目标在<em>加载</em>时被断开了，那么则会终止目标程序（如果必要的话，会强制终止）。如果调试目标在<em>附加</em>初始化时断开，那么则会立刻断开目标（程序则会继续执行）。在目标正常终止或崩溃时，调试适配器必须触发一个<strong>terminated</strong>事件。收到断开请求后，VS Code就会关闭调试适配器。</p><h2 id="下一步" tabindex="-1"><a class="header-anchor" href="#下一步" aria-hidden="true">#</a> 下一步</h2><p>学习更多VS Code扩展性模型，请参阅下列主题：</p>`,18);function J(O,U){const n=i("ExternalLinkIcon"),r=i("RouterLink");return c(),l("div",null,[g,e("p",null,[o("所有供调试使用的插件API都在"),u,o("下的命名空间中，你可以在"),e("a",h,[o("vscode 命名空间API参考"),t(n)]),o("中查看。")]),b,m,e("p",null,[_,o("注册了"),f,o("，调试器类型本身是在"),e("a",S,[o("发布内容配置项"),v,t(n)]),o("中配置的。")]),C,e("p",null,[o("你可以在"),e("a",k,[o("vscode-debugadapter-node"),t(n)]),o("仓库中找到JSON格式或者TypeScript定义的"),e("a",V,[o("调试适配器协议"),t(n)]),o("规格说明书。这两个文件都详细地列出了每个协议的请求、响应和事件结构。这个协议在NPM库"),e("a",x,[o("vscode-debugprotocol"),t(n)]),o("中也可以找到。")]),e("p",null,[o("我们已经实现了调试适配器协议的TypeScript和C#客户端版本，不过只有JavaScript/TypeScript的客户端库在NPM"),e("a",D,[o("vscode-debugadapter-node"),t(n)]),o("中是可用的。C#的库可以在"),e("a",P,[o("Mono Debug"),t(n)]),o("中找到。")]),A,e("table",null,[I,e("tbody",null,[e("tr",null,[e("td",null,[e("a",B,[o("Mock Debug"),t(n)])]),M,N]),e("tr",null,[e("td",null,[e("a",y,[o("Node Debug2"),t(n)])]),T,j]),e("tr",null,[e("td",null,[e("a",E,[o("Node Debug"),t(n)])]),w,R]),e("tr",null,[e("td",null,[e("a",F,[o("Mono Debug"),t(n)])]),L,q])])]),z,e("ul",null,[e("li",null,[t(r,{to:"/extension-authoring/example-debug-adapter.html"},{default:s(()=>[o("示例：调试器")]),_:1}),o(" - 查看一个可执行的'模拟'调试器示例。")]),e("li",null,[t(r,{to:"/extensibility-reference/vscode-api.html"},{default:s(()=>[o("插件API概览")]),_:1}),o(" - 学习完整的VS Code扩展性模型。")]),e("li",null,[t(r,{to:"/extensibility-reference/extension-manifest.html"},{default:s(()=>[o("插件配置清单")]),_:1}),o(" - VS Code的package.json插件配置清单参阅")]),e("li",null,[t(r,{to:"/extensibility-reference/contribution-points.html"},{default:s(()=>[o("发布内容配置")]),_:1}),o(" - VS Code发布内容配置参阅")])])])}const K=a(p,[["render",J],["__file","api-debugging.html.vue"]]);export{K as default};
