import{_ as d}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as h,c as s,a,b as e,d as i,w as t,e as n,r as l}from"./app.ed9f300c.js";const c={},u=a("h1",{id:"插件功能",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#插件功能","aria-hidden":"true"},"#"),e(" 插件功能")],-1),p=n('<ul><li>插件可以使用的功能</li><li>这些功能点的细节索引</li><li>一些插件灵感</li></ul><p>不过，我们也会告诉你一些<a href="#%E9%99%90%E5%88%B6">限制</a>，为了避免插件影响到VS Code的性能和稳定性。比如：插件不可以修改VS Code UI底层的DOM。</p><h2 id="常用功能" tabindex="-1"><a class="header-anchor" href="#常用功能" aria-hidden="true">#</a> 常用功能</h2><hr><p><a href="/extension-capabilities/common-capabilities">常用功能</a>是你在任何插件中都可能用到的核心功能。</p><p>这些功能包括：</p><ul><li>注册命令、配置、快捷键绑定、菜单等。</li><li>保存工作区或全局数据。</li><li>显示通知信息。</li><li>使用快速选择获得用户输入。</li><li>打开系统的文件选择工具，以便用户选择文件或文件夹。</li><li>使用进度API提示耗时较长的操作。</li></ul><h2 id="主题" tabindex="-1"><a class="header-anchor" href="#主题" aria-hidden="true">#</a> 主题</h2><hr><p><a href="/extension-capabilities/theming">主题</a>控制着VS Code的外观——编辑器中的源代码的颜色和VS Code UI颜色。如果你曾经想要把VS Code搞成绿色，想象自己在黑客帝国里写代码，或者想要追求极简性冷淡灰色风格，那么主题章节就是为你而来。</p><h5 id="插件灵感" tabindex="-1"><a class="header-anchor" href="#插件灵感" aria-hidden="true">#</a> 插件灵感</h5><ul><li>改变你的代码颜色</li><li>改变VS Code UI颜色</li><li>将现有的TextMate主题应用到VS Code中</li><li>添加自定义图标</li></ul><h2 id="声明式添加语言特性" tabindex="-1"><a class="header-anchor" href="#声明式添加语言特性" aria-hidden="true">#</a> 声明式添加语言特性</h2><hr><p><a href="/language-extensions/README#%E5%A3%B0%E6%98%8E%E5%BC%8F%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">声明式语言特性</a>添加了基础的编程语言编辑支持，如括号匹配、自动缩进和语法高亮。这些功能都可以通过声明配置而不用写任何代码就可以获得，更高级的语言特性如IntelliSense或调试，请看<a href="#%E7%BC%96%E7%A8%8B%E5%BC%8F%E6%B7%BB%E5%8A%A0%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">编程式添加语言特性</a></p><h5 id="插件灵感-1" tabindex="-1"><a class="header-anchor" href="#插件灵感-1" aria-hidden="true">#</a> 插件灵感</h5><ul><li>将常用的JS代码片段打包到插件中</li><li>为VS Code添加新的语言支持</li><li>为一门语言添加或替换语法</li><li>通过注入的方式，扩展一门语法</li><li>将现有的 TextMate 语法迁移到VS Code中</li></ul><h2 id="编程式添加语言特性" tabindex="-1"><a class="header-anchor" href="#编程式添加语言特性" aria-hidden="true">#</a> 编程式添加语言特性</h2><hr>',19),_=a("a",{href:"/language-extensions/README#%E7%BC%96%E7%A8%8B%E5%BC%8F%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7"},"编程式添加语言特性",-1),f={href:"https://code.visualstudio.com/api/references/vscode-api#languages",target:"_blank",rel:"noopener noreferrer"},x=a("code",null,"vscode.languages.*",-1),b={href:"https://github.com/Microsoft/vscode-languageserver-node",target:"_blank",rel:"noopener noreferrer"},g=n('<p>虽然我们提供了一个<a href="/language-extensions/programmatic-language-features">语言特性</a>列表，但是并不阻碍你发挥想象，自由使用这些API。比方说，在行内显示额外信息，使用CodeLens和代码悬停是非常好的方式，而错误诊断可以高亮拼写或代码风格错误。</p><h5 id="插件灵感-2" tabindex="-1"><a class="header-anchor" href="#插件灵感-2" aria-hidden="true">#</a> 插件灵感</h5><ul><li>鼠标悬停于API上时, 出现用法示例</li><li>使用诊断，报告代码风格错误</li><li>注册新的HTML代码格式化</li><li>提供丰富的IntelliSense中间件</li><li>为一门语言添加代码折叠、面包屑、轮廓支持</li></ul><h2 id="扩展工作台" tabindex="-1"><a class="header-anchor" href="#扩展工作台" aria-hidden="true">#</a> 扩展工作台</h2><hr><p><a href="/extension-capabilities/extending-workbench">扩展工作台</a>加强了 VS Code 工作台的UI，为资源管理侧边栏添加了新的右击行为，你甚至可以用 <a href="/extension-guides/tree-view">TreeView</a>API构建自定义的资源管理侧边栏。如果你的插件需要完全自定义用户界面，那就使用<a href="/extension-guides/webview">Webview API</a>和HTML，CSS，Javascript构建你自己的UI。</p><h5 id="插件灵感-3" tabindex="-1"><a class="header-anchor" href="#插件灵感-3" aria-hidden="true">#</a> 插件灵感</h5><ul><li>自定义资源管理侧边栏的菜单行为</li><li>在侧边栏中创建新的、交互式的TreeView</li><li>定义新的活动栏视图</li><li>在状态栏显示新的信息</li><li>使用<code>WebView</code> API显示自定义内容</li><li>配置*源控制(git/svn等)*来源</li></ul><h2 id="调试" tabindex="-1"><a class="header-anchor" href="#调试" aria-hidden="true">#</a> 调试</h2><hr>',10),C={href:"https://code.visualstudio.com/docs/editor/debugging",target:"_blank",rel:"noopener noreferrer"},E=a("a",{href:"/extension-guides/debugger-extension"},"调试器插件",-1),S=a("h5",{id:"插件灵感-4",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#插件灵感-4","aria-hidden":"true"},"#"),e(" 插件灵感")],-1),A={href:"https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/",target:"_blank",rel:"noopener noreferrer"},V=a("li",null,"通过调试器插件添加语言支持",-1),m=a("li",null,"为调试配置文件添加丰富的智能提示或者悬停信息",-1),I=a("li",null,"为调试配置文件添加代码片段",-1),v={href:"https://code.visualstudio.com/api/references/vscode-api#debug",target:"_blank",rel:"noopener noreferrer"},B=n('<h5 id="插件灵感-5" tabindex="-1"><a class="header-anchor" href="#插件灵感-5" aria-hidden="true">#</a> 插件灵感</h5><ul><li>动态生成调试器配置文件，启动调试器会话</li><li>跟踪调试会话的声明周期</li><li>编程式管理断点</li></ul><h2 id="限制" tabindex="-1"><a class="header-anchor" href="#限制" aria-hidden="true">#</a> 限制</h2><hr><p>最后，我还对插件也提出了一些限制。</p><h4 id="不可访问dom" tabindex="-1"><a class="header-anchor" href="#不可访问dom" aria-hidden="true">#</a> 不可访问DOM</h4><p>插件没有权限访问VS Code UI的底层DOM，<strong>禁止</strong>添加自定义的CSS 和 HTML片段到VS Code UI上。</p><p>我们在一直努力优化VS Code底层的web技术，为用户创造高可用、持续响应的编辑器，而我们也会继续调整这些技术中使用到的DOM。为了确保不会干扰到VS Code的性能和稳定性，同时不阻断其他插件的运行，所以我们的插件都跑在<a href="/advanced-topics/extension-host">插件主机</a>进程中，而且阻止了插件直接访问DOM的途径。</p>',8);function M(k,w){const o=l("RouterLink"),r=l("ExternalLinkIcon");return h(),s("div",null,[u,a("p",null,[e("VS Code 提供了非常多的方法，供插件扩展VS Code本身的能力。但是有的时候也很难找到对的"),i(o,{to:"/references/contribution-points.html"},{default:t(()=>[e("发布内容配置")]),_:1}),e("和"),i(o,{to:"/references/vscode-api.html"},{default:t(()=>[e("VS Code API")]),_:1}),e("。这章内容将插件的功能分成了几个部分，每个部分都将告诉你：")]),p,a("p",null,[_,e("可以为编程语言添加更为丰富的特性，如：悬停提示、转跳定义、错误诊断、IntelliSense和CodeLens。这些语言特性暴露于"),a("a",f,[x,i(r)]),e("API。语言插件可以直接使用这些API，或是自己写一个语言服务器，通过"),a("a",b,[e("语言服务器库"),i(r)]),e("将它适配到VS Code。")]),g,a("p",null,[e("你可以利用"),a("a",C,[e("调试"),i(r)]),e("来制作"),E,e("，这个插件需要将VS Code的调试UI连接到真实的调试器或者运行时上。")]),S,a("ul",null,[a("li",null,[e("通过"),a("a",A,[e("调试适配器"),i(r)]),e("将VS Code的调试UI连接到真实的调试器或者运行时上")]),V,m,I]),a("p",null,[e("另一方面，VS Code也提供了非常多的"),a("a",v,[e("调试器插件API"),i(r)]),e("，你可以用来实现任何VS Code调试器相关的功能，加强用户的调试体验。")]),B])}const L=d(c,[["render",M],["__file","index.html.vue"]]);export{L as default};
