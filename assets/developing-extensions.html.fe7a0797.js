import{_ as d}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as p,a as n,b as e,d as s,w as a,e as t,r as c}from"./app.ed9f300c.js";const r={},u=t('<h1 id="开发插件" tabindex="-1"><a class="header-anchor" href="#开发插件" aria-hidden="true">#</a> 开发插件</h1><p>这个章节会详细地讲解如何插件的运行，调试和故障排除。这些技巧也同样适用于调试你从市场安装的问题应用。</p><h2 id="创建你自己的插件" tabindex="-1"><a class="header-anchor" href="#创建你自己的插件" aria-hidden="true">#</a> 创建你自己的插件</h2><hr><p>为了开发VS Code插件，VS Code本身提供了以下几个工具，帮你快速开发：</p><ul><li>Yeoman生成器，用脚手脚创建一个插件</li><li>智能补全——悬停和找到你需要的插件API</li><li>编译Typescript（如果用Typescript实现的话）</li><li>运行和调试插件</li><li>发布插件</li></ul>',6),h=n("code",null,"yo code",-1),m=t('<p>!&gt; <strong>注意</strong>：以下部分假设你已经掌握了<code>yo code</code>Yeoman 插件生成器，和创建<code>launch.json</code>、<code>task.json</code>的基础知识。</p><h2 id="运行和调试插件" tabindex="-1"><a class="header-anchor" href="#运行和调试插件" aria-hidden="true">#</a> 运行和调试插件</h2><hr><p>按下<code>F5</code>，你就可以很轻松地调试插件了。这个命令会打开一个加载了你的插件的新窗口，插件输出的信息能在<code>调试控制台</code>里找到，在这个模式下你可以打断点、一步步地调试代码，在<code>调试</code>侧边栏或者<code>调试控制台</code>（用console方法输出才可以）检查变量。</p><p><img src="https://github.com/Microsoft/vscode-docs/raw/master/docs/extensions/images/developing-extensions/debug.png" alt=""></p><p>根据插件的不同，你可能需要更多关于调试适配器或者语言服务器插件的相关教程：</p>',6),g=n("h2",{id:"编译typescript",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#编译typescript","aria-hidden":"true"},"#"),e(" 编译Typescript")],-1),v=n("p",null,"如果你的插件是Typescript实现的，那你首先就要把代码编译成Javascript。 编译过程的配置如下所示：",-1),k=n("code",null,"tsconfig.json",-1),b={href:"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://code.visualstudio.com/docs/languages/typescript#_tsconfigjson",target:"_blank",rel:"noopener noreferrer"},_=n("li",null,[e("当前Typescript编译器的版本在"),n("code",null,"node_modules"),e("文件夹里面")],-1),f=n("li",null,[e("API定义在"),n("code",null,"node_modules/vscode"),e("中")],-1),q=t(`<p>运行插件前，Typescript编译器会被触发。<code>.vscode/launch.json</code>中的<code>preLaunchTask</code>属性定义了这项工作，在调试会话启动前会先启动这个配置好的任务。</p><p>如果你的插件在很久之前就编译好了，比如依赖于<code>0.1.0</code>ts版本，而<code>2.0.0</code>已经老早就出来了，那么通过下列步骤来升级你的插件：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 访问 https://go.microsoft.com/fwlink/?LinkId=733558</span>
<span class="token comment">// 查看更多关于tasks.json格式的内容</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;tasks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;script&quot;</span><span class="token operator">:</span> <span class="token string">&quot;watch&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;problemMatcher&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$tsc-watch&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;isBackground&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token property">&quot;presentation&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;reveal&quot;</span><span class="token operator">:</span> <span class="token string">&quot;never&quot;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;group&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;kind&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;isDefault&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将下列设置添加到<em>settings.json</em>中</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>  <span class="token comment">// 关边tsc的自动检测任务，因为我们在添加了npm脚本</span>
    <span class="token property">&quot;typescript.tsc.autoDetect&quot;</span><span class="token operator">:</span> <span class="token string">&quot;off&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>确保<em>launch.json.<em>中引用了正确的</em>预运行任务</em>：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;preLaunchTask&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm: watch&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>?&gt; **注意：**Typescript编译器运行在watch模式下，所以任何文件变动都会自动编译</p><h2 id="加载你的插件" tabindex="-1"><a class="header-anchor" href="#加载你的插件" aria-hidden="true">#</a> 加载你的插件</h2><p>你的插件会加载在<code>插件开发环境</code>的新窗口中。用<code>extensionDevelopmentPath</code>命令行也可以达到同样的效果，这个选项告诉VS Code去哪里查找新的插件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>code <span class="token parameter variable">--extensionDevelopmentPath</span><span class="token operator">=</span>_my_extension_folder
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一旦插件环境加载完毕，VS Code就会把调试器附加上去，然后启动调试会话。</p><p>下面是按下<code>F5</code>之后的会发生的事情：</p><ol><li><code>.vscode/launch.json</code>指示VS Code先运行一个叫做<code>npm</code>的任务</li><li><code>.vscode/tasks.json</code>定义了<code>npm</code>任务，其实就是<code>npm run compile</code>的脚本命令</li><li><code>package.json</code>定义<code>compile</code>为<code>tsc -watch -p ./</code></li><li>然后会调用node_modules文件夹下的Typescript编译器，然后生成<code>out/extension.js</code>和<code>out/extension.js.map</code></li><li>Typescript编译成功之后，生成<code>code --extensionDevelopmentPath=\${workspaceFolder}</code>进程</li><li>加载运行在<strong>扩展环境</strong>下的第二个VS Code实例，它会搜寻<code>\${workspaceFolder}</code>下的插件</li></ol><h2 id="修改你的插件" tabindex="-1"><a class="header-anchor" href="#修改你的插件" aria-hidden="true">#</a> 修改你的插件</h2><p>你可以在VS Code状态栏的左侧观察Typscript编译器的进度，在状态栏中你也可以找到编译的错误和警告。当编译通过之后，你必须重启<strong>扩展开发环境</strong>才能查看到你的修改。重启扩展开发环境有两种可选的方式：</p><ul><li>在调试面板中按下<code>重启</code></li><li>在插件开发环境中按<code>Ctrl+R</code>（macOS：Cmd+R）</li></ul><h2 id="分析你的插件" tabindex="-1"><a class="header-anchor" href="#分析你的插件" aria-hidden="true">#</a> 分析你的插件</h2><p>你可以用Chrome DevTool内存和CUP分析工具分析你的插件。</p><p>跟我做：</p><ol><li>在命令行中带上<code>--inspect-extensions=&lt;port&gt;</code>标识，启动你的VS Code，比如：<code>code --inspect-extensions=9333</code></li><li>在VS Code的<strong>命令面板(<code>Shfit + Cttl+ P</code>)<strong>中选择并打开</strong>Developer: Toggle Developer Tools</strong></li><li>在打开的DevTool中查看<code>Console</code>标签，找到<code>Debugger listening on port 9333</code>开头的<code>chrome-devtools</code>链接信息</li><li>打开你自己的Chrome浏览器，输入该链接，然后会进入DevTool提供的专用调试环境</li><li>使用内存和CPU分析器，了解内存和计算资源的使用情况</li></ol><p><img src="https://raw.githubusercontent.com/Microsoft/vscode-docs/master/docs/extensions/images/developing-extensions/chrome-devtools.png" alt="chrome-devtools"></p><h2 id="问题追踪" tabindex="-1"><a class="header-anchor" href="#问题追踪" aria-hidden="true">#</a> 问题追踪</h2><p>当你自己的的插件或者市场上的插件出现问题时，你可以参考这些建议进行问题追踪：</p><h4 id="禁用插件-启动vs-code" tabindex="-1"><a class="header-anchor" href="#禁用插件-启动vs-code" aria-hidden="true">#</a> 禁用插件，启动VS Code</h4><p>通过<code>--disable-extensions</code>命令行，禁用VS Code会话中的所有插件。这个方式可以帮你逐步缩小问题范围——到底是插件问题，还是VS Code本身的问题。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>code --disable-extensions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="使用开发工具控制台" tabindex="-1"><a class="header-anchor" href="#使用开发工具控制台" aria-hidden="true">#</a> 使用开发工具控制台</h4><p>如果你安装的插件不能正常工作，第一步工作最好是先检查一下VS Code<strong>开发者工具</strong>的Console面板。插件作者可能在开发插件的时候已经添加了一些日志——VS Code 运行于Electron之上，所以你可以通过Chrome<strong>开发者工具</strong>获得有力的支持。</p><p>通过<strong>帮助</strong>&gt;<strong>切换开发人员工具</strong>（Windows/Linux：<code>Ctrl + Shift + I</code>，macOS：<code>Cmd + Shift + I</code>）打开<strong>开发工具</strong>然后选择<strong>Console</strong>标签。试着运行插件的功能，检查Console的输出。你可以使用<code>console.log</code>输出各类信息以及VS Code扩展环境抛出的详细异常。</p><p>?&gt; **开发者小贴士：**当你制作插件的时候，请为用户提供有用的日志信息，你给用户的信息越多，用户越能够独立地解决问题。好的日志也同样能帮你快速地找到真正的问题所在。</p><h4 id="重装插件" tabindex="-1"><a class="header-anchor" href="#重装插件" aria-hidden="true">#</a> 重装插件</h4><p>有时候安装插件会失败或者报错，所以任何插件不能正常工作的时候，你都可以尝试卸载然后重装插件的方式来解决。VS Code提供了一个非常方便的命令<strong>Developer: Reinstall Extension</strong>，输入这串命令之后，你可以在下拉框里选择你要重装的插件，最后按照指示重载VS Code就好了。</p><h4 id="查看插件的readme" tabindex="-1"><a class="header-anchor" href="#查看插件的readme" aria-hidden="true">#</a> 查看插件的README</h4><p>为了正常运行，有些插件会有一些其他的依赖，比如独立的语法检查器、编译器、自定义的配置文件等。因此在侧边栏<strong>插件</strong>中点击某个插件后显示的<strong>插件详情</strong>页面会非常有用，它就是插件的<strong>README</strong>，其中可能包含了插件的配置和使用方式。</p><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><p><strong>问：我怎么在插件里使用VS Code新版本引入的API？</strong></p><p>答：如果你想用最新的VS Code API，你可以在插件的<code>package.json</code>中的<code>engines</code>声明你想要用的引擎版本。</p><p>步骤如下：</p><ul><li>在<code>package.json</code>中的<code>engines</code>字段设置你的插件所需要的最低VS Code版本</li><li>在<code>package.json</code>中添加<code>postinstall</code>脚本：<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;postinstall&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node ./node_modules/vscode/bin/install&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>在你的插件根目录下输入<code>npm install</code></li><li><code>vscode</code>模块根据<code>engine</code>中声明的版本下载对应的<code>vscode.d.ts</code></li><li>回到VS Code，用代码补全验证是否出现了你想要的API提示</li></ul><h2 id="下一步" tabindex="-1"><a class="header-anchor" href="#下一步" aria-hidden="true">#</a> 下一步</h2>`,41);function C(y,S){const o=c("RouterLink"),i=c("ExternalLinkIcon");return l(),p("div",null,[u,n("p",null,[e("我们建议你用脚手架生成基础文件，Yeoman的"),h,e("命令可以完成这个工作，生成器能极大地提升你的开发体验，我们在"),s(o,{to:"/extension-authoring/extension-generator.html"},{default:a(()=>[e("插件生成器")]),_:1}),e("里面有详细的步骤。")]),m,n("ul",null,[n("li",null,[s(o,{to:"/extension-authoring/example-language-server.html"},{default:a(()=>[e("示例：语言服务器")]),_:1}),e(" - 学习如何实现一个语言服务器插件")]),n("li",null,[s(o,{to:"/extension-authoring/developing-extensions.html"},{default:a(()=>[e("示例：调试器")]),_:1}),e(" - 通过VS Code Debug Protocol接入调试器")])]),g,v,n("ul",null,[n("li",null,[k,e("定义了Typescript的编译选项。了解更多"),n("a",b,[e("Typescript wiki"),s(i)]),e("或者"),n("a",x,[e("Typescript语言章节"),s(i)])]),_,f]),q,n("ul",null,[n("li",null,[s(o,{to:"/extension-authoring/testing-extensions.html"},{default:a(()=>[e("测试你的插件")]),_:1}),e(" - 学习如何写单元测试和集成测试。")]),n("li",null,[s(o,{to:"/extension-authoring/publish-extension.html"},{default:a(()=>[e("发布工具")]),_:1}),e(" - 用vsce命令行工具发布你的插件。")]),n("li",null,[s(o,{to:"/extensibility-reference/extension-manifest.html"},{default:a(()=>[e("插件配置清单")]),_:1}),e(" - VS Code插件清单文件参阅。")]),n("li",null,[s(o,{to:"/extensibility-reference/vscode-api.html"},{default:a(()=>[e("插件API")]),_:1}),e(" - 学习更多VS Code扩展性API。")])])])}const T=d(r,[["render",C],["__file","developing-extensions.html.vue"]]);export{T as default};
