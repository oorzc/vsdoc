import{_ as c}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as l,a as n,b as s,d as a,w as u,e as p,r as o}from"./app.ed9f300c.js";const r={},k=n("h1",{id:"笔记本-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#笔记本-api","aria-hidden":"true"},"#"),s(" 笔记本 API")],-1),d=n("p",null,"笔记本 API 允许 Visual Studio Code 以笔记本的形式打开文件，执行笔记本代码单元，把笔记本的内容以多种丰富的并且可交互式的格式展现。在 Visual Studio Code 里面，你可以获得与 Jupyter、Google Colab 等流行的笔记本相似的书写体验。",-1),v={href:"https://github.com/microsoft/vscode-docs/blob/master/insiders",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"vscode.proposed.d.ts",-1),b={href:"https://github.com/microsoft/vscode-docs/blob/master/api/advanced-topics/using-proposed-api",target:"_blank",rel:"noopener noreferrer"},g=p('<h2 id="笔记本的构成" tabindex="-1"><a class="header-anchor" href="#笔记本的构成" aria-hidden="true">#</a> 笔记本的构成</h2><hr><p>一个笔记本由一系列代码块以及输出构成。代码块由 VS Code 核心进程负责渲染，它有两种类型，一种是 <strong>Markdown 代码块</strong>，另一种是<strong>常规代码块</strong>。输出的格式是多种多样的，比如普通文本、JSON、图片、HTML。其它的应用相关的数据以及交互式的小程序，由插件<strong>自行</strong>负责渲染。</p><p>代码块的读写操作是由 <code>NotebookContentProvider</code> 控制的，<code>NotebookContentProvider</code> 从文件系统中读取数据并将其转化为代码块，同时将笔记本的改动同步给文件系统。<code>NotebookKernel</code> 处理来自代码块的内容，并输出各种各样的格式，包括纯文本、格式化文档或者交互式小程序。应用相关的输出格式和交互式小程序则由 <code>NotebookOutputRenderer</code> 渲染。</p><p>一图胜千言：</p><p><img src="https://media.githubusercontent.com/media/microsoft/vscode-docs/master/api/extension-guides/images/notebook/architecture-overview.png" alt="结构概览"></p><h2 id="内容供应器函数" tabindex="-1"><a class="header-anchor" href="#内容供应器函数" aria-hidden="true">#</a> 内容供应器函数</h2><hr>',8),h={href:"https://github.com/microsoft/vscode/blob/43184b2beda9edb613caadc2bab29ec50bad863f/src/vs/vscode.proposed.d.ts#L1792-L1805",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,[s("可以使用 "),n("code",null,"NotebookContentProvider"),s(" 生成一段段的 Markdown 和代码块。与此同时，"),n("code",null,"NotebookContentProvider"),s(" 会将笔记本中产生的更改同步到源文件中。")],-1),f=n("p",null,"下面是一些范例：",-1),w={href:"https://github.com/microsoft/notebook-extension-samples/tree/master/notebook-provider",target:"_blank",rel:"noopener noreferrer"},_={href:"https://nbformat.readthedocs.io/en/latest/format_description.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/microsoft/vscode-markdown-notebook",target:"_blank",rel:"noopener noreferrer"},C=n("h3",{id:"举个例子",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#举个例子","aria-hidden":"true"},"#"),s(" 举个例子")],-1),N=n("code",null,".notebook",-1),q={href:"https://nbformat.readthedocs.io/en/latest/format_description.html",target:"_blank",rel:"noopener noreferrer"},I=p(`<p>内容供应器函数是定义在 <code>package.json</code> 的 <code>contributes.notebookProvider</code> 字段中的，像下面这样：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    ...
    <span class="token property">&quot;activationEvents&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;onNotebook:my-notebook-provider&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;contributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        ...
        <span class="token property">&quot;notebookProvider&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token property">&quot;viewType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-notebook-provider&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;displayName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;My Notebook Provider&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;selector&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                    <span class="token punctuation">{</span>
                        <span class="token property">&quot;filenamePattern&quot;</span><span class="token operator">:</span> <span class="token string">&quot;*.notebook&quot;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在插件的 activate 事件中注册：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> vscode <span class="token keyword">from</span> <span class="token string">&#39;vscode&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">activate</span><span class="token punctuation">(</span>context<span class="token operator">:</span> vscode<span class="token punctuation">.</span>ExtensionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context<span class="token punctuation">.</span>subscriptions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
    vscode<span class="token punctuation">.</span>notebook<span class="token punctuation">.</span><span class="token function">registerNotebookContentProvider</span><span class="token punctuation">(</span>
      <span class="token string">&#39;my-notebook-provider&#39;</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">SampleProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">SampleProvider</span> <span class="token keyword">implements</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span>NotebookContentProvider <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">openNotebook</span><span class="token punctuation">(</span>uri<span class="token operator">:</span> vscode<span class="token punctuation">.</span>Uri<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>vscode<span class="token punctuation">.</span>NotebookData<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> vscode<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      languages<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      metadata<span class="token operator">:</span> <span class="token punctuation">{</span> custom<span class="token operator">:</span> content<span class="token punctuation">.</span>metadata <span class="token punctuation">}</span><span class="token punctuation">,</span>
      cells<span class="token operator">:</span> content<span class="token punctuation">.</span>cells<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cell<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cell<span class="token punctuation">.</span>cell_type <span class="token operator">===</span> <span class="token string">&#39;markdown&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            cellKind<span class="token operator">:</span> vscode<span class="token punctuation">.</span>CellKind<span class="token punctuation">.</span>Markdown<span class="token punctuation">,</span>
            source<span class="token operator">:</span> cell<span class="token punctuation">.</span>source<span class="token punctuation">,</span>
            language<span class="token operator">:</span> <span class="token string">&#39;markdown&#39;</span><span class="token punctuation">,</span>
            outputs<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            metadata<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cell<span class="token punctuation">.</span>cell_type <span class="token operator">===</span> <span class="token string">&#39;code&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            cellKind<span class="token operator">:</span> vscode<span class="token punctuation">.</span>CellKind<span class="token punctuation">.</span>Code<span class="token punctuation">,</span>
            source<span class="token operator">:</span> cell<span class="token punctuation">.</span>source<span class="token punctuation">,</span>
            language<span class="token operator">:</span> content<span class="token punctuation">.</span>metadata<span class="token operator">?.</span>language_info<span class="token operator">?.</span>name <span class="token operator">||</span> <span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span>
            outputs<span class="token operator">:</span> <span class="token punctuation">[</span>
              <span class="token comment">/* not implemented */</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            metadata<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Unexpected cell:&#39;</span><span class="token punctuation">,</span> cell<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 下面是一些伪方法，与本例无关</span>
  onDidChangeNotebook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">EventEmitter</span><span class="token generic class-name"><span class="token operator">&lt;</span>vscode<span class="token punctuation">.</span>NotebookDocumentEditEvent<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>event<span class="token punctuation">;</span>
  <span class="token keyword">async</span> <span class="token function">resolveNotebook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">async</span> <span class="token function">saveNotebook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">async</span> <span class="token function">saveNotebookAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">async</span> <span class="token function">backupNotebook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>vscode<span class="token punctuation">.</span>NotebookDocumentBackup<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token function-variable function">delete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>紧接着，启动你的插件并在插件窗口中打开后缀名为 <code>.notebook</code> 的 Jupyter 格式文件：</p><p><img src="https://media.githubusercontent.com/media/microsoft/vscode-docs/master/api/extension-guides/images/notebook/ipynb-simple-provider.png" alt="简单的供应商——ipynb"></p><p>现在，我们可以打开和编辑 Jupyter 格式的笔记本，并且以普通文本和 Markdown 的形式预览代码块。然而，在编辑的时候由于并不会自动并持续性的将内容写入到磁盘中，所以需要实现 <code>saveNotebook</code> 方法，上面的代码中也提到了这个方法。同时，如果要运行每个代码块，需要实现 <code>NotebookKernel</code> 方法。</p><p>!&gt; **注意：**默认情况下，输出的 MIME 类型的顺序是通过笔记本提供的 <code>NotebookData#metadata.displayOrder</code> 属性来定义的，你也可以在 <code>openNotebook</code> 方法中自行设置。</p><h2 id="内核" tabindex="-1"><a class="header-anchor" href="#内核" aria-hidden="true">#</a> 内核</h2><hr>`,10),P={href:"https://github.com/microsoft/vscode/blob/43184b2beda9edb613caadc2bab29ec50bad863f/src/vs/vscode.proposed.d.ts#L1807-L1812",target:"_blank",rel:"noopener noreferrer"},M=p(`<p><code>NotebookKernel</code> 负责接收一个代码单元，并将其转化为一个或一组输出。</p><p>可以通过设置 <code>NotebookContentProvider#kernel</code> 属性，将笔记本内核（<code>NotebookKernel</code>）与一个内容供应器函数直接关联；或者调用 <code>vscode.registerNotebookKernel</code> 方法来全局注册，<code>registerNotebookKernel</code> 方法接收三个参数：</p><ul><li><p>一个内核的标识符</p></li><li><p>与验证文件相关的正则表达式列表</p></li><li><p>一个 <code>vscode.NotebookKernel</code> 对象：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>vscode<span class="token punctuation">.</span>notebook<span class="token punctuation">.</span><span class="token function">registerNotebookKernel</span><span class="token punctuation">(</span>
    <span class="token string">&quot;http-kernel&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;*.http&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        label<span class="token operator">:</span> <span class="token string">&quot;Http Kernel&quot;</span><span class="token punctuation">,</span>
        <span class="token function">executeCell</span><span class="token punctuation">(</span>document<span class="token operator">:</span> NotebookDocument<span class="token punctuation">,</span> cell<span class="token operator">:</span> NotebookCell<span class="token punctuation">,</span> token<span class="token operator">:</span> CancellationToken<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
        <span class="token function">executeAllCells</span><span class="token punctuation">(</span>document<span class="token operator">:</span> NotebookDocument<span class="token punctuation">,</span> token<span class="token operator">:</span> CancellationToken<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>如果已经通过 <code>NotebookContentProvider#kernel</code> 属性为 <code>NotebookContentProvider</code> 注册了一个内核，那么当你打开某个笔记本的时候， 这个内核会被默认选中。否则，会从已注册的内核中选取，你也可以使用 <strong>Notebook: Select Notebook Kernel</strong> 命令来自行切换要使用的内核。</p><p>一个小例子：</p>`,5),S={href:"https://github.com/microsoft/vscode-github-issue-notebooks/blob/master/src/extension/notebookProvider.ts",target:"_blank",rel:"noopener noreferrer"},E=p(`<h3 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h3><p>尽管一个笔记本内核只需要返回一个输出，实际上你仍然可以在其执行每一个代码块的时候，设置代码块的 <code>metadata</code>，借此来实现诸如时间计数器、执行徽标排序、运行状态图标此类的功能。下面的代码演示了如何使用 <code>executeCell</code> 方法：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">executeCell</span><span class="token punctuation">(</span>
  document<span class="token operator">:</span> vscode<span class="token punctuation">.</span>NotebookDocument<span class="token punctuation">,</span>
  cell<span class="token operator">:</span> vscode<span class="token punctuation">.</span>NotebookCell<span class="token punctuation">,</span>
  token<span class="token operator">:</span> vscode<span class="token punctuation">.</span>CancellationToken
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    cell<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>runState <span class="token operator">=</span> vscode<span class="token punctuation">.</span>NotebookCellRunState<span class="token punctuation">.</span>Running<span class="token punctuation">;</span>
    <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cell<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>runStartTime <span class="token operator">=</span> start<span class="token punctuation">;</span>
    cell<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>executionOrder <span class="token operator">=</span> <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>runIndex<span class="token punctuation">;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doExecuteCell</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> cell<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cell<span class="token punctuation">.</span>outputs <span class="token operator">=</span> <span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">;</span>
    cell<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>runState <span class="token operator">=</span> vscode<span class="token punctuation">.</span>NotebookCellRunState<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>
    cell<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>lastRunDuration <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cell<span class="token punctuation">.</span>outputs <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        outputKind<span class="token operator">:</span> vscode<span class="token punctuation">.</span>CellOutputKind<span class="token punctuation">.</span>Error<span class="token punctuation">,</span>
        ename<span class="token operator">:</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
        evalue<span class="token operator">:</span> e<span class="token punctuation">.</span>message<span class="token punctuation">,</span>
        traceback<span class="token operator">:</span> <span class="token punctuation">[</span>e<span class="token punctuation">.</span>stack<span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
    cell<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>runState <span class="token operator">=</span> vscode<span class="token punctuation">.</span>NotebookCellRunState<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>
    cell<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>lastRunDuration <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="输出类型" tabindex="-1"><a class="header-anchor" href="#输出类型" aria-hidden="true">#</a> 输出类型</h2><hr><p>输出的类型必须得是以下这三种格式中的一个：</p><ul><li>文本</li><li>错误</li><li>富文本</li></ul><p>一个代码块如果产生多种输出，这种情况下输出为一个列表。</p><p>一些简单的输出格式，比如文本、错误、富文本（HTML，Markdown，JSON），由 VS Code 核心进程负责渲染；而一些增强型的输出格式，比如与应用相关的富文本输出类型，则由 <a href="#%E8%BE%93%E5%87%BA%E6%B8%B2%E6%9F%93%E5%99%A8">NotebookOutputRenderer</a> 负责渲染。插件可以自行渲染一些 “简单的” 增强型输出格式，比如添加 Markdown 对 LaTeX 的支持。</p><p><img src="https://media.githubusercontent.com/media/microsoft/vscode-docs/master/api/extension-guides/images/notebook/kernel.png" alt="内核"></p><h3 id="文本输出" tabindex="-1"><a class="header-anchor" href="#文本输出" aria-hidden="true">#</a> 文本输出</h3><p>文本是最简单的输出格式，输出文本所做的工作和很多其它的编辑器类似。文本仅由 <code>文本域</code> 组成，会以普通文本的形式进行渲染。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    outputKind<span class="token operator">:</span> vscode<span class="token punctuation">.</span>CellOutputKind<span class="token punctuation">.</span>Text<span class="token punctuation">,</span>
    text<span class="token operator">:</span> <span class="token string">&#39;...&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://media.githubusercontent.com/media/microsoft/vscode-docs/master/api/extension-guides/images/notebook/text-output.png" alt="输出文本"></p><h3 id="错误输出" tabindex="-1"><a class="header-anchor" href="#错误输出" aria-hidden="true">#</a> 错误输出</h3><p>错误输出可以通过一种易于理解的方式来展示运行时发生的异常。它包含 <code>ename</code>、<code>evalue</code>、<code>traceback</code> 这几个属性，前两者分别用来展示错误类型和错误信息，<code>traceback</code> 接收一个字符串数组并以调用栈的形式展示。并且数组中的字符串可以使用 ANSI 编码来进行着色：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    outputKind<span class="token operator">:</span> vscode<span class="token punctuation">.</span>CellOutputKind<span class="token punctuation">.</span>Error<span class="token punctuation">,</span>
    ename<span class="token operator">:</span> <span class="token string">&#39;Error Name&#39;</span><span class="token punctuation">,</span>
    evalue<span class="token operator">:</span> <span class="token string">&#39;Error Value&#39;</span><span class="token punctuation">,</span>
    traceback<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;\\x1b[35mstack frame 1\\x1b[0m&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;stack frame 2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;stack frame 3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;stack frame 4&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://media.githubusercontent.com/media/microsoft/vscode-docs/master/api/extension-guides/images/notebook/error-output.png" alt="输出错误"></p><h3 id="富文本输出" tabindex="-1"><a class="header-anchor" href="#富文本输出" aria-hidden="true">#</a> 富文本输出</h3><p>富文本以 MIME 类型作为 key 值，可以为输出的数据提供多种不同的展现形式，是展示代码块的最高级的输出格式。假如代码块是一个 Github Issue，那么内核会基于代码块的 <code>data</code> 配置项，产生以下几种不同格式的输出：</p><ul><li><code>text/html</code>：将 Github Issue 转化为 HTML 输出</li><li><code>application/json</code>：输出 JSON 格式的数据</li><li><code>application/github-issue</code>：可以使用 <code>NotebookOutputRenderer</code> 来创建一个完整的关于该 Github Issue 的交互式视图</li></ul><p><code>text/html</code> 和 <code>application/json</code> 由 VS Code 自己负责渲染，而 <code>application/github-issue</code> 则交给 <code>NotebookOutputRenderer</code> 负责渲染，如果 MIME 类型没有注册相应的 <code>NotebookOutputRenderer</code>，那么就会展示一个错误。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    outputKind<span class="token operator">:</span> vscode<span class="token punctuation">.</span>CellOutputKind<span class="token punctuation">.</span>Rich<span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;text/html&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&lt;b&gt;Hello&lt;/b&gt; World&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;application/json&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> hello<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;application/custom&#39;</span><span class="token operator">:</span> <span class="token string">&#39;my-custom-data-interchange-format&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://media.githubusercontent.com/media/microsoft/vscode-docs/master/api/extension-guides/images/notebook/rich-output.gif" alt="输出富文本"></p><p>一般情况下，VS Code 可以渲染以下几种 MIME 类型：</p><ul><li>application/json</li><li>application/javascript</li><li>text/html</li><li>image/svg+xml</li><li>text/markdown</li><li>image/png</li><li>image/jpeg</li><li>text/plain</li><li>text/x-javascript</li></ul><p>如果你想渲染其它类型的 MIME，就需要为这个 MIME 注册一个 <code>NotebookOutputRenderer</code>。</p><h2 id="输出渲染器" tabindex="-1"><a class="header-anchor" href="#输出渲染器" aria-hidden="true">#</a> 输出渲染器</h2><hr><p>输出渲染器负责接收并渲染 MIME 类型的输出数据，最终呈现的渲染结果可以是简单的 HTML，也可以是复杂的交互式应用程序。在本节，我们一起看看如何渲染一个关于 Github Issue 的视图。</p><h3 id="一个简单的-非交互式的渲染器" tabindex="-1"><a class="header-anchor" href="#一个简单的-非交互式的渲染器" aria-hidden="true">#</a> 一个简单的, 非交互式的渲染器</h3><p>为了渲染一组 MIME 类型的数据，你可以在你的插件项目的 <code>package.json</code> 文件中的 <code>contributes.notebookOutRenderer</code> 字段下声明渲染器。我们假设已经安装的内核能够正常提供渲染器，那么当你输入 <code>ms-vscode.github-issue-notebook/github-issue</code> 的时候，这个渲染器就会开始工作。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;activationEvents&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;....&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;contributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    ...
    <span class="token property">&quot;notebookOutputRenderer&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;github-issue-static-renderer&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;displayName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Static Issue Renderer&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;entrypoint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./out/renderer.js&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;mimeTypes&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token string">&quot;ms-vscode.github-issue-notebook/github-issue&quot;</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了避免输出渲染器和 VS Code 的 UI 发生冲突，导致 VS Code 性能下降，输出渲染器总是被放到一个独立的 <code>iframe</code> 中。上述代码中 “entrypoint” 字段指的是一个独立的脚本文件，可以是自己手写，也可以是 Webpack、Rollup、Parcel 打包后的文件，当 <code>iframe</code> 里面需要渲染内容的时候，就会加载这个脚本。</p><p>当 “entrypoint” 脚本加载完成之后，会立刻调用 <code>acquireNotebookRendererApi()</code> 函数并传入你的渲染器 ID 作为参数，与此同时，开始监听笔记本的输出事件。比如，下面的代码会把整个 Github Issue 作为 JSON 传递给代码块作为输出：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> notebookApi <span class="token operator">=</span> <span class="token function">acquireNotebookRendererApi</span><span class="token punctuation">(</span><span class="token string">&#39;github-issue-static-renderer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

notebookApi<span class="token punctuation">.</span><span class="token function">onDidCreateOutput</span><span class="token punctuation">(</span><span class="token parameter">evt</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> output <span class="token operator">=</span> evt<span class="token punctuation">.</span>output<span class="token punctuation">.</span>data<span class="token punctuation">[</span>evt<span class="token punctuation">.</span>mimeType<span class="token punctuation">]</span><span class="token punctuation">;</span>
  evt<span class="token punctuation">.</span>element<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36),O={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/vscode-notebook-renderer/index.d.ts",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"@types/vscode-notebook-renderer",-1),D=n("code",null,"tsconfig.json",-1),K=n("code",null,"types",-1),j=n("code",null,"vscode-notebook-renderer",-1),A=n("code",null,"acquireNotebookRendererApi",-1),T=n("code",null,"@types/vscode",-1),G=n("code",null,"@types/vscode-notebook-renderer",-1),L=p(`<p>要创建富文本内容，你可以手动创建 DOM 元素，或者直接使用 Preact 这样的框架，将内容直接注入到指定的元素，看下面的例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;preact&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> notebookApi <span class="token operator">=</span> <span class="token function">acquireNotebookRendererApi</span><span class="token punctuation">(</span><span class="token string">&quot;github-issue-static-renderer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Issue<span class="token operator">:</span> FunctionComponent<span class="token operator">&lt;</span><span class="token punctuation">{</span> issue<span class="token operator">:</span> GithubIssue <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> issue <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>issue<span class="token punctuation">.</span><span class="token builtin">number</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>issue<span class="token punctuation">.</span>title<span class="token punctuation">}</span>
      <span class="token punctuation">(</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://github.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>issue<span class="token punctuation">.</span>repo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/issues/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>issue<span class="token punctuation">.</span><span class="token builtin">number</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span>#<span class="token punctuation">{</span>issue<span class="token punctuation">.</span><span class="token builtin">number</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>issue<span class="token punctuation">.</span>user<span class="token punctuation">.</span>avatar_url<span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> float<span class="token operator">:</span> <span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span> width<span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span> borderRadius<span class="token operator">:</span> <span class="token string">&#39;50%&#39;</span><span class="token punctuation">,</span> marginRight<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>i<span class="token operator">&gt;</span>@<span class="token punctuation">{</span>issue<span class="token punctuation">.</span>user<span class="token punctuation">.</span>login<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span> Opened<span class="token operator">:</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">&quot;margin-top: 10px&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>issue<span class="token punctuation">.</span>body<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> GithubIssues<span class="token operator">:</span> FunctionComponent<span class="token operator">&lt;</span><span class="token punctuation">{</span> issues<span class="token operator">:</span> GithubIssue<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> issues <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>issues<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>issue <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>Issue key<span class="token operator">=</span><span class="token punctuation">{</span>issue<span class="token punctuation">.</span><span class="token builtin">number</span><span class="token punctuation">}</span> issue<span class="token operator">=</span><span class="token punctuation">{</span>issue<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

notebookApi<span class="token punctuation">.</span><span class="token function">onDidCreateOutput</span><span class="token punctuation">(</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> output <span class="token operator">=</span> evt<span class="token punctuation">.</span>output<span class="token punctuation">.</span>data<span class="token punctuation">[</span>evt<span class="token punctuation">.</span>mimeType<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>GithubIssues issues<span class="token operator">=</span><span class="token punctuation">{</span>output<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> evt<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在可以在输出代码块上通过运行 <code>ms-vscode.github-issue-notebook/github-issue</code> 来预览结果，如下图所示：</p><p><img src="https://media.githubusercontent.com/media/microsoft/vscode-docs/master/api/extension-guides/images/notebook/static-renderer-sample.png" alt="静态的渲染器示例"></p><p>如果在代码块的 DOM 容器外部有其它的元素，或者有一些异步任务，那么你可以在 <code>onWillDestroyOutput</code> 方法中进行释放。<code>onWillDestroyOutput</code>方法会在以下几个条件下执行：</p><ul><li>代码块输出被清空后</li><li>当前代码块被删除之后</li><li>当前代码块的输出进行渲染之前</li></ul><p>可以看下面的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> intervals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

notebookApi<span class="token punctuation">.</span><span class="token function">onDidCreateOutput</span><span class="token punctuation">(</span><span class="token parameter">evt</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> output <span class="token operator">=</span> evt<span class="token punctuation">.</span>output<span class="token punctuation">.</span>data<span class="token punctuation">[</span>evt<span class="token punctuation">.</span>mimeType<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>GithubIssues issues<span class="token operator">=</span><span class="token punctuation">{</span>output<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> evt<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 创建一个定时器，在每一秒进行修改 h2 的颜色</span>
  intervals<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>
    evt<span class="token punctuation">.</span>outputId<span class="token punctuation">,</span>
    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      evt<span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;h2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hsl(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>
        <span class="token number">360</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, 100%, 50%)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

notebookApi<span class="token punctuation">.</span><span class="token function">onWillDestroyOutput</span><span class="token punctuation">(</span><span class="token parameter">scope</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果 scope 是 undefined 的话，所有的输出都会被销毁</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> interval <span class="token keyword">of</span> intervals<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    intervals<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 反之，销毁一个单独的输出</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>scope<span class="token punctuation">.</span>outputId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    intervals<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>scope<span class="token punctuation">.</span>outputId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你必须牢记在心的是，一个笔记本中的每个代码块，会被渲染到同一个 iframe 的不同 DOM 元素上，所以为了避免产生冲突，当你使用诸如 <code>document.querySelector</code> 此类的选择器的时候，要确保每个代码块都有一个特定的标识。在上面的例子中，我们通过使用 <code>evt.element.querySelector</code> 来避免这个问题。</p><h3 id="交互式的笔记本" tabindex="-1"><a class="header-anchor" href="#交互式的笔记本" aria-hidden="true">#</a> 交互式的笔记本</h3><p>想象一下，如果我们想通过点击一个按钮，然后查看这个 Github Issue 的评论，应该怎么做呢？在这里，我们假设在运行 <code>ms-vscode.github-issue-notebook/github-issue-with-comments</code> 命令之后，内核（<code>kernel</code>）可以正常提供带有评论的 Github Issue，下面是代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> Issue<span class="token operator">:</span> FunctionComponent<span class="token operator">&lt;</span><span class="token punctuation">{</span> issue<span class="token operator">:</span> GithubIssueWithComments <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> issue <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>showComments<span class="token punctuation">,</span> setShowComments<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>issue<span class="token punctuation">.</span><span class="token builtin">number</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>
        <span class="token punctuation">{</span>issue<span class="token punctuation">.</span>title<span class="token punctuation">}</span>
        <span class="token punctuation">(</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://github.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>issue<span class="token punctuation">.</span>repo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/issues/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>issue<span class="token punctuation">.</span><span class="token builtin">number</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span>#<span class="token punctuation">{</span>issue<span class="token punctuation">.</span><span class="token builtin">number</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token punctuation">)</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>issue<span class="token punctuation">.</span>user<span class="token punctuation">.</span>avatar_url<span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> float<span class="token operator">:</span> <span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span> width<span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span> borderRadius<span class="token operator">:</span> <span class="token string">&#39;50%&#39;</span><span class="token punctuation">,</span> marginRight<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>i<span class="token operator">&gt;</span>@<span class="token punctuation">{</span>issue<span class="token punctuation">.</span>user<span class="token punctuation">.</span>login<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span> Opened<span class="token operator">:</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">&quot;margin-top: 10px&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>issue<span class="token punctuation">.</span>body<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setShowComments</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>Show Comments<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>showComments <span class="token operator">&amp;&amp;</span> issue<span class="token punctuation">.</span>comments<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>comment <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>comment<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码存在几个明显的问题：</p><ul><li>在点击按钮之前，就已经把所有 Issue 的评论都加载了</li><li>仅仅是展示更多数据，就需要为所有不同的 MIME 类型提供笔记本内核（<code>kernel</code>）的支持</li></ul><p>内核可以给渲染器提供额外的功能，比如添加一个预加载器，VS Code 会将预加载器里内容也装载到 iframe 里。这个加载项脚本可以通过其自身的 postMessage 接口来访问 <code>acquireVsCodeApi()</code>，你可以把它封装为 iframe 中的全局对象。</p><p><img src="https://media.githubusercontent.com/media/microsoft/vscode-docs/master/api/extension-guides/images/notebook/kernel-communication.png" alt="内核通讯"></p><p>举个例子，你可能会修改内核中的 <code>preloads</code> 来引用一个新文件，在这个文件里你创建了一个与插件主机通信的连接，并暴露了一个全局对象供渲染器使用，具体代码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>globalThis<span class="token punctuation">.</span>githubIssueCommentProvider <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">loadComments</span><span class="token punctuation">(</span>issueId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>comments<span class="token operator">:</span> GithubComment<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    vscodeApi<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> command<span class="token operator">:</span> <span class="token string">&#39;comments&#39;</span><span class="token punctuation">,</span> issueId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">listener</span> <span class="token operator">=</span> event <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;comments&#39;</span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>issueId <span class="token operator">===</span> issueId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>comments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于其他开发者可能在其它的笔记本上创建了 Github Issue 输出，并且没有实现 <code>githubIssueCommentProvider</code>，因此在这种情况下，我们在渲染器中首先要判断预加载脚本中的全局对象是否存在并且可用，并且只在可用的情况下显示 “Load Comments（加载评论）” 按钮：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> canLoadComments <span class="token operator">=</span> globalThis<span class="token punctuation">.</span>githubIssueCommentProvider <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Issue<span class="token operator">:</span> FunctionComponent<span class="token operator">&lt;</span><span class="token punctuation">{</span> issue<span class="token operator">:</span> GithubIssue <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> issue <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>comments<span class="token punctuation">,</span> setComments<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">loadComments</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    globalThis<span class="token punctuation">.</span>githubIssueCommentProvider<span class="token punctuation">.</span><span class="token function">loadComments</span><span class="token punctuation">(</span>issue<span class="token punctuation">.</span>id<span class="token punctuation">,</span> setComments<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>issue<span class="token punctuation">.</span><span class="token builtin">number</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>
        <span class="token punctuation">{</span>issue<span class="token punctuation">.</span>title<span class="token punctuation">}</span>
        <span class="token punctuation">(</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://github.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>issue<span class="token punctuation">.</span>repo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/issues/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>issue<span class="token punctuation">.</span><span class="token builtin">number</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span>#<span class="token punctuation">{</span>issue<span class="token punctuation">.</span><span class="token builtin">number</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token punctuation">)</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>issue<span class="token punctuation">.</span>user<span class="token punctuation">.</span>avatar_url<span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> float<span class="token operator">:</span> <span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span> width<span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span> borderRadius<span class="token operator">:</span> <span class="token string">&#39;50%&#39;</span><span class="token punctuation">,</span> marginRight<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>i<span class="token operator">&gt;</span>@<span class="token punctuation">{</span>issue<span class="token punctuation">.</span>user<span class="token punctuation">.</span>login<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span> Opened<span class="token operator">:</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">&quot;margin-top: 10px&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>issue<span class="token punctuation">.</span>body<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>canLoadComments <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>loadComments<span class="token punctuation">}</span><span class="token operator">&gt;</span>Load Comments<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token punctuation">}</span>
      <span class="token punctuation">{</span>comments<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>comment <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>comment<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，假设我们想要与 webview 建立通信。文档选中内核时会调用 <code>NotebookKernelProvider.resolveKernel</code>，然后你就可以往该方法中提供引用到 webview 对象的参数实现通信了。要实现这个方法，可以给 <code>onDidReceiveMessage</code> 方法设置一个监听器：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyKernelProvider</span> <span class="token keyword">extends</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span>NotebookKernelProvider <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">public</span> <span class="token function">resolveKernel</span><span class="token punctuation">(</span>kernel<span class="token punctuation">,</span> document<span class="token punctuation">,</span> webview<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    webview<span class="token punctuation">.</span><span class="token function">onDidReceiveMessage</span><span class="token punctuation">(</span>message <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>command <span class="token operator">===</span> <span class="token string">&#39;comments&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        kernel<span class="token punctuation">.</span><span class="token function">getCommentsForIssue</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>issueId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>comments <span class="token operator">=&gt;</span> webview<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          type<span class="token operator">:</span> <span class="token string">&#39;comments&#39;</span><span class="token punctuation">,</span>
          issueId<span class="token operator">:</span> message<span class="token punctuation">.</span>issueId<span class="token punctuation">,</span>
          comments<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="调试支持" tabindex="-1"><a class="header-anchor" href="#调试支持" aria-hidden="true">#</a> 调试支持</h2><hr><p>对于一些实现了支持编程语言特性的笔记本内核，支持代码块的调试是很有必要的。可以通过以下几种方式来为内核添加调试支持：</p>`,25),V={href:"https://microsoft.github.io/debug-adapter-protocol/",target:"_blank",rel:"noopener noreferrer"},J=n("li",null,"通过代理，将协议转换为现有的笔记本调试器（查阅 ‘vscode-simple-jupyter-notebook’）",-1),B=n("p",null,"当然，最简单的方式就是使用现有的未经修改的调试器插件，并将调试器协议（DAP）转化为符合当前笔记本要求的协议（查阅 ‘vscode-nodebook’）。",-1),F=n("p",null,"最后附上案例：",-1),$={href:"https://github.com/microsoft/vscode-nodebook",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/microsoft/vscode-simple-jupyter-notebook",target:"_blank",rel:"noopener noreferrer"};function W(U,X){const t=o("ExternalLinkIcon"),e=o("RouterLink");return i(),l("div",null,[k,d,n("p",null,[s("!> **注意：**笔记本相关的 API 目前还处于开发状态，所以目前只能在 "),n("a",v,[s("VS Code Insiders"),a(t)]),s(" 版本内部使用，同时需要给你的插件项目添加 "),m,s(" 文件。想了解更多的有关于试验性 API 的内容， 可以 "),n("a",b,[s("点这里"),a(t)]),s("。")]),g,n("p",null,[n("a",h,[s("参考 NotebookContentProvider API"),a(t)])]),y,f,n("ul",null,[n("li",null,[n("a",w,[s(".ipynb 内容供应器函数"),a(t)]),s("：笔记本采用 "),n("a",_,[s("Jupyter"),a(t)]),s(" 格式。")]),n("li",null,[n("a",x,[s("Markdown 内容供应器函数"),a(t)]),s("：以笔记本的格式打开和编辑 Markdown。")])]),C,n("p",null,[s("下面的例子中，我们创建了一个简化版的后缀名为 "),N,s(" 的笔记本提供商插件，用来查看 "),n("a",q,[s("Jupyter"),a(t)]),s(" 格式的文件。")]),I,n("p",null,[n("a",P,[s("参考 NotebookKernel API"),a(t)])]),M,n("ul",null,[n("li",null,[n("a",S,[s("Github Issues 笔记本"),a(t)]),s("：一个笔记本内核，用来执行 Github Issues 查询")])]),E,n("p",null,[s("完整的 API 声明可以 "),n("a",O,[s("看这里"),a(t)]),s("。如果你用的是 TypeScript，那么为了使用上述的 API 声明，你首先需要安装 "),R,s("，然后在 "),D,s(" 文件的 "),K,s(" 字段中添加 "),j,s("。因为 "),A,s(" 方法是一个全局变量，所以我们把 "),T,s(" 和 "),G,s(" 这两个声明文件分开了。")]),L,n("ul",null,[n("li",null,[s("可以利用笔记本内核实现一个 "),a(e,{to:"/extension-guides/debugger-extension.html"},{default:u(()=>[s("调试器插件")]),_:1})]),n("li",null,[s("直接实现一个 "),n("a",V,[s("调试器协议(DAP)"),a(t)])]),J]),B,F,n("ul",null,[n("li",null,[n("a",$,[s("vscode-nodebook"),a(t)]),s("：基于 VS Code 内置的 JavaScript 调试器和一些简单的转换协议，提供的 Node.js 笔记本调试器")]),n("li",null,[n("a",H,[s("vscode-simple-jupyter-notebook"),a(t)]),s("：基于已存的 Xeus 调试器")])])])}const Y=c(r,[["render",W],["__file","07.notebook.html.vue"]]);export{Y as default};
