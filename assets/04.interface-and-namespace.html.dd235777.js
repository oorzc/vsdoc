const e=JSON.parse('{"key":"v-3a325c9c","path":"/01.preknowledge/04.interface-and-namespace.html","title":"认识TypeScript-类型接口和命名空间","lang":"zh-CN","frontmatter":{"summary":"认识TypeScript-类型接口和命名空间 TypeScript的核心原则之一是对数据的结构进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。 接口 --- 接口初探 下面通过一个简单示例来观察接口是如何工作的： 类型检查器会检查printLabel的调","head":[["meta",{"property":"og:url","content":"https://oorzc.cn/01.preknowledge/04.interface-and-namespace.html"}],["meta",{"property":"og:site_name","content":"vscode插件开发文档"}],["meta",{"property":"og:title","content":"认识TypeScript-类型接口和命名空间"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"excerpt":"","headers":[{"level":2,"title":"接口","slug":"接口","link":"#接口","children":[{"level":3,"title":"接口初探","slug":"接口初探","link":"#接口初探","children":[]},{"level":3,"title":"可选属性","slug":"可选属性","link":"#可选属性","children":[]},{"level":3,"title":"只读属性","slug":"只读属性","link":"#只读属性","children":[]},{"level":3,"title":"额外的属性检查","slug":"额外的属性检查","link":"#额外的属性检查","children":[]},{"level":3,"title":"函数类型","slug":"函数类型","link":"#函数类型","children":[]},{"level":3,"title":"可索引的类型","slug":"可索引的类型","link":"#可索引的类型","children":[]},{"level":3,"title":"类类型","slug":"类类型","link":"#类类型","children":[]},{"level":3,"title":"类的静态部分和实例部分","slug":"类的静态部分和实例部分","link":"#类的静态部分和实例部分","children":[]},{"level":3,"title":"接口继承","slug":"接口继承","link":"#接口继承","children":[]},{"level":3,"title":"混合类型","slug":"混合类型","link":"#混合类型","children":[]}]},{"level":2,"title":"命名空间","slug":"命名空间","link":"#命名空间","children":[{"level":3,"title":"第一步","slug":"第一步","link":"#第一步","children":[]},{"level":3,"title":"命名空间","slug":"命名空间-1","link":"#命名空间-1","children":[]},{"level":3,"title":"分离文件","slug":"分离文件","link":"#分离文件","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":14.62,"words":4386},"filePathRelative":"01.preknowledge/04.interface-and-namespace.md"}');export{e as data};
