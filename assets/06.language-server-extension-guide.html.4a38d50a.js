import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as u,a as n,b as s,d as a,w as o,e,r as c}from"./app.ed9f300c.js";const r={},d=n("h1",{id:"示例-语言服务器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#示例-语言服务器","aria-hidden":"true"},"#"),s(" 示例：语言服务器")],-1),k=n("p",null,[s("就如你在"),n("a",{href:"/language-extensions/programmatic-language-features"},"程序性语言特性"),s("章节所见，实现语言特性的直接方式是使用"),n("code",null,"languages.*"),s("API。但是语言服务器不同，它是另一种语言插件的实现方式。")],-1),v=n("p",null,"本章将：",-1),m=n("li",null,"解释语言服务器插件的好处",-1),b={href:"https://github.com/Microsoft/vscode-languageserver-node",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"Microsoft/vscode-languageserver-node",-1),h={href:"https://github.com/Microsoft/vscode-extension-samples/tree/master/lsp-sample",target:"_blank",rel:"noopener noreferrer"},f=e('<h2 id="为什么使用语言服务器" tabindex="-1"><a class="header-anchor" href="#为什么使用语言服务器" aria-hidden="true">#</a> 为什么使用语言服务器？</h2><hr><p>语言服务器是一种可以提升语言编辑体验的特殊VS Code插件。有了语言服务器，你可以实现如自动补全、错误检查（诊断）、转跳到定义等等其他VS Code<a href="/language-extensions/programmatic-language-features">语言特性</a>。</p><p>但是在VS Code中实现语言功能会面临三个问题：</p><p>第一，语言服务器一般是用他们自己原生的语言实现的，那么如何与VS Code中的Node.js运行时整合起来就是一个问题。</p><p>其二，语言服务器一般都是高消耗的。比如检查文件，语言服务器需要解析大量的文件，构建起抽象语法树然后进行静态分析。这些操作会吃掉很多CPU和内存，但是与此同时VS Code的性能不能受到任何影响。</p><p>第三，通常为多个编辑器开发不同的语言插件需要花费大量精力。对于语言插件开发者来说，他们需要根据不同编辑器各自的API来实现插件。而从编辑器的角度来讲，他们也不能指望语言工具API统一。最终导致了为<code>N</code>种编辑器实现<code>M</code>种语言需要花费<code>N*M</code>的工作和精力。</p>',7),y={href:"https://microsoft.github.io/language-server-protocol",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,[n("img",{src:"https://code.visualstudio.com/assets/api/language-extensions/language-server-extension-guide/lsp-languages-editors.png",alt:"lsp-languages-editors"})],-1),w=n("p",null,"在本章，我们将：",-1),_={href:"https://github.com/Microsoft/vscode-languageserver-node",target:"_blank",rel:"noopener noreferrer"},S=n("li",null,"学习如何运行、调试、记录日志和测试语言服务器插件",-1),C=n("li",null,"为你提供更多进阶的语言服务器",-1),D=e('<p>?&gt; <strong>译者注</strong>：本文及其他章节所涉及的<strong>LSP</strong>全为Language Server Protocol的缩写。<strong>语言服务器协议</strong>是VS Code为了调试、分析语言的自带的中间层协议。众所周知，VS Code本身只是一个编辑器，它不含任何编程语言的功能和运行时（javascript和typescript除外），而是将语言的各种特性交给了插件创作者自由实现。</p><h2 id="实现你自己的语言服务器" tabindex="-1"><a class="header-anchor" href="#实现你自己的语言服务器" aria-hidden="true">#</a> 实现你自己的语言服务器</h2><hr><p>在VS Code中，一个语言服务器有两个部分：</p><ul><li><strong>语言客户端</strong>：一个由Javascript/Typescript组成的普通插件，这个插件能使用所有的<a href="/references/vscode-api">VS Code 命名空间API</a>。</li><li><strong>语言服务器</strong>：运行在单独进程中的语言分析工具。</li></ul><p>语言服务器运行在单独的进程有两个好处：</p><ul><li>只要能通过LSP通信，语言分析工具可以用任何语言实现。</li><li>语言分析工具一般非常消耗CPU和内存，在单独的进程中运行能避免大性能开销</li></ul><p>下面是一个运行了2个<strong>语言服务器插件</strong>的示意图。HTML语言客户端和PHP语言客户端是常见的VS Code插件。两个客户端都用LSP与各自对应的语言服务器进行通信——即使PHP语言服务器是用PHP写的，但是仍然能通过LSP与PHP语言客户端建立起通信。</p><p><img src="https://code.visualstudio.com/assets/api/language-extensions/language-server-extension-guide/lsp-illustration.png" alt="lsp-illustration"></p>',9),q={href:"https://github.com/Microsoft/vscode-languageserver-node",target:"_blank",rel:"noopener noreferrer"},P=n("h2",{id:"示例-一个简单的纯文本语言服务器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#示例-一个简单的纯文本语言服务器","aria-hidden":"true"},"#"),s(" 示例：一个简单的纯文本语言服务器")],-1),T=n("hr",null,null,-1),I=n("p",null,"让我们首先实现一个简单的语言服务器插件吧，这个插件的功能是自动补全、诊断纯文本文件。我们会同时学习客户端/服务端的配置。 如果你想直接上手代码：",-1),E={href:"https://github.com/Microsoft/vscode-extension-samples/tree/master/lsp-sample",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/Microsoft/vscode-extension-samples/tree/master/lsp-multi-server-sample",target:"_blank",rel:"noopener noreferrer"},L=n("strong",null,"lsp-sample",-1),j={href:"https://code.visualstudio.com/docs/editor/multi-root-workspaces",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/Microsoft/vscode-extension-samples",target:"_blank",rel:"noopener noreferrer"},M=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">git</span> clone https://github.com/microsoft/vscode-extension-samples.git
<span class="token operator">&gt;</span> <span class="token builtin class-name">cd</span> vscode-extension-samples/lsp-sample
<span class="token operator">&gt;</span> <span class="token function">npm</span> <span class="token function">install</span>
<span class="token operator">&gt;</span> <span class="token function">npm</span> run compile
<span class="token operator">&gt;</span> code <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装完所有依赖然后打开<strong>lsp-sample</strong>工作，里面包含客户端和服务器的代码。下面是一个整体的<strong>lsp-sample</strong>目录结构：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.
├── client // 语言客户端
│   ├── src
│   │   ├── test // 语言客户端 / 服务器 的端到端测试
│   │   └── extension.ts // 语言客户端入口
├── package.json // 插件配置清单
└── server // 语言服务器
    └── src
        └── server.ts // 语言服务器入口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是-language-client" tabindex="-1"><a class="header-anchor" href="#什么是-language-client" aria-hidden="true">#</a> 什么是&#39;Language Client&#39;</h2><hr><p>我们先看看<code>/package.json</code>，这个文件描述了语言客户端的能力。里面有3个有趣的部分：</p><p>首先看看<a href="/references/activation-events">activationEvents</a>：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;activationEvents&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;onLanguage:plaintext&quot;</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个部分告诉VS Code只要打开纯文本文件之后就立刻激活插件（例如：打开一个<code>.txt</code>文件）</p><p>下一步看看<a href="/extensibility-reference/contribution-points#contributesconfiguration">configuration</a>部分：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;configuration&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Example configuration&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;languageServerExample.maxNumberOfProblems&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token property">&quot;scope&quot;</span><span class="token operator">:</span> <span class="token string">&quot;resource&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
            <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Controls the maximum number of problems produced by the server.&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个部分配置了用户可以自定义的<code>configuration</code>，用户通过这个配置可以在<strong>设置</strong>中对你的插件做一些修改。这并不是本节重点，稍后示例将通过代码呈现——插件如何在设置变动后将<strong>修改后的配置</strong>应用到我们的语言服务器上。</p><p>真正的语言客户端代码和对应的<code>package.json</code>在<code>/client</code>文件夹中。<code>package.json</code>最有趣的部分是<code>vscode</code>插件主机API和<code>vscode-languageclient</code>这两个依赖库。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;engines&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;vscode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.43.0&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;vscode-languageclient&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^6.1.3&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如上面所说，客户端实现就是一个普通的VS Code插件，它有使用全部VS Code API的能力。</p><p>下面是extension.ts文件的对应内容，也是<strong>lsp-sample</strong>插件的入口：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> workspace<span class="token punctuation">,</span> ExtensionContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vscode&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>
	LanguageClient<span class="token punctuation">,</span>
	LanguageClientOptions<span class="token punctuation">,</span>
	ServerOptions<span class="token punctuation">,</span>
	TransportKind
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vscode-languageclient&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> client<span class="token operator">:</span> LanguageClient<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">activate</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ExtensionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 服务器由node实现</span>
	<span class="token keyword">let</span> serverModule <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">asAbsolutePath</span><span class="token punctuation">(</span>
		path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;server&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;out&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;server.js&#39;</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 为服务器提供debug选项</span>
	<span class="token comment">// --inspect=6009: 运行在Node&#39;s Inspector mode，这样VS Code就能调试服务器了</span>
	<span class="token keyword">let</span> debugOptions <span class="token operator">=</span> <span class="token punctuation">{</span> execArgv<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;--nolazy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--inspect=6009&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 如果插件运行在调试模式那么就会使用debug server options</span>
	<span class="token comment">// 不然就使用run options</span>
	<span class="token keyword">let</span> serverOptions<span class="token operator">:</span> ServerOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
		run<span class="token operator">:</span> <span class="token punctuation">{</span> module<span class="token operator">:</span> serverModule<span class="token punctuation">,</span> transport<span class="token operator">:</span> TransportKind<span class="token punctuation">.</span>ipc <span class="token punctuation">}</span><span class="token punctuation">,</span>
		debug<span class="token operator">:</span> <span class="token punctuation">{</span>
			module<span class="token operator">:</span> serverModule<span class="token punctuation">,</span>
			transport<span class="token operator">:</span> TransportKind<span class="token punctuation">.</span>ipc<span class="token punctuation">,</span>
			options<span class="token operator">:</span> debugOptions
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 控制语言客户端的选项</span>
	<span class="token keyword">let</span> clientOptions<span class="token operator">:</span> LanguageClientOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token comment">// 注册纯文本服务器</span>
		documentSelector<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> scheme<span class="token operator">:</span> <span class="token string">&#39;file&#39;</span><span class="token punctuation">,</span> language<span class="token operator">:</span> <span class="token string">&#39;plaintext&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		synchronize<span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token comment">// 当文件变动为&#39;.clientrc&#39;中那样时，通知服务器</span>
			fileEvents<span class="token operator">:</span> workspace<span class="token punctuation">.</span><span class="token function">createFileSystemWatcher</span><span class="token punctuation">(</span><span class="token string">&#39;**/.clientrc&#39;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建语言客户端并启动</span>
	client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LanguageClient</span><span class="token punctuation">(</span>
		<span class="token string">&#39;languageServerExample&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;Language Server Example&#39;</span><span class="token punctuation">,</span>
		serverOptions<span class="token punctuation">,</span>
		clientOptions
	<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 启动客户端，这也同时启动了服务器</span>
	client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">deactivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Thenable<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是-language-server" tabindex="-1"><a class="header-anchor" href="#什么是-language-server" aria-hidden="true">#</a> 什么是&#39;Language Server&#39;</h2><hr><p>?&gt; **小提示：**本节从Github仓库中克隆下来的&#39;server&#39;代码是已经完成的版本，如果你需要跟随本节的步骤循序渐进，你可以新建一个<code>server.ts</code>或者修改克隆的代码。</p><p>在这个例子中，服务器是Typescript实现的，由Node.js运行。因为VS Code自带Node.js运行时，所以你无需安装其他依赖，除非你对运行时有特别要求。</p><p>这个语言服务器的源码在<code>/server</code>中。比较重要的<code>pacakge.json</code>部分是：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;vscode-languageserver&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^6.1.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;vscode-languageserver-textdocument&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.0.1&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这行依赖会下载<code>vscode-languageserver</code>库。</p><p>下面是一个服务器的实现，提供了简单的纯文本管理——VS Code会向服务器发送一个文件的全部内容。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  createConnection<span class="token punctuation">,</span>
  TextDocuments<span class="token punctuation">,</span>
  Diagnostic<span class="token punctuation">,</span>
  DiagnosticSeverity<span class="token punctuation">,</span>
  ProposedFeatures<span class="token punctuation">,</span>
  InitializeParams<span class="token punctuation">,</span>
  DidChangeConfigurationNotification<span class="token punctuation">,</span>
  CompletionItem<span class="token punctuation">,</span>
  CompletionItemKind<span class="token punctuation">,</span>
  TextDocumentPositionParams<span class="token punctuation">,</span>
  TextDocumentSyncKind<span class="token punctuation">,</span>
  InitializeResult
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vscode-languageserver&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> TextDocument <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vscode-languageserver-textdocument&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个服务器连接。使用Node的IPC作为传输方式。</span>
<span class="token comment">// 也包含所有的预览、建议等LSP特性</span>
<span class="token keyword">let</span> connection <span class="token operator">=</span> <span class="token function">createConnection</span><span class="token punctuation">(</span>ProposedFeatures<span class="token punctuation">.</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个简单的文本管理器。</span>
<span class="token comment">// 文本管理器只支持全文本同步。</span>
<span class="token keyword">let</span> documents<span class="token operator">:</span> TextDocuments<span class="token operator">&lt;</span>TextDocument<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDocuments</span><span class="token punctuation">(</span>TextDocument<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> hasConfigurationCapability<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hasWorkspaceFolderCapability<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hasDiagnosticRelatedInformationCapability<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

connection<span class="token punctuation">.</span><span class="token function">onInitialize</span><span class="token punctuation">(</span><span class="token punctuation">(</span>params<span class="token operator">:</span> InitializeParams<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> capabilities <span class="token operator">=</span> params<span class="token punctuation">.</span>capabilities<span class="token punctuation">;</span>

	<span class="token comment">// 客户端是否支持\`workspace/configuration\`请求?</span>
	<span class="token comment">// 如果不是的话，降级到使用全局设置</span>
	hasConfigurationCapability <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>
      capabilities<span class="token punctuation">.</span>workspace <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>capabilities<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span>configuration
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
	hasWorkspaceFolderCapability <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>
		capabilities<span class="token punctuation">.</span>workspace <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>capabilities<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span>workspaceFolders
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
	hasDiagnosticRelatedInformationCapability <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>
		capabilities<span class="token punctuation">.</span>textDocument <span class="token operator">&amp;&amp;</span>
		capabilities<span class="token punctuation">.</span>textDocument<span class="token punctuation">.</span>publishDiagnostics <span class="token operator">&amp;&amp;</span>
		capabilities<span class="token punctuation">.</span>textDocument<span class="token punctuation">.</span>publishDiagnostics<span class="token punctuation">.</span>relatedInformation
	<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> result<span class="token operator">:</span> InitializeResult <span class="token operator">=</span> <span class="token punctuation">{</span>
		capabilities<span class="token operator">:</span> <span class="token punctuation">{</span>
			textDocumentSync<span class="token operator">:</span> TextDocumentSyncKind<span class="token punctuation">.</span>Incremental<span class="token punctuation">,</span>
			<span class="token comment">// Tell the client that this server supports code completion.</span>
			completionProvider<span class="token operator">:</span> <span class="token punctuation">{</span>
				resolveProvider<span class="token operator">:</span> <span class="token boolean">true</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>hasWorkspaceFolderCapability<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		result<span class="token punctuation">.</span>capabilities<span class="token punctuation">.</span>workspace <span class="token operator">=</span> <span class="token punctuation">{</span>
			workspaceFolders<span class="token operator">:</span> <span class="token punctuation">{</span>
				supported<span class="token operator">:</span> <span class="token boolean">true</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

connection<span class="token punctuation">.</span><span class="token function">onInitialized</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>hasConfigurationCapability<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 为所有配置Register for all configuration changes.</span>
		connection<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>
			DidChangeConfigurationNotification<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
			<span class="token keyword">undefined</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>hasWorkspaceFolderCapability<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		connection<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">onDidChangeWorkspaceFolders</span><span class="token punctuation">(</span>_event <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			connection<span class="token punctuation">.</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Workspace folder change event received.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 配置示例</span>
<span class="token keyword">interface</span> <span class="token class-name">ExampleSettings</span> <span class="token punctuation">{</span>
	maxNumberOfProblems<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 当客户端不支持\`workspace/configuration\`请求时，使用global settings</span>
<span class="token comment">// 请注意，在这个例子中服务器使用的客户端并不是问题所在，而是这种情况还可能发生在其他客户端身上。</span>
<span class="token keyword">const</span> defaultSettings<span class="token operator">:</span> ExampleSettings <span class="token operator">=</span> <span class="token punctuation">{</span> maxNumberOfProblems<span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> globalSettings<span class="token operator">:</span> ExampleSettings <span class="token operator">=</span> defaultSettings<span class="token punctuation">;</span>

<span class="token comment">// 对所有打开的文档配置进行缓存</span>
<span class="token keyword">let</span> documentSettings<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Thenable<span class="token operator">&lt;</span>ExampleSettings<span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

connection<span class="token punctuation">.</span><span class="token function">onDidChangeConfiguration</span><span class="token punctuation">(</span>change <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>hasConfigurationCapability<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 重置所有已缓存的文档配置</span>
		documentSettings<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		globalSettings <span class="token operator">=</span> <span class="token operator">&lt;</span>ExampleSettings<span class="token operator">&gt;</span><span class="token punctuation">(</span>
			<span class="token punctuation">(</span>change<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>languageServerExample <span class="token operator">||</span> defaultSettings<span class="token punctuation">)</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 重新验证所有打开的文本文档</span>
	documents<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>validateTextDocument<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getDocumentSettings</span><span class="token punctuation">(</span>resource<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Thenable<span class="token operator">&lt;</span>ExampleSettings<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasConfigurationCapability<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>globalSettings<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">let</span> result <span class="token operator">=</span> documentSettings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		result <span class="token operator">=</span> connection<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			scopeUri<span class="token operator">:</span> resource<span class="token punctuation">,</span>
			section<span class="token operator">:</span> <span class="token string">&#39;languageServerExample&#39;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		documentSettings<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 只对打开的文档保留设置</span>
documents<span class="token punctuation">.</span><span class="token function">onDidClose</span><span class="token punctuation">(</span>e <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	documentSettings<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>document<span class="token punctuation">.</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 文档的文本内容发生了改变。</span>
<span class="token comment">// 这个事件在文档第一次打开或者内容变动时才会触发。</span>
documents<span class="token punctuation">.</span><span class="token function">onDidChangeContent</span><span class="token punctuation">(</span>change <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token function">validateTextDocument</span><span class="token punctuation">(</span>change<span class="token punctuation">.</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">validateTextDocument</span><span class="token punctuation">(</span>textDocument<span class="token operator">:</span> TextDocument<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 在这个简单的示例中，每次校验运行时我们都获取一次配置</span>
	<span class="token keyword">let</span> settings <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getDocumentSettings</span><span class="token punctuation">(</span>textDocument<span class="token punctuation">.</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 校验器如果检测到连续超过2个以上的大写字母则会报错</span>
	<span class="token keyword">let</span> text <span class="token operator">=</span> textDocument<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b[A-Z]{2,}\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> m<span class="token operator">:</span> RegExpExecArray <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> problems <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> diagnostics<span class="token operator">:</span> Diagnostic<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> problems <span class="token operator">&lt;</span> settings<span class="token punctuation">.</span>maxNumberOfProblems<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		problems<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> diagnosic<span class="token operator">:</span> Diagnostic <span class="token operator">=</span> <span class="token punctuation">{</span>
			severity<span class="token operator">:</span> DiagnosticSeverity<span class="token punctuation">.</span>Warning<span class="token punctuation">,</span>
			range<span class="token operator">:</span> <span class="token punctuation">{</span>
				start<span class="token operator">:</span> textDocument<span class="token punctuation">.</span><span class="token function">positionAt</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>
				end<span class="token operator">:</span> textDocument<span class="token punctuation">.</span><span class="token function">positionAt</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>index <span class="token operator">+</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is all uppercase.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
			source<span class="token operator">:</span> <span class="token string">&#39;ex&#39;</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>hasDiagnosticRelatedInformationCapability<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			diagnosic<span class="token punctuation">.</span>relatedInformation <span class="token operator">=</span> <span class="token punctuation">[</span>
				<span class="token punctuation">{</span>
					location<span class="token operator">:</span> <span class="token punctuation">{</span>
						uri<span class="token operator">:</span> textDocument<span class="token punctuation">.</span>uri<span class="token punctuation">,</span>
						range<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> diagnosic<span class="token punctuation">.</span>range<span class="token punctuation">)</span>
					<span class="token punctuation">}</span><span class="token punctuation">,</span>
					message<span class="token operator">:</span> <span class="token string">&#39;Spelling matters&#39;</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token punctuation">{</span>
					location<span class="token operator">:</span> <span class="token punctuation">{</span>
						uri<span class="token operator">:</span> textDocument<span class="token punctuation">.</span>uri<span class="token punctuation">,</span>
						range<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> diagnosic<span class="token punctuation">.</span>range<span class="token punctuation">)</span>
					<span class="token punctuation">}</span><span class="token punctuation">,</span>
					message<span class="token operator">:</span> <span class="token string">&#39;Particularly for names&#39;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		diagnostics<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>diagnosic<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    <span class="token comment">// 将错误处理结果发送给VS Code</span>
	connection<span class="token punctuation">.</span><span class="token function">sendDiagnostics</span><span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token operator">:</span> textDocument<span class="token punctuation">.</span>uri<span class="token punctuation">,</span> diagnostics <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

connection<span class="token punctuation">.</span><span class="token function">onDidChangeWatchedFiles</span><span class="token punctuation">(</span>_change <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 监测VS Code中的文件变动</span>
	connection<span class="token punctuation">.</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;We received an file change event&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这个处理函数提供了初始补全项列表</span>
connection<span class="token punctuation">.</span><span class="token function">onCompletion</span><span class="token punctuation">(</span>
	<span class="token punctuation">(</span>_textDocumentPosition<span class="token operator">:</span> TextDocumentPositionParams<span class="token punctuation">)</span><span class="token operator">:</span> CompletionItem<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 传入的变量包含了文本请求代码补全的位置。</span>
	<span class="token comment">// 在这个示例中我们忽略了这个信息，总是提供相同的补全选项。</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span>
		<span class="token punctuation">{</span>
			label<span class="token operator">:</span> <span class="token string">&#39;TypeScript&#39;</span><span class="token punctuation">,</span>
			kind<span class="token operator">:</span> CompletionItemKind<span class="token punctuation">.</span>Text<span class="token punctuation">,</span>
			data<span class="token operator">:</span> <span class="token number">1</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>
			label<span class="token operator">:</span> <span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">,</span>
			kind<span class="token operator">:</span> CompletionItemKind<span class="token punctuation">.</span>Text<span class="token punctuation">,</span>
			data<span class="token operator">:</span> <span class="token number">2</span>
		<span class="token punctuation">}</span>
		<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这个函数为补全列表的选中项提供了更多信息</span>
connection<span class="token punctuation">.</span><span class="token function">onCompletionResolve</span><span class="token punctuation">(</span>
	<span class="token punctuation">(</span>item<span class="token operator">:</span> CompletionItem<span class="token punctuation">)</span><span class="token operator">:</span> CompletionItem <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			item<span class="token punctuation">.</span>detail <span class="token operator">=</span> <span class="token string">&#39;TypeScript details&#39;</span><span class="token punctuation">;</span>
			item<span class="token punctuation">.</span>documentation <span class="token operator">=</span> <span class="token string">&#39;TypeScript documentation&#39;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			item<span class="token punctuation">.</span>detail <span class="token operator">=</span> <span class="token string">&#39;JavaScript details&#39;</span><span class="token punctuation">;</span>
			item<span class="token punctuation">.</span>documentation <span class="token operator">=</span> <span class="token string">&#39;JavaScript documentation&#39;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> item<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 让文档管理器监听文档的打开，变动和关闭事件。</span>
documents<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 连接后启动监听</span>
connection<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="添加一个简单的语法校验器" tabindex="-1"><a class="header-anchor" href="#添加一个简单的语法校验器" aria-hidden="true">#</a> 添加一个简单的语法校验器</h2><hr><p>为了给服务器添加文本校验，我们给text document manager添加一个listener然后在文本变动时调用，接下来就交给服务器去判断调用校验器的最佳时机了。在我们的示例中，服务器的功能是校验纯文本然后给所有大写单词进行标记。对应的代码片段：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 文本文件的内容改变时。文档首次打开或者文档内容修改时会触发这个事件。</span>
documents<span class="token punctuation">.</span><span class="token function">onDidChangeContent</span><span class="token punctuation">(</span><span class="token keyword">async</span> change <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> textDocument <span class="token operator">=</span> change<span class="token punctuation">.</span>document<span class="token punctuation">;</span>
  <span class="token comment">// 这个简单示例中，每次校验时我们都获取一次设置</span>
  <span class="token keyword">let</span> settings <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getDocumentSettings</span><span class="token punctuation">(</span>textDocument<span class="token punctuation">.</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 校验器会检查所有的大写单词是否超过 2 个字母</span>
  <span class="token keyword">let</span> text <span class="token operator">=</span> textDocument<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b[A-Z]{2,}\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> m<span class="token operator">:</span> RegExpExecArray <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> problems <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> diagnostics<span class="token operator">:</span> Diagnostic<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> problems <span class="token operator">&lt;</span> settings<span class="token punctuation">.</span>maxNumberOfProblems<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    problems<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> diagnostic<span class="token operator">:</span> Diagnostic <span class="token operator">=</span> <span class="token punctuation">{</span>
      severity<span class="token operator">:</span> DiagnosticSeverity<span class="token punctuation">.</span>Warning<span class="token punctuation">,</span>
      range<span class="token operator">:</span> <span class="token punctuation">{</span>
        start<span class="token operator">:</span> textDocument<span class="token punctuation">.</span><span class="token function">positionAt</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>
        end<span class="token operator">:</span> textDocument<span class="token punctuation">.</span><span class="token function">positionAt</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>index <span class="token operator">+</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is all uppercase.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      source<span class="token operator">:</span> <span class="token string">&#39;ex&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasDiagnosticRelatedInformationCapability<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      diagnostic<span class="token punctuation">.</span>relatedInformation <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          location<span class="token operator">:</span> <span class="token punctuation">{</span>
            uri<span class="token operator">:</span> textDocument<span class="token punctuation">.</span>uri<span class="token punctuation">,</span>
            range<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> diagnostic<span class="token punctuation">.</span>range<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          message<span class="token operator">:</span> <span class="token string">&#39;Spelling matters&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          location<span class="token operator">:</span> <span class="token punctuation">{</span>
            uri<span class="token operator">:</span> textDocument<span class="token punctuation">.</span>uri<span class="token punctuation">,</span>
            range<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> diagnostic<span class="token punctuation">.</span>range<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          message<span class="token operator">:</span> <span class="token string">&#39;Particularly for names&#39;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    diagnostics<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>diagnostic<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 将诊断信息发送给 VS Code</span>
  connection<span class="token punctuation">.</span><span class="token function">sendDiagnostics</span><span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token operator">:</span> textDocument<span class="token punctuation">.</span>uri<span class="token punctuation">,</span> diagnostics <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="诊断提示和小技巧" tabindex="-1"><a class="header-anchor" href="#诊断提示和小技巧" aria-hidden="true">#</a> 诊断提示和小技巧</h2><hr><ul><li>如果出错的开始点和结束点在同一个位置，VS Code会在那个单词的位置上打上波浪线</li><li>如果你想要把波浪线加到行未为止，就把<code>end position</code>设置为<code>Number.MAX_VALUE</code></li></ul><p>运行语言服务器步骤：</p><ol><li>通过快捷键(<kbd>Ctrl+Shift+B</kbd>)启动build任务。这个任务会把客户端和服务器端都编译掉。</li><li>打开调试侧边栏，选择<code>启动客户端</code>加载配置，然后按<code>开始调试</code>按钮启动<code>扩展开发主机</code>。</li><li>在根目录下新建一个&#39;test.txt&#39;文件，然后粘贴下述内容：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>TypeScript lets you write JavaScript the way you really want to.
TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.
ANY browser. ANY host. ANY OS. Open Source.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>扩展开发主机</code>实例看起来像是这样：</p><p><img src="https://code.visualstudio.com/assets/api/language-extensions/language-server-extension-guide/validation.png" alt="validation"></p><h2 id="调试客户端和服务端" tabindex="-1"><a class="header-anchor" href="#调试客户端和服务端" aria-hidden="true">#</a> 调试客户端和服务端</h2><hr><p>调试客户端代码就像调试普通插件一样简单。在代码中打上断点，然后按<kbd>F5</kbd>启动插件调试。</p><p><img src="https://code.visualstudio.com/assets/api/language-extensions/language-server-extension-guide/debugging-client.png" alt="debugging-client"></p><p>因为服务器是由<code>LanguageClient</code>启动的，我们需要附加一个<em>调试器</em>给运行中的服务器。为了做到这一点，切换到<strong>调试</strong>侧边栏，选择加载配置<code>Attach to Server</code>然后按<kbd>F5</kbd>启动调试（要保证server已经启动哦，也就是上面一步），看起来会像这样：</p><p><img src="https://code.visualstudio.com/assets/api/language-extensions/language-server-extension-guide/debugging-server.png" alt="debugging-server"></p><h2 id="为语言服务器加上日志" tabindex="-1"><a class="header-anchor" href="#为语言服务器加上日志" aria-hidden="true">#</a> 为语言服务器加上日志</h2><hr><p>如果你是用<code>vscode-languageclient</code>实现的客户端，你可以配置<code>[langId].trace.server</code>指示客户端在<code>output(输出)</code>面板中显示通信日志。</p><p>对于<strong>Isp-sample</strong>你能在<code>&quot;languageServerExample.trace.server&quot;: &quot;verbose&quot;</code>进行配置。现在看看&quot;Language Server Example&quot;频道，你应该能看到这些日志：</p><p><img src="https://code.visualstudio.com/assets/api/language-extensions/language-server-extension-guide/lsp-log.png" alt="lsp-log"></p>`,49),O={href:"https://microsoft.github.io/language-server-protocol/inspector/",target:"_blank",rel:"noopener noreferrer"},N=e(`<p><img src="https://code.visualstudio.com/assets/api/language-extensions/language-server-extension-guide/lsp-inspector.png" alt="lsp-inspector"></p><h2 id="在服务器中设置configuration" tabindex="-1"><a class="header-anchor" href="#在服务器中设置configuration" aria-hidden="true">#</a> 在服务器中设置Configuration</h2><hr><p>当我们写插件的客户端部分的时候，我们已经定义了一个控制最大问题报告数的配置。所以我们也可以在服务器中写一段读取客户端配置的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getDocumentSettings</span><span class="token punctuation">(</span>resource<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Thenable<span class="token operator">&lt;</span>ExampleSettings<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasConfigurationCapability<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>globalSettings<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">let</span> result <span class="token operator">=</span> documentSettings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		result <span class="token operator">=</span> connection<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			scopeUri<span class="token operator">:</span> resource<span class="token punctuation">,</span>
			section<span class="token operator">:</span> <span class="token string">&#39;languageServerExample&#39;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		documentSettings<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在唯一要做的事情就是在服务器端中监听用户修改的设置变动，然后重新验证已经打开的文本文件。为了重用文本变动事件的处理函数，我们把代码提取到<code>validateTextDocument</code>函数中，然后新建一个<code>maxNumberOfProblems</code>变量：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">validateTextDocument</span><span class="token punctuation">(</span>textDocument<span class="token operator">:</span> TextDocument<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 在这个简单的示例中，每次校验运行时我们都获取一次配置</span>
	<span class="token keyword">let</span> settings <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getDocumentSettings</span><span class="token punctuation">(</span>textDocument<span class="token punctuation">.</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 校验器如果检测到连续超过2个以上的大写字母则会报错</span>
	<span class="token keyword">let</span> text <span class="token operator">=</span> textDocument<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b[A-Z]{2,}\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> m<span class="token operator">:</span> RegExpExecArray<span class="token punctuation">;</span>

	<span class="token keyword">let</span> problems <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> diagnostics<span class="token operator">:</span> Diagnostic<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> problems <span class="token operator">&lt;</span> settings<span class="token punctuation">.</span>maxNumberOfProblems<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		problems<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> diagnosic<span class="token operator">:</span> Diagnostic <span class="token operator">=</span> <span class="token punctuation">{</span>
			severity<span class="token operator">:</span> DiagnosticSeverity<span class="token punctuation">.</span>Warning<span class="token punctuation">,</span>
			range<span class="token operator">:</span> <span class="token punctuation">{</span>
				start<span class="token operator">:</span> textDocument<span class="token punctuation">.</span><span class="token function">positionAt</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>
				end<span class="token operator">:</span> textDocument<span class="token punctuation">.</span><span class="token function">positionAt</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>index <span class="token operator">+</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is all uppercase.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
			source<span class="token operator">:</span> <span class="token string">&#39;ex&#39;</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>hasDiagnosticRelatedInformationCapability<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			diagnosic<span class="token punctuation">.</span>relatedInformation <span class="token operator">=</span> <span class="token punctuation">[</span>
				<span class="token punctuation">{</span>
					location<span class="token operator">:</span> <span class="token punctuation">{</span>
						uri<span class="token operator">:</span> textDocument<span class="token punctuation">.</span>uri<span class="token punctuation">,</span>
						range<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> diagnosic<span class="token punctuation">.</span>range<span class="token punctuation">)</span>
					<span class="token punctuation">}</span><span class="token punctuation">,</span>
					message<span class="token operator">:</span> <span class="token string">&#39;Spelling matters&#39;</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token punctuation">{</span>
					location<span class="token operator">:</span> <span class="token punctuation">{</span>
						uri<span class="token operator">:</span> textDocument<span class="token punctuation">.</span>uri<span class="token punctuation">,</span>
						range<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> diagnosic<span class="token punctuation">.</span>range<span class="token punctuation">)</span>
					<span class="token punctuation">}</span><span class="token punctuation">,</span>
					message<span class="token operator">:</span> <span class="token string">&#39;Particularly for names&#39;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		diagnostics<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>diagnosic<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 将错误处理结果发送给VS Code</span>
	connection<span class="token punctuation">.</span><span class="token function">sendDiagnostics</span><span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token operator">:</span> textDocument<span class="token punctuation">.</span>uri<span class="token punctuation">,</span> diagnostics <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加一个<em>通知处理函数</em>监听配置文件变动。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>connection<span class="token punctuation">.</span><span class="token function">onDidChangeConfiguration</span><span class="token punctuation">(</span>change <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>hasConfigurationCapability<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 重置所有文档设置的缓存</span>
		documentSettings<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		globalSettings <span class="token operator">=</span> <span class="token operator">&lt;</span>ExampleSettings<span class="token operator">&gt;</span><span class="token punctuation">(</span>
			<span class="token punctuation">(</span>change<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>languageServerExample <span class="token operator">||</span> defaultSettings<span class="token punctuation">)</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 重新验证所有打开的文本文档</span>
	documents<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>validateTextDocument<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次启动客户端，然后把设置中的<code>maximum report</code>改为1，就能看到：</p><p><img src="https://code.visualstudio.com/assets/api/language-extensions/language-server-extension-guide/validationOneProblem.png" alt="validationOneProblem"></p><h2 id="添加其他语言特性" tabindex="-1"><a class="header-anchor" href="#添加其他语言特性" aria-hidden="true">#</a> 添加其他语言特性</h2><hr>`,13),R={href:"https://github.com/Microsoft/vscode-eslint",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/Microsoft/vscode-jshint",target:"_blank",rel:"noopener noreferrer"},F=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 这个处理函数提供了初始补全项列表</span>
connection<span class="token punctuation">.</span><span class="token function">onCompletion</span><span class="token punctuation">(</span>
	<span class="token punctuation">(</span>_textDocumentPosition<span class="token operator">:</span> TextDocumentPositionParams<span class="token punctuation">)</span><span class="token operator">:</span> CompletionItem<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token comment">// 传入的变量包含了文本请求代码补全的位置。</span>
		<span class="token comment">// 在这个示例中我们忽略了这个信息，总是提供相同的补全选项。</span>
		<span class="token keyword">return</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				label<span class="token operator">:</span> <span class="token string">&#39;TypeScript&#39;</span><span class="token punctuation">,</span>
				kind<span class="token operator">:</span> CompletionItemKind<span class="token punctuation">.</span>Text<span class="token punctuation">,</span>
				data<span class="token operator">:</span> <span class="token number">1</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">{</span>
				label<span class="token operator">:</span> <span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">,</span>
				kind<span class="token operator">:</span> CompletionItemKind<span class="token punctuation">.</span>Text<span class="token punctuation">,</span>
				data<span class="token operator">:</span> <span class="token number">2</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这个函数为补全列表的选中项提供了更多信息</span>
connection<span class="token punctuation">.</span><span class="token function">onCompletionResolve</span><span class="token punctuation">(</span>
	<span class="token punctuation">(</span>item<span class="token operator">:</span> CompletionItem<span class="token punctuation">)</span><span class="token operator">:</span> CompletionItem <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token punctuation">(</span>item<span class="token punctuation">.</span>detail <span class="token operator">=</span> <span class="token string">&#39;TypeScript details&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token punctuation">(</span>item<span class="token punctuation">.</span>documentation <span class="token operator">=</span> <span class="token string">&#39;TypeScript documentation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token punctuation">(</span>item<span class="token punctuation">.</span>detail <span class="token operator">=</span> <span class="token string">&#39;JavaScript details&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token punctuation">(</span>item<span class="token punctuation">.</span>documentation <span class="token operator">=</span> <span class="token string">&#39;JavaScript documentation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> item<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>data</code>字段用于鉴别处理函数中传入的补全项。这个属性对协议来说是透明的，因为底层协议信息传输是基于JSON的，因此data字段只能保留从JSON序列化而来的数据。</p><p>那么现在只缺告诉VS Code服务器能提供代码补全请求。为了做到点，将对应标记添加到初始化函数中：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>connection<span class="token punctuation">.</span><span class="token function">onInitialize</span><span class="token punctuation">(</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token operator">:</span> InitializeResult <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">return</span> <span class="token punctuation">{</span>
		capabilities<span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token operator">...</span>
			<span class="token comment">// 告诉客户端，服务器支持代码补全</span>
			completionProvider<span class="token operator">:</span> <span class="token punctuation">{</span>
				resolveProvider<span class="token operator">:</span> <span class="token boolean">true</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的截屏显示了运行在纯文本文件中的补全代码：</p><p><img src="https://code.visualstudio.com/assets/api/language-extensions/language-server-extension-guide/codeComplete.png" alt="codeComplete"></p><h2 id="测试语言服务器" tabindex="-1"><a class="header-anchor" href="#测试语言服务器" aria-hidden="true">#</a> 测试语言服务器</h2><hr><p>为了创建一个高质量的语言服务器，我们需要构建一个能覆盖到它所有功能点的测试套件。有两种常见的测试服务器的方式：</p>`,9),J={href:"https://github.com/Microsoft/vscode-html-languageservice",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/Microsoft/vscode-css-languageservice",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/Microsoft/vscode-json-languageservice",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/Microsoft/vscode-languageserver-node/blob/master/protocol/src/test/connection.test.ts",target:"_blank",rel:"noopener noreferrer"},H=n("a",{href:"/references/commands"},"VS Code命令",-1),$=n("code",null,"node_modules",-1),B={href:"https://github.com/Microsoft/vscode-python",target:"_blank",rel:"noopener noreferrer"},G=e(`<p>你可以用任何你喜欢的测试框架做单元测试。这里我们只介绍如何对语言服务器插件进行端到端测试。</p><p>打开<code>.vscode/launch.json</code>，你能找到<code>E2E</code>测试目标：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Language Server E2E Test&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;extensionHost&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;runtimeExecutable&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${execPath}&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token string">&quot;--extensionDevelopmentPath=\${workspaceRoot}&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;--extensionTestsPath=\${workspaceRoot}/client/out/test&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;\${workspaceRoot}/client/testFixture&quot;</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token property">&quot;stopOnEntry&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
	<span class="token property">&quot;sourceMaps&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token property">&quot;outFiles&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;\${workspaceRoot}/client/out/test/**/*.js&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你运行了这个测试目标，它会打开一个VS Code实例和一个叫做<code>client/testFixtur</code>的激活工作区。VS Code然后会执行所有<code>client/src/test</code>中的测试。一点调试的小提示，你可以在<code>client/src/test</code>的Typescript文件中添加断点。</p><p>我们再来看看<code>completion.test.ts</code>文件：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> vscode <span class="token keyword">from</span> <span class="token string">&#39;vscode&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> assert <span class="token keyword">from</span> <span class="token string">&#39;assert&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getDocUri<span class="token punctuation">,</span> activate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./helper&#39;</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Should do completion&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> docUri <span class="token operator">=</span> <span class="token function">getDocUri</span><span class="token punctuation">(</span><span class="token string">&#39;completion.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;Completes JS/TS in txt file&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">await</span> <span class="token function">testCompletion</span><span class="token punctuation">(</span>docUri<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token function">Position</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
			items<span class="token operator">:</span> <span class="token punctuation">[</span>
				<span class="token punctuation">{</span> label<span class="token operator">:</span> <span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">,</span> kind<span class="token operator">:</span> vscode<span class="token punctuation">.</span>CompletionItemKind<span class="token punctuation">.</span>Text <span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token punctuation">{</span> label<span class="token operator">:</span> <span class="token string">&#39;TypeScript&#39;</span><span class="token punctuation">,</span> kind<span class="token operator">:</span> vscode<span class="token punctuation">.</span>CompletionItemKind<span class="token punctuation">.</span>Text <span class="token punctuation">}</span>
			<span class="token punctuation">]</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testCompletion</span><span class="token punctuation">(</span>
	docUri<span class="token operator">:</span> vscode<span class="token punctuation">.</span>Uri<span class="token punctuation">,</span>
	position<span class="token operator">:</span> vscode<span class="token punctuation">.</span>Position<span class="token punctuation">,</span>
	expectedCompletionList<span class="token operator">:</span> vscode<span class="token punctuation">.</span>CompletionList
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">await</span> <span class="token function">activate</span><span class="token punctuation">(</span>docUri<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 执行 \`vscode.executeCompletionItemProvider\` 命令，模拟激活代码补全功能</span>
	<span class="token keyword">const</span> actualCompletionList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> vscode<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">executeCommand</span><span class="token punctuation">(</span>
		<span class="token string">&#39;vscode.executeCompletionItemProvider&#39;</span><span class="token punctuation">,</span>
		docUri<span class="token punctuation">,</span>
		position
	<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> vscode<span class="token punctuation">.</span>CompletionList<span class="token punctuation">;</span>

	assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>actualCompletionList<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">,</span> expectedCompletionList<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
	expectedCompletionList<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>expectedItem<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> actualItem <span class="token operator">=</span> actualCompletionList<span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>actualItem<span class="token punctuation">.</span>label<span class="token punctuation">,</span> expectedItem<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>
		assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>actualItem<span class="token punctuation">.</span>kind<span class="token punctuation">,</span> expectedItem<span class="token punctuation">.</span>kind<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个测试中，我们：</p><ul><li>激活了插件</li><li>带上了一个URI和位置模拟信息，然后运行了<code>vscode.executeCompletionItemProvider</code>去触发补全</li><li>断言返回的补全项是不是达到了我们的预期</li></ul><p>我们再深入一点看看<code>activate(docURI)</code>函数。它被定义在<code>client/src/test/helper.ts</code>中：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> vscode <span class="token keyword">from</span> <span class="token string">&#39;vscode&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">let</span> doc<span class="token operator">:</span> vscode<span class="token punctuation">.</span>TextDocument<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> editor<span class="token operator">:</span> vscode<span class="token punctuation">.</span>TextEditor<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> documentEol<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> platformEol<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 激活 vscode.lsp-sample 插件
 */</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">activate</span><span class="token punctuation">(</span>docUri<span class="token operator">:</span> vscode<span class="token punctuation">.</span>Uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// extensionId来自于package.json中的\`publisher.name\`</span>
	<span class="token keyword">const</span> ext <span class="token operator">=</span> vscode<span class="token punctuation">.</span>extensions<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">&#39;vscode.lsp-sample&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">await</span> ext<span class="token punctuation">.</span><span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		doc <span class="token operator">=</span> <span class="token keyword">await</span> vscode<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">openTextDocument</span><span class="token punctuation">(</span>docUri<span class="token punctuation">)</span><span class="token punctuation">;</span>
		editor <span class="token operator">=</span> <span class="token keyword">await</span> vscode<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">showTextDocument</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待服务器激活</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>ms<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span>resolve <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在激活部分，我们：</p><ul><li>用<code>publisher.name</code> <code>extensionId</code>在<code>package.json</code>中获取到了插件</li><li>打开特定的文档，然后显示在文本编辑区</li><li>休眠2秒，确保启动了语言服务器</li></ul>`,12),Y=n("code",null,"client/src/test/diagnostics.test.ts",-1),Z=e(`<h2 id="进阶主题" tabindex="-1"><a class="header-anchor" href="#进阶主题" aria-hidden="true">#</a> 进阶主题</h2><hr><p>到目前为止，本篇教程提供了：</p><ul><li>一个简短的<strong>语言服务器</strong>和<strong>语言服务器协议</strong>概览</li><li>VS Code中的语言服务器插件架构</li><li>实现了一个<strong>Isp-sample</strong>插件，和如何开发、调试、检查和测试语言服务器</li></ul><h4 id="更多语言服务器特性" tabindex="-1"><a class="header-anchor" href="#更多语言服务器特性" aria-hidden="true">#</a> 更多语言服务器特性</h4><p>除了代码补全之外，VS Code还支持下列特性：</p><ul><li>文档高亮：高亮文本中的符号</li><li>悬停：为选中的文本符号提供悬停信息</li><li>Signature Help：为选中的文本提供提供Signature Help</li><li>转跳到定义：为选中的文本符号提供定义转跳</li><li>转跳到类型定义：为选中的文本符号提供类型/接口定义转跳</li><li>转跳到实现：为选中的文本符号提供实现转跳</li><li>引用查找：从整个项目中查找选中文本符号的引用</li><li>列出文件符号：列出文本文件中的全部符号</li><li>列出工作区符号：列出整个项目中的符号</li><li>执行代码：在给定文件和范围的条件下运行命令（通常如：美化、重构）</li><li>CodeLens: 为给定文件计算 CodeLens 统计数据</li><li>文件格式化：包括整个文件的格式化，部分文本格式化和根据类型格式化</li><li>重命名：重命名整个项目内的某些符号</li><li>文件链接：计算和解析文件中的链接</li><li>文件色彩：计算和解析文件中的色彩，并提供编辑器内的取色器</li></ul><p><a href="/language-extensions/programmatic-language-features">程序性语言特性</a>章节详细介绍了上述的语言特性，并且告诉我们如何通过下述(<strong>两者之一</strong>)去实现它们：</p><ul><li>语言服务器协议</li><li>直接使用VS Code的可拓展性API</li></ul><h2 id="增量文本同步更新" tabindex="-1"><a class="header-anchor" href="#增量文本同步更新" aria-hidden="true">#</a> 增量文本同步更新</h2><hr><p>在<code>vscode-languageserver</code>模块中，我们做了一个简单的<code>text document manager</code>同步VS Code和语言服务器。</p><p>但是这种方式有两个缺点：</p><ul><li>文件变动时，会重复地发送整个文本数据，这个传递的数据量相当可观。</li><li>现有的库通常都支持增量文本更新，不可避免地，我们会进行不必要的转换和创建抽象语法树。</li></ul><p>LSP因此直接提供了增量文本更新的API。</p><p>现在我们要通过增加3个通知函数实现我们的增量文本更新：</p><ul><li>onDidOpenTextDocument：当文件打开后调用</li><li>onDidChangeTextDocument：当文本变动后调用</li><li>onDidCloseTextDocument：当文件关闭后调用</li></ul><p>下面的代码片段展示了怎么在通信中挂上这些通知函数钩子，在初始化时因如何返回函数：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>connection<span class="token punctuation">.</span><span class="token function">onInitialize</span><span class="token punctuation">(</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token operator">:</span> InitializeResult <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">return</span> <span class="token punctuation">{</span>
		capabilities<span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token comment">// 启用文档增量更新同步</span>
			textDocumentSync<span class="token operator">:</span> TextDocumentSyncKind<span class="token punctuation">.</span>Incremental<span class="token punctuation">,</span>
			<span class="token operator">...</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

connection<span class="token punctuation">.</span><span class="token function">onDidOpenTextDocument</span><span class="token punctuation">(</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 当文档打开后触发，params.uri提供了文档的唯一地址。如果文档储存在硬盘上，那么就会是一个file类型的URI</span>
	<span class="token comment">// params.text——提供了文档一开始的内容</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

connection<span class="token punctuation">.</span><span class="token function">onDidChangeTextDocument</span><span class="token punctuation">(</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 文档的文本内容发生了改变时触发。</span>
	<span class="token comment">// params.uri提供了文档的唯一地址。</span>
	<span class="token comment">// params.contentChanges 包含文档的变动内容</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

connection<span class="token punctuation">.</span><span class="token function">onDidCloseTextDocument</span><span class="token punctuation">(</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 文档关闭后触发。</span>
	<span class="token comment">// params.uri提供了文档的唯一地址。</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="直接用vs-code-api实现语言特性" tabindex="-1"><a class="header-anchor" href="#直接用vs-code-api实现语言特性" aria-hidden="true">#</a> 直接用VS Code API实现语言特性</h4><p>语言服务器有这么多好处，只是用来提供VS Code编辑扩展能力就显得有些大材小用了。下面的例子里，我们使用<code>vscode.languages.register[LANGUAGE_FEATURE]Provider</code>选项为某类文件提供一些简单的语言服务器特性。</p>`,21),Q={href:"https://github.com/Microsoft/vscode-extension-samples/tree/master/completions-sample",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"vscode.languages.registerCompletionItemProvider",-1),nn={href:"https://github.com/Microsoft/vscode-extension-samples",target:"_blank",rel:"noopener noreferrer"},sn=n("h4",{id:"语言服务器的容错解析器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#语言服务器的容错解析器","aria-hidden":"true"},"#"),s(" 语言服务器的容错解析器")],-1),an=n("p",null,"大多数时候，编辑器中的代码都是不完整的，甚至语法都是错的，但是开发人员肯定希望自动补全等语言功能保持正常工作。因此，容错解析器就显得十分必要：解析器仍能从不完整的代码中创建有意义的AST，然后语言服务器根据这份AST提供服务。",-1),tn={href:"https://github.com/Microsoft/tolerant-php-parser",target:"_blank",rel:"noopener noreferrer"},en={href:"https://github.com/Microsoft/tolerant-php-parser/blob/master/docs/HowItWorks.md",target:"_blank",rel:"noopener noreferrer"},pn=n("h2",{id:"faq",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#faq","aria-hidden":"true"},"#"),s(" FAQ")],-1),on=n("li",null,[n("p",null,[n("strong",null,'问：当我试着向debug添加服务器的时候，我得到了"cannot connect to runtime process (timeout after 5000ms)"的信息？')]),n("p",null,"答：如果服务器没有运行你还强行添加debbuger的时候，会出现这个超时问题，你也可能需要关闭服务器中的断点。")],-1),cn={href:"https://microsoft.github.io/language-server-protocol/",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://github.com/Microsoft/language-server-protocol",target:"_blank",rel:"noopener noreferrer"};function un(rn,dn){const t=c("ExternalLinkIcon"),p=c("RouterLink");return l(),u("div",null,[d,k,v,n("ul",null,[m,n("li",null,[s("手把手教你实现一个语言服务器"),n("a",b,[g,a(t)]),s("，你觉得啰嗦的话，也可以直接看"),n("a",h,[s("lsp-sample"),a(t)]),s("源码。")])]),f,n("p",null,[s("为了解决这些问题，微软提供了"),n("a",y,[s("语言服务器协议(Language Server Protocol)"),a(t)]),s("意图为语言插件和编辑器提供社区规范。这样一来，语言服务器就可以用任何一种语言来实现，用协议通讯也避免了插件在主进程中运行的高开销。而且任何LSP兼容的语言插件，都能和LSP兼容的代码编辑器整合起来，LSP是语言插件开发者和第三方编辑器的共赢方案。")]),x,w,n("ul",null,[n("li",null,[s("根据"),n("a",_,[s("Node SDK"),a(t)]),s("，学习如何在VS Code中新建一个语言服务器插件")]),S,C]),D,n("p",null,[s("本篇将指引你学习如何用我们的"),n("a",q,[s("Node SDK"),a(t)]),s("构建一个语言客户端/服务器。剩下的内容都建立在你已经了解VS Code"),a(p,{to:"/"},{default:o(()=>[s("插件开发")]),_:1}),s("的基础之上。")]),P,T,I,n("ul",null,[n("li",null,[n("a",E,[s("lsp-sample"),a(t)]),s("：本篇教程的主要源代码，有大量注释")]),n("li",null,[n("a",V,[s("lsp-multi-server-sample"),a(t)]),s("："),L,s("的进阶版本，同样有大量注释，支持"),n("a",j,[s("多目录工作区"),a(t)]),s("特性的语言服务器实例。")])]),n("p",null,[s("复制"),n("a",A,[s("Microsoft/vscode-extension-samples"),a(t)]),s("然后打开示例：")]),M,n("p",null,[s("因为语言服务器通信会非常啰嗦（5s的正常使用会产生5000行日志），因此我们提供了一个可视化和可筛选的日志工具。你可以先从频道中保存所有的日志，然后在"),n("a",O,[s("语言服务器协议检查器"),a(t)]),s("中加载。")]),N,n("p",null,[s("第一个有趣的东西是，语言服务器通常会实现成文档校验器，从这个点来说，即使一个linter也算一个语言服务器，所以VS Code中的linter通常都是作为语言服务器实现的（参照"),n("a",R,[s("eslint"),a(t)]),s("和"),n("a",U,[s("jslint"),a(t)]),s('）。但是语言服务器还能做得更多，他们能提供代码不全，查找所有匹配项或者转跳到定义。下面的代码展示了为服务器添加代码补全的功能，它提供了2个建议单词"TypeScript"和"JavaScript"。')]),F,n("ul",null,[n("li",null,[s("单元测试：如果你想测试特定的功能点，这是一个非常有用的方式，模拟数据然后发送进去。VC Code的"),n("a",J,[s("HTML"),a(t)]),s("/"),n("a",K,[s("CSS"),a(t)]),s("/"),n("a",W,[s("JSON"),a(t)]),s("语言服务器就采用了这种测试方式。LSP的npm模块包也是用这种方式。在"),n("a",z,[s("这里"),a(t)]),s("查看更多使用npm协议模块的单元测试。")]),n("li",null,[s("端到端测试：就像"),a(p,{to:"/extension-authoring/testing-extensions.html"},{default:o(()=>[s("VS Code 插件测试")]),_:1}),s("一样，这个方式的好处是通过运行VS Code实例，打开文件，激活语言服务器/客户端然后执行"),H,s("来测试的，如果你配置了文件、设置和依赖（如"),$,s("）以及难以模拟数据的时候，你应该优先考虑这种模式，流行的"),n("a",B,[s("Python"),a(t)]),s("插件就采用了这种测试方式。")])]),G,n("p",null,[s("准备好之后，我们可以运行对应语言特性的"),a(p,{to:"/extensibility-reference/vscode-api-commands.html"},{default:o(()=>[s("VS Code命令")]),_:1}),s("，然后对结果进行断言测试。 这还有一个关于诊断特性的测试实现，如果你感兴趣，可以查看这个文件"),Y]),Z,n("p",null,[n("a",Q,[s("completions-sample"),a(t)]),s("是一个使用"),X,s("为纯文本添加代码片段的例子。")]),n("p",null,[s("更多例子请参阅"),n("a",nn,[s("https://github.com/Microsoft/vscode-extension-samples"),a(t)])]),sn,an,n("p",null,[s("我们之前在VS Code中做过PHP的支持，我们意识到PHP官方解析器并没有自带容错，而且也不能直接在语言服务器中直接重用。所以我们一起努力做了"),n("a",tn,[s(" Microsoft/tolerant-php-parser"),a(t)]),s("，并留下了详细的"),n("a",en,[s("笔记"),a(t)]),s("，或许能帮上需要容错解析器的语言服务器作者。")]),pn,n("ul",null,[on,n("li",null,[n("p",null,[n("strong",null,[s("问：虽然我看完了"),n("a",cn,[s("LSP Specification"),a(t)]),s("，但是我还有很多问题解决不了，我可以在哪获得帮助？")])]),n("p",null,[s("答：可以在"),n("a",ln,[s("https://github.com/Microsoft/language-server-protocol"),a(t)]),s("中开issue。")])])])])}const mn=i(r,[["render",un],["__file","06.language-server-extension-guide.html.vue"]]);export{mn as default};
