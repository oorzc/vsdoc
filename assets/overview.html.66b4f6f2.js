import{_ as r}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as n,a,b as e,d as i,e as d,r as c}from"./app.ed9f300c.js";const s={},l=d('<h1 id="扩展visual-studio-code" tabindex="-1"><a class="header-anchor" href="#扩展visual-studio-code" aria-hidden="true">#</a> 扩展Visual Studio Code</h1><p>所有的VS Code插件都共享一套注册、加载和连接<code>VS Code extensibility API</code>的通用模型，但其中有两大插件类型与通用插件模型有些许出入——<code>语言服务器</code>和<code>调试器</code>。他们有一些专属的调用协议，我们会在后面的章节里单独介绍这两个插件类型。</p><ul><li>插件类型 <ul><li><a href="#%E6%8F%92%E4%BB%B6">普通插件</a> - 基本的插件类型</li><li><a href="#%E8%AF%AD%E8%A8%80%E6%9C%8D%E5%8A%A1%E5%99%A8">语言服务器</a> - 高IO/CPU密集型任务的插件</li><li><a href="#%E8%B0%83%E8%AF%95%E9%80%82%E9%85%8D%E5%99%A8debug-adapter">调试器</a> - 通过<code>调试适配器</code>连接外部调试器的插件</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Microsoft/vscode-docs/master/api/language-extensions/images/language-server-extension-guide/extensibility-architecture.png" alt="调用示意图"></p><h2 id="插件" tabindex="-1"><a class="header-anchor" href="#插件" aria-hidden="true">#</a> 插件</h2><hr><p>插件激活后会运行在我们的共享插件主机环境(shared extension host process)中，这种插件进程分离的设计确保VS Code能在繁杂的任务中不会宕机。</p><p>插件能够的运行的时机包括：</p><ul><li><code>激活</code>：当检测到某类文件/存在某类文件/使用命令面板/使用组合键时，加载插件</li><li><code>工作区</code>：打开编辑器、状态栏、信息提示</li><li><code>事件</code>：编辑器的生命周期事件，如：<code>open, close, change</code>等等</li><li><code>编辑器</code>：读取文件，操作和选择文本</li><li><code>编辑器加强</code>：加强诸如IntelliSense，Peek，Hover，Diagnostics等富文本编辑支持功能</li></ul><p>我们提供了两个端到端的基础教程，供你快速入门：</p><ol><li><a href="/extension-authoring/example-hello-world">Hello World</a> - 生成一个本地运行的基础插件，了解插件的目录结构、配置文件，理解<code>激活</code>的触发机制。</li><li><a href="docs/extension-authoring/example-word-count">Word Count</a> - 根据特定的文件类型更新状态栏，响应编辑器的文本操作，学习文件被删除时该如何处理。</li></ol><p>另外，首先建议你阅读一下<a href="/extensibility-reference/principles-patterns">扩展性原则和模式</a>部分，能帮助你了解贯穿整个<code>extensibility API</code>的编程模式。</p><h2 id="语言服务器" tabindex="-1"><a class="header-anchor" href="#语言服务器" aria-hidden="true">#</a> 语言服务器</h2><p>语言服务器是一种特殊的插件，它能加强VS Code中各种语言的编辑体验。有了语言服务器后，你可以实现诸如“转跳到定义”、“错误检查”和其他<a href="/extensibility-reference/language-extension-guidelines">语言功能</a>了。</p><h2 id="调试适配器-debug-adapter" tabindex="-1"><a class="header-anchor" href="#调试适配器-debug-adapter" aria-hidden="true">#</a> 调试适配器(Debug Adapter)</h2><p>VS Code实现了一套原生的调试器UI，并通过<code>调试适配器</code>连接到<code>调试器插件</code>上。调试适配器专属进程控制VS Code和<code>VS Code debug protcol</code>的通信，它能通过任何语言来实现。</p><p>详情查看创建<a href="/extension-authoring/example-debug-adapter">调试器插件</a></p><hr>',18),h={href:"https://code.visualstudio.com/docs/editor/extension-gallery",target:"_blank",rel:"noopener noreferrer"},p=d('<h2 id="语言插件指南" tabindex="-1"><a class="header-anchor" href="#语言插件指南" aria-hidden="true">#</a> 语言插件指南</h2><p>通过<code>extensibility API</code>学习如何使用语言服务器协议——<a href="/extensibility-reference/language-extension-guidelines">语言插件指南</a>。</p><h2 id="主题-代码片段和高亮" tabindex="-1"><a class="header-anchor" href="#主题-代码片段和高亮" aria-hidden="true">#</a> 主题，代码片段和高亮</h2><p>在VS Code中你可以自定义主题、代码片段和语法高亮。通过TextMate配置文件，你可以很轻松地重用你原来的主题，或者你也可以在你的插件中直接使用<code>.tmTheme .tmSnippets .tmLanguage</code>文件。</p><h2 id="写插件吧" tabindex="-1"><a class="header-anchor" href="#写插件吧" aria-hidden="true">#</a> 写插件吧!</h2><p>使用Yeoman<a href="/extension-authoring/extension-generator">插件生成器</a>轻松创建插件项目。</p><h2 id="测试你的插件" tabindex="-1"><a class="header-anchor" href="#测试你的插件" aria-hidden="true">#</a> 测试你的插件</h2><p>我们还提供了强力的<a href="/extension-authoring/testing-extensions">测试支持</a>，通过VS Code API轻松测试你的VS Code实例。</p><h2 id="获取插件灵感" tabindex="-1"><a class="header-anchor" href="#获取插件灵感" aria-hidden="true">#</a> 获取插件灵感</h2>',9),u=a("code",null,"*extension-candidate",-1),x={href:"https://github.com/Microsoft/vscode",target:"_blank",rel:"noopener noreferrer"};function f(g,b){const o=c("ExternalLinkIcon");return t(),n("div",null,[l,a("p",null,[e("尝试VS Code插件最简单的方式就是去"),a("a",h,[e("插件市场"),i(o)]),e("，里面有非常多有用的插件，安装然后试试这些插件，你说不定会有所启发。")]),p,a("p",null,[e("大量的社区灵感应该转化为插件而不是产品本身的功能，这样用户才有更广的选择余地，VS Code团队将潜在的插件打上了"),u,e("标签，你可以通过"),a("a",x,[e("VS Code repository"),i(o)]),e("的issue列表找到还在开发中的插件，为喜欢的插件贡献一份力量吧。")])])}const C=r(s,[["render",f],["__file","overview.html.vue"]]);export{C as default};
