import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as r,c as l,a as s,b as n,d as e,w as p,e as o,r as c}from"./app.ed9f300c.js";const d={},u=s("h1",{id:"打包插件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#打包插件","aria-hidden":"true"},"#"),n(" 打包插件")],-1),k={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},v=s("em",null,"打包",-1),b={href:"https://rollupjs.org/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://parceljs.org/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://webpack.js.org/",target:"_blank",rel:"noopener noreferrer"},g=s("strong",null,"webpack",-1),_=s("h2",{id:"使用-webpack",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#使用-webpack","aria-hidden":"true"},"#"),n(" 使用 webpack")],-1),w=s("hr",null,null,-1),q={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},f=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i --save-dev webpack webpack-cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这行命令会先安装 webpack，然后更新你插件里的<code>package.json</code>中的<code>devDependencies</code>字段。Webpack 是一个 Javascrip 打包工具，但是大部分 VS Code 插件是用 Typescript 写的，所以你需要在 webpack 中配置<code>ts-loader</code>，它才能正确编译 Typescript。安装<code>ts-loader</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i --save-dev ts-loader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="配置-webpack" tabindex="-1"><a class="header-anchor" href="#配置-webpack" aria-hidden="true">#</a> 配置 webpack</h2><hr><p>既然所有的工具都安装好了，我们现在可以开始配置 webpack 了。通常来说，你的项目目录中需要创建一个<code>webpack.config.js</code>文件，webpack 才能知道按什么规则打包你的插件。下面的配置示例是 VS Code 插件专用的，让我们来开这个头吧：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/</span>

<span class="token comment">//@ts-check</span>

<span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**<span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Configuration<span class="token punctuation">}</span></span>*/</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span> <span class="token comment">// vscode插件运行在Node.js环境中 📖 -&gt; https://webpack.js.org/configuration/node/</span>

  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/extension.ts&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 插件的入口文件 📖 -&gt; https://webpack.js.org/configuration/entry-context/</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 打包好的文件储存在&#39;dist&#39;文件夹中 (请参考package.json), 📖 -&gt; https://webpack.js.org/configuration/output/</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;extension.js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&quot;commonjs2&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">devtoolModuleFilenameTemplate</span><span class="token operator">:</span> <span class="token string">&quot;../[resource-path]&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&quot;source-map&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">vscode</span><span class="token operator">:</span> <span class="token string">&quot;commonjs vscode&quot;</span> <span class="token comment">// vscode-module是热更新的临时目录，所以要排除掉。 在这里添加其他不应该被webpack打包的文件, 📖 -&gt; https://webpack.js.org/configuration/externals/</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 支持读取TypeScript和JavaScript文件, 📖 -&gt; https://github.com/TypeStrong/ts-loader</span>
    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.js&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;ts-loader&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),y={href:"https://github.com/Microsoft/vscode-extension-samples/blob/master/webpack-sample",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/Microsoft/vscode-extension-samples/blob/master/webpack-sample/webpack.config.js",target:"_blank",rel:"noopener noreferrer"},j=o(`<p>在上面的例子里，我们定义了如下内容：</p><ul><li><code>traget</code>：&#39;node&#39;，因为我们的插件运行在 Node.js 环境中。</li><li><code>entry</code>：webpack 使用的入口文件。这就像是<code>package.json</code>中的<code>main</code>属性，有点不一样的是你还需要给 webpack 提供&quot;source&quot;—— 一般就是<code>src/extension.ts</code>，小心不要配置在&quot;output&quot;里了。webpack 可以解析 Typescript，所以我们不需要再单独执行 Typescript 编译了。</li><li><code>output</code>配置告诉 webpack 应该把打包好的文件放在哪里，一般而言我们会放在<code>dist</code>文件夹里。在这个例子里，webpack 最后会产生一个<code>dist/extension.js</code>文件。</li><li>在<code>resolve</code>和<code>module/rules</code>中配置 Typescript 和 Javascript 的解析器。</li><li><code>externals</code>即排除配置，在这里可以配置打包文件不应包含的文件和模块。<code>vscode</code>不需要被打包是因为它并不储存在磁盘上，它是 VS Code 热更新生成的临时文件夹。根据插件依赖的具体 node 模块，你可能需要通过这个配置优化打包文件。</li></ul><h2 id="运行-webpack" tabindex="-1"><a class="header-anchor" href="#运行-webpack" aria-hidden="true">#</a> 运行 webpack</h2><hr><p><code>webpack.config.js</code>文件创建好之后，webpack 就可以正式开始工作了。你可以从命令行中运行 webpack，不过为了避免重复工作用 npm script 会更有效率。</p><p>将下列脚本复制到<code>package.json</code>的<code>scripts</code>中去：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;vscode:prepublish&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode production&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;compile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode none&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;watch&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode none --watch&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),S=s("code",null,"compile",-1),C=s("code",null,"watch",-1),T=s("code",null,"vscode:prepublish",-1),V=s("code",null,"vsce",-1),L=s("code",null,"vsce",-1),M={href:"https://webpack.js.org/concepts/mode/",target:"_blank",rel:"noopener noreferrer"},F=s("code",null,"production",-1),J=s("code",null,"none",-1),E=s("code",null,"npm run compile",-1),N=s("em",null,"命令面板",-1),P=s("kbd",null,"Ctrl+Shift+P",-1),$=s("strong",null,"运行任务",-1),D=s("h2",{id:"运行插件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#运行插件","aria-hidden":"true"},"#"),n(" 运行插件")],-1),I=s("hr",null,null,-1),B=s("code",null,"package.json",-1),R=s("code",null,"main",-1),A={href:"https://github.com/Microsoft/vscode-references-view/blob/d649d01d369e338bbe70c86e03f28269cbf87027/package.json#L26",target:"_blank",rel:"noopener noreferrer"},z=s("code",null,'"./dist/extension"',-1),H=s("code",null,"launch.json",-1),W=s("code",null,"outFiles",-1),G=o(`<h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><hr><p>插件开发者一般都会给插件源代码进行单元测试，但是有了完备的底层架构支持，插件的源代码可以不依赖测试，webpack 产生的构建文件中也不应该包含任何测试代码。如果需要运行单元测试，只需要简单地编译就好了。在上面的例子里，我们有一个<code>test-compile</code>脚本，它会把调用 Typescript 编译器将插件编译至<code>out</code>目录中。这样一来我们就有了 JS 文件，再使用下面的<code>launch.json</code>就足够应付测试了。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Extension Tests&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;extensionHost&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;runtimeExecutable&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${execPath}&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;--extensionDevelopmentPath=\${workspaceFolder}&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;--extensionTestsPath=\${workspaceFolder}/out/test&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;outFiles&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;\${workspaceFolder}/out/test/**/*.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;preLaunchTask&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm: test-compile&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个测试配置对于非 webpack 打包的插件来说也是可以使用的。我们没必要将单元测试打包起来，因为它们不应包含在我们发布的插件里。</p><h2 id="发布" tabindex="-1"><a class="header-anchor" href="#发布" aria-hidden="true">#</a> 发布</h2><hr><p>发布前你需要更新<code>.vscodeignore</code>文件。现在所有东西都打包到了<code>dist/extension.js</code>文件中，所以应该排除这个文件还有<code>out</code>文件夹（怕你漏了，特此提醒），以及最重要的<code>node_modules</code>文件夹。</p><p>一般来说，<code>.vsignore</code>文件应该是这样的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>.vscode
node_modules
out/
src/
tsconfig.json
webpack.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="迁移插件" tabindex="-1"><a class="header-anchor" href="#迁移插件" aria-hidden="true">#</a> 迁移插件</h2><hr>`,12),K={href:"https://github.com/Microsoft/vscode-references-view/pull/50",target:"_blank",rel:"noopener noreferrer"},O=o('<p>在里面，你可以看到：</p><ul><li><code>devDependencies</code>中添加<code>webpack</code>，<code>webpack-cli</code>和<code>ts-loader</code></li><li>更新 npm 脚本以便开发时使用 webpack</li><li>更新调试配置文件<code>launch.json</code></li><li>添加和修改<code>webpack.config.js</code></li><li>更新<code>.vscodeignore</code>排除<code>node_modules</code>和其他开发时产生的临时文件</li><li>开始享受体积更小、安装更快的插件！</li></ul><h2 id="疑难解答" tabindex="-1"><a class="header-anchor" href="#疑难解答" aria-hidden="true">#</a> 疑难解答</h2><hr><h4 id="压缩" tabindex="-1"><a class="header-anchor" href="#压缩" aria-hidden="true">#</a> 压缩</h4><p>使用<code>production</code>模式会执行代码压缩，它会去除源代码中的空格和注释，并把变量名和函数名进行替换——混淆和压缩。不过形如<code>Function.prototype.name</code>的代码不会压缩。</p><h4 id="webpack-critical-dependencies" tabindex="-1"><a class="header-anchor" href="#webpack-critical-dependencies" aria-hidden="true">#</a> webpack critical dependencies</h4><p>当你运行 webpack 时，你可能会碰到像<strong>Critical dependencies: the request of a dependency is an expression</strong>字样的警告。这些警告必须立即处理，一般来说会影响到打包过程。这句话意味着 webpack 不能静态分析某些依赖，一般是由动态使用<code>require</code>导致的，比如<code>require(someDynamicVariable)</code>。</p><p>想要处理这类警告，你需要：</p><ul><li>将需要打包的部分变成静态的依赖。</li><li>通过<code>externals</code>排除这部分依赖，但是注意它们的 Javascript 文件还是应该保留在我们打包的插件里，在<code>.vscodeignore</code>中使用 glob 模式，比如<code>!node_modules/mySpecialModule</code>。</li></ul><h2 id="下一步" tabindex="-1"><a class="header-anchor" href="#下一步" aria-hidden="true">#</a> 下一步</h2>',11),Q={href:"https://code.visualstudio.com/docs/editor/extension-gallery",target:"_blank",rel:"noopener noreferrer"};function U(X,Y){const a=c("ExternalLinkIcon"),t=c("RouterLink");return r(),l("div",null,[u,s("p",null,[n("VS Code 插件体积常常随着更新越来越大，它会产生很多文件，而且还依赖各种"),s("a",k,[n("npm"),e(a)]),n("包。 程序开发的最佳实践是抽象和重用，但过度拆分和庞大的代码结构产生的代价就是更大的插件体积和更慢的运行效率。加载 100 个小文件远比加载一个大文件来的慢，这就是我们更推荐打包插件的原因。 "),v,n("是将多个小的源文件打包成单个入口文件的过程。")]),s("p",null,[n("对于 Javascript 而言，可选的构建工具非常多，比较流行的如"),s("a",b,[n("rollup.js"),e(a)]),n("，"),s("a",h,[n("parcel"),e(a)]),n("和"),s("a",m,[n("webpack"),e(a)]),n("。大部分构建工具的概念和功能都是相似的，本节主要使用"),g,n("打包。")]),_,w,s("p",null,[n("webpack 这个开发工具可以在"),s("a",q,[n("npm"),e(a)]),n("里找到，为了获取 webpack 和它的命令行界面，打开终端然后输入：")]),f,s("p",null,[n("这份文件是"),s("a",y,[n("webpack-extension"),e(a)]),n("中的"),s("a",x,[n("一部分"),e(a)]),n("。webpack 配置最后输出的就是 JS 对象。")]),j,s("p",null,[S,n("和"),C,n("脚本是开发时使用的，它们会产生构建文件。"),T,n("是"),V,n("使用的，"),L,n("是 VS Code 的打包和发布工具，你需要在发布插件之前运行这个命令。webpack 中的"),s("a",M,[n("mode"),e(a)]),n("是控制优化级别的配置项，如果你使用"),F,n("字段，那么就会打包出最小的构建文件，但是也会耗费更多时间，所以我们开发中使用"),J,n("。想要运行上述脚本，我们可以打开终端（命令行）输入"),E,n("或者从"),N,n("（"),P,n("）中使用"),$,n("来开始。")]),D,I,s("p",null,[n("运行插件之前，你需要将"),B,n("中的"),R,n("属性指向到构建文件上，也就是我们上面提到的"),s("a",A,[z,e(a)]),n("，改好之后我们就可以运行和测试插件了。关于调试配置，请注意更新"),H,n("中的"),W,n("属性。")]),G,s("p",null,[n("用 webpack 迁移现有的插件是很容易的，整个过程就像我们上面的指南一样。真实的例子如 VS Code 的 References 视图就是从这个"),s("a",K,[n("pull request"),e(a)]),n("应用了 webpack 而来的。")]),O,s("ul",null,[s("li",null,[s("a",Q,[n("插件市场"),e(a)]),n(" - 学习更多 VS Code 插件市场的有关内容。")]),s("li",null,[e(t,{to:"/working-with-extensions/testing-extension.html"},{default:p(()=>[n("测试插件")]),_:1}),n(" - 测试插件，提高项目质量。")]),s("li",null,[e(t,{to:"/working-with-extensions/continuous-integration.html"},{default:p(()=>[n("持续集成")]),_:1}),n(" - 使用 Azure Pipeline 运行插件的 CI 构建。")])])])}const sn=i(d,[["render",U],["__file","03.bundling-extension.html.vue"]]);export{sn as default};
