import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as o,e as l}from"./app.ed9f300c.js";const n={},r=l(`<h1 id="内置命令" tabindex="-1"><a class="header-anchor" href="#内置命令" aria-hidden="true">#</a> 内置命令</h1><p>这篇文档列出了可能需要与<code>vscode.commands.executeCommand</code>一起使用的命令集合.</p><p>阅读<a href="">命令指南</a>以了解如何使用<code>commands</code>API.</p><p>下面是一个如何在 VS Code 中打开新文件夹的例子:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> uri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&#39;/some/path/to/folder&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> success <span class="token operator">=</span> <span class="token keyword">await</span> commands<span class="token punctuation">.</span><span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token string">&#39;vscode.openFolder&#39;</span><span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h2><p><code>vscode.executeWorkspaceSymbolProvider</code> - 执行工作区所有的<strong>符号</strong>供应器函数</p><ul><li><em>query</em> - 搜索关键词</li><li><em>(returns)</em> - promise函数, 且参数为具有SymbolInformation和DocumentSymbol的实例数组.</li></ul><p><code>vscode.executeDefinitionProvider</code> - 执行所有的<strong>定义</strong>供应器函数</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>position</em> - 某个符号的位置</li><li><em>(returns)</em> - promise函数, 且参数为Location实例数组.</li></ul><p><code>vscode.executeDeclarationProvider</code> - 执行所有的<strong>声明</strong>供应器函数.</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>position</em> - 某个符号的位置</li><li><em>(returns)</em> - promise函数, 且参数为Location实例数组.</li></ul><p><code>vscode.executeTypeDefinitionProvider</code> - 执行所有的<strong>类型定义</strong>供应器函数.</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>position</em> - 某个符号的位置</li><li><em>(returns)</em> - promise函数, 且参数为Location实例数组.</li></ul><p><code>vscode.executeImplementationProvider</code> - 执行所有的<strong>接口</strong>供应器函数</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>position</em> - 某个符号的位置</li><li><em>(returns)</em> - promise函数, 且参数为Location实例数组</li></ul><p><code>vscode.executeHoverProvider</code> - 执行所有的<strong>悬停</strong>供应器函数.</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>position</em> - 某个符号的位置</li><li><em>(returns)</em> - promise函数, 且参数为Hover实例数组</li></ul><p><code>vscode.executeDocumentHighlights</code> - 执行<strong>文档高亮</strong>供应器函数.</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>position</em> - 在文档中的位置</li><li><em>(returns)</em> - promise函数, 且参数为DocumentHighlight实例数组</li></ul><p><code>vscode.executeReferenceProvider</code> - 执行<strong>引用</strong>供应器函数</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>position</em> - 在文档中的位置</li><li><em>(returns)</em> - promise函数, 且参数为Location实例数组</li></ul><p><code>vscode.executeDocumentRenameProvider</code> - 执行<strong>重命名</strong>供应器函数</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>position</em> - 在文档中的位置</li><li><em>newName</em> - 新的符号名称</li><li><em>(returns)</em> - promise函数, 且参数为WorkspaceEdit</li></ul><p><code>vscode.executeSignatureHelpProvider</code> - 执行<strong>符号帮助</strong>供应器函数</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>position</em> - 在文档中的位置</li><li><em>triggerCharacter</em> - (可选的)当用户输入特定字符时（如<code>,</code> 或 <code>(</code>）触发符号帮助</li><li><em>(returns)</em> - promise函数, 且参数为SignatureHelp</li></ul><p><code>vscode.executeDocumentSymbolProvider</code> - 执行<strong>文档符号</strong>供应器函数</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>(returns)</em> - promise函数, 且参数为具有SymbolInformation和DocumentSymbol的实例数组</li></ul><p><code>vscode.executeCompletionItemProvider</code> - 执行<strong>自动补全</strong>供应器函数</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>position</em> - 在文档中的位置</li><li><em>triggerCharacter</em> - (可选的)当用户输入诸如(<code>,</code> <code>(</code>)之类的字符时触发</li><li><em>itemResolveCount</em> - (可选的)补全的符号数量(数目太大会减慢补全速度)</li><li><em>(returns)</em> - promise函数, 且参数为CompletionList实例</li></ul><p><code>vscode.executeCodeActionProvider</code> - 执行<strong>代码操作小灯泡提示</strong>供应器函数</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>range</em> - 在文档中的范围</li><li><em>(returns)</em> - promise函数, 且参数为Command实例数组</li></ul><p><code>vscode.executeCodeLensProvider</code> - 执行<strong>CodeLens</strong>供应器函数</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>itemResolveCount</em> - (可选的)需要解析的lenses数量, 数目太大会影响性能</li><li><em>(returns)</em> - promise函数, 且参数为CodeLens实例数组</li></ul><p><code>vscode.executeFormatDocumentProvider</code> - 执行<strong>格式化文档</strong>供应器函数</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>options</em> - 配置项</li><li><em>(returns)</em> - promise函数, 且参数为TextEdits数组</li></ul><p><code>vscode.executeFormatRangeProvider</code> - 执行<strong>局部格式化</strong>供应器函数</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>range</em> - 限制的范围</li><li><em>options</em> - 配置项</li><li><em>(returns)</em> - promise函数, 且参数为TextEdits数组</li></ul><p><code>vscode.executeFormatOnTypeProvider</code> - 执行<strong>格式化文档</strong>供应器函数</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>position</em> - 在文档中的位置</li><li><em>ch</em> - 在输入某个字符之后进行格式化</li><li><em>options</em> - 配置项</li><li><em>(returns)</em> - promise函数, 且参数为TextEdits数组</li></ul><p><code>vscode.executeLinkProvider</code> - 执行<strong>文档链接</strong>供应器函数</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>(returns)</em> - promise函数, 且参数为DocumentLink实例数组</li></ul><p><code>vscode.executeDocumentColorProvider</code> - 执行<strong>文档颜色</strong>供应器函数</p><ul><li><em>uri</em> - 文档的Uri</li><li><em>(returns)</em> - promise函数, 且参数为ColorInfomation对象数组</li></ul><p><code>vscode.executeColorPresentationProvider</code> - 执行<strong>色彩呈现</strong>供应器函数</p><ul><li><em>color</em> - 需要展示并插入的颜色</li><li><em>context</em> - 上下文对象, 包括uri和影响范围</li><li><em>(returns)</em> - promise函数, 且参数为ColorPresentation对象数组</li></ul><p><code>vscode.openFolder</code> - 在当前窗口或者新的窗口打开一个文件夹或者工作区</p><ul><li><em>uri</em> - 被打开的文件夹或工作区Uri. 如果未提供, 会打开一个询问提示框</li><li><em>newWindow</em> - (可选的)是否在新窗口打开. 默认在本窗口</li></ul><p>!&gt; <strong>注意：</strong> 在当前窗口打开, 如果未设置<code>newWindow = true</code>, 会在指定的工作区或者文件夹开启新的拓展主机进程, 并且关闭当前拓展主机进程.</p><p><code>vscode.diff</code> - 在diff编辑器中打开指定资源以比较它们的内容</p><ul><li><em>left</em> diff编辑器左边的文件</li><li><em>right</em> diff编辑器右边的文件</li><li><em>title</em> (可选)diff编辑器标题</li><li><em>options</em> (可选)编辑器配置项, 参考<code>vscode.TextDocumentShowOptions</code></li></ul><p><code>vscode.open</code> - 在编辑器打开指定文件</p><ul><li><em>resource</em> - 要打开的文件</li><li><em>columnOrOptions</em> - (可选)可以是要打开的编辑器列，也可以是编辑器选项，参考<code>vscode.TextDocumentShowOptions</code></li></ul><p>可以是文本文件、二进制文件、http(s) url. 如果需要更多的配置项, 使用<code>vscode.window.showTextDocument</code>代替.</p><p><code>vscode.removeFromRecentlyOpened</code> - 在最近打开的列表中移除一个路径</p><ul><li><em>path</em> - 被移除的路径</li></ul><p><code>vscode.setEditorLayout</code> - 设置编辑器布局</p><ul><li><em>layout</em> - 被设置的布局</li></ul><p>布局是一个对象，带有初始布局方向（可选，0 = 水平布局，1 = 垂直布局），还有一个包含编辑器组的数组。每个编辑器组又有一个尺寸和另一个数组，其中有矩形布局和方向信息。如果设置了编辑器组的大小，每一行或者每一列的总和必须为1。比如一个2x2的网格：<code>{ orientation: 0, groups: [{ groups: [{}, {}], size: 0.5 }, { groups: [{}, {}], size: 0.5 }] }</code></p><p><code>cursorMove</code> - 移动光标到视图的合理位置</p><ul><li><p><em>Cursor move argument object</em></p><p>可以传递的键值对</p><ul><li>&#39;to&#39;: 必选, 鼠标要移动到的合理位置</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;left&#39;, &#39;right&#39;, &#39;up&#39;, &#39;down&#39;
&#39;wrappedLineStart&#39;, &#39;wrappedLineEnd&#39;, &#39;wrappedLineColumnCenter&#39;
&#39;wrappedLineFirstNonWhitespaceCharacter&#39;, &#39;wrappedLineLastNonWhitespaceCharacter&#39;
&#39;viewPortTop&#39;, &#39;viewPortCenter&#39;, &#39;viewPortBottom&#39;, &#39;viewPortIfOutside&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>&#39;by&#39;: 移动的单位. 默认根据&#39;to&#39;来计算.</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;line&#39;, &#39;wrappedLine&#39;, &#39;character&#39;, &#39;halfLine&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>&#39;value&#39;: 单位步数. 默认为&#39;1&#39;.</li><li>&#39;select&#39;: 如果为&#39;true&#39;则会选中. 默认为&#39;false&#39;.</li></ul></li></ul><p><code>editorScroll</code> - 编辑器滚动方向</p><ul><li><p><em>Editor scroll argument object</em></p><p>可以传递的键值对</p><ul><li>&#39;to&#39;: 必须的. 方向值</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;up&#39;, &#39;down&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>&#39;by&#39;: 移动的单位. 默认根据&#39;to&#39;来计算.</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;line&#39;, &#39;wrappedLine&#39;, &#39;page&#39;, &#39;halfPage&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>&#39;value&#39;: 单位步数. 默认为&#39;1&#39;.</li><li>&#39;revealCursor&#39;: 如果为&#39;true&#39;, 在超出滚动视图也会显示光标.</li></ul></li></ul><p><code>revealLine</code> - 在给定的位置显示行</p><ul><li><p><em>Reveal line argument object</em></p><p>可以传递的键值对</p><ul><li>&#39;lineNumber&#39;: 必须的. 行号</li><li>&#39;at&#39;: 显示的合理位置</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;top&#39;, &#39;center&#39;, &#39;bottom&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p><code>editor.unfold</code> - 展开编辑器内容</p><ul><li><p><em>Unfold editor argument</em></p><p>可以传递的键值对</p><ul><li>&#39;levels&#39;: 展开的层级数. 默认为 1.</li><li>&#39;direction&#39;: 如果是&#39;up&#39;, 向上展开, 否则向下展开</li><li>&#39;selectionLines&#39;: 要使用展开功能的起始行（从0起）。如果不设置，就会使用当前激活的行（选中区）.</li></ul></li></ul><p><code>editor.fold</code> - 折叠编辑器内容</p><ul><li><p><code>Fold editor argument</code></p><p>可以传递的键值对</p><ul><li>&#39;levels&#39;: 折叠的的层级数。默认为1</li><li>&#39;direction&#39;: 如果设置为&#39;up&#39;，向上折叠，不然向下折叠</li><li>&#39;selectionLines&#39;: 要使用折叠功能的起始行（从0起）。如果不设置，就会使用当前激活的行（选中区）</li></ul></li></ul><p><code>editor.action.showReferences</code> - 在文件中显示引用</p><ul><li><em>uri</em> - 要显示引用的文件</li><li><em>position</em> - 要显示的位置</li><li><em>locations</em> - 位置数组</li></ul><p><code>moveActiveEditor</code> - 通过标签或者组移动激活的编辑器</p><ul><li><p><em>Active editor move argument</em></p><p>参数</p><ul><li>&#39;to&#39;: String. 目标位置</li><li>&#39;by&#39;: String. 移动的单位(通过标签或者组).</li><li>&#39;value&#39;: Number. 要移动的位置或者绝对位置值</li></ul></li></ul><h2 id="简单命令" tabindex="-1"><a class="header-anchor" href="#简单命令" aria-hidden="true">#</a> 简单命令</h2><p>简单的命令不需要参数, 可以在<code>keybindings.json</code>的<strong>键盘快捷方式</strong>列表中找到. 在文件底部的注释块中列出了未绑定的命令.</p><p>查看<code>keybindings.json</code>:</p><p>Windows, Linux: <strong>文件</strong> &gt; <strong>首选项</strong> &gt; <strong>键盘快捷方式</strong> &gt; <code>keybindings.json</code></p><p>macOS: <strong>编码</strong> &gt; <strong>首选项</strong> &gt; <strong>键盘快捷方式</strong> &gt; <code>keybindings.json</code></p>`,78),t=[r];function s(d,c){return i(),o("div",null,t)}const a=e(n,[["render",s],["__file","03.commands.html.vue"]]);export{a as default};
