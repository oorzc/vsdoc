const e=JSON.parse('{"key":"v-530e3258","path":"/01.preknowledge/05.generics.html","title":"认识Typescript-泛型","lang":"zh-CN","frontmatter":{"summary":"认识Typescript-泛型 软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。 在像C#和Java这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。 泛型之","head":[["meta",{"property":"og:url","content":"https://oorzc.cn/01.preknowledge/05.generics.html"}],["meta",{"property":"og:site_name","content":"vscode插件开发文档"}],["meta",{"property":"og:title","content":"认识Typescript-泛型"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"excerpt":"","headers":[{"level":2,"title":"泛型之Hello World","slug":"泛型之hello-world","link":"#泛型之hello-world","children":[]},{"level":2,"title":"使用泛型变量","slug":"使用泛型变量","link":"#使用泛型变量","children":[]},{"level":2,"title":"泛型类型","slug":"泛型类型","link":"#泛型类型","children":[]},{"level":2,"title":"泛型类","slug":"泛型类","link":"#泛型类","children":[]},{"level":2,"title":"泛型约束","slug":"泛型约束","link":"#泛型约束","children":[{"level":3,"title":"在泛型约束中使用类型参数","slug":"在泛型约束中使用类型参数","link":"#在泛型约束中使用类型参数","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":8.02,"words":2406},"filePathRelative":"01.preknowledge/05.generics.md"}');export{e as data};
