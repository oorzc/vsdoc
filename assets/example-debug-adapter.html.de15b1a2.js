import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c,a as s,b as n,d as o,e,r as i}from"./app.ed9f300c.js";const r={},u=e('<h1 id="示例-调试适配器" tabindex="-1"><a class="header-anchor" href="#示例-调试适配器" aria-hidden="true">#</a> 示例-调试适配器</h1><p>虽然VS Code实现了一个原生的调试界面，但是它不能直接和调试器通信，而是依赖于<em>调试插件</em>实现调试和运行时的功能特性。</p><p>这些调试插件各不相同，主要是因为他们的实现并不运行在扩展主机中，而是作为一个分离的独立程序。我们称这些调试插件为<em>适配器</em>是因为他们能“适配”API、具体的调试器，或者由VS Code定义的<strong>调试适配器协议</strong>(DAP)。</p><p><img src="https://raw.githubusercontent.com/Microsoft/vscode-docs/master/docs/extensions/images/example-debuggers/extensibility-architecture.png" alt="适配器运行框架"></p><p>将调试适配器作为单独的运行程序有两方面的原因：第一，对于适合的调试器或者运行时，有其对应的语言来实现；第二，一个独立的程序能运行于底层调试器或者运行时上，也更轻松地运行在特权模式中。</p><p>为了避免本地防火墙的问题，VS Code依靠stdin/stdou和适配器通信，而不是sockets等的通信流行机制。</p><p>每个调试器插件定义了一种调试<code>类型</code>，而且会被VS Code的启动配置使用。当调试器session结束，调试器也会关闭。</p><p><img src="https://raw.githubusercontent.com/Microsoft/vscode-docs/master/docs/extensions/images/example-debuggers/debug-arch.png" alt=""></p>',8),l={href:"https://marketplace.visualstudio.com/vscode/Debuggers",target:"_blank",rel:"noopener noreferrer"},d=s("h2",{id:"插件mock-debug",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#插件mock-debug","aria-hidden":"true"},"#"),n(" 插件Mock Debug")],-1),k=s("hr",null,null,-1),g=s("p",null,"从零开始做一个调试适配器对本篇教程来说实在太重了。因此我们会从一个简单的教学适配器开始，这个模拟的调试插件支持步进，继续，断点，异常捕捉和变量审查，但它并不会真的连接到调试器上。",-1),m={href:"https://marketplace.visualstudio.com/items/andreweinand.mock-debug",target:"_blank",rel:"noopener noreferrer"},v=e(`<ul><li>切换到<em>插件</em>侧边栏，输入“mock”然后找到Mock Debug插件。</li><li>安装然后重启VS Code</li></ul><p>试试Mock Debug吧：</p><ul><li>创建一个空文件夹<code>mock test</code>，然后用VS Code打开</li><li>新建<code>readme.md</code>，然后输入几行文字</li><li>切换到<em>调试</em>侧边栏，然后按齿轮⚙按钮</li><li>VS Code会让你选择“environment”，然后创建一个默认的启动配置文件。选择“Mock Debug”。</li><li>按下绿色的开始按钮，然后进入我们的<code>readme.md</code>文件</li></ul><p>调试会话（debug session）就开始了，你可以按“步进（step）”，设置断点，捕捉异常（如果文本中出现<code>exception</code>字样）</p><p><img src="https://raw.githubusercontent.com/Microsoft/vscode-docs/master/docs/extensions/images/example-debuggers/mock-debug.gif" alt=""></p><p>那么现在我们要正式学习Mock Debug示例了，我们建议你先删除这个插件。</p><h2 id="mock-debug开发设置" tabindex="-1"><a class="header-anchor" href="#mock-debug开发设置" aria-hidden="true">#</a> Mock Debug开发设置</h2><hr><p>接下来让我们获取源码，在VS Code中开始开发吧：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/Microsoft/vscode-mock-debug.git
<span class="token builtin class-name">cd</span> vscode-mock-debug
<span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开项目文件夹<code>vscode-mock-debug</code>，看看里面有什么：</p><ul><li><code>package.json</code> mock-debug插件的配置清单 <ul><li>列出了插件的发布内容配置点</li><li><code>complie</code>脚本用于编译Typescript到<code>out</code>文件夹中，<code>watch</code>则是侦听后续的源码变动</li><li><code>vscode-debugprotocol</code>、<code>vscode-debugadapter</code> 、<code>vscode-debugadapter-testsupport</code>是NPM模块，简化了基于node的调试适配器开发工作</li></ul></li><li><code>src/mockRuntime.ts</code> 提供了简单API的虚拟运行时</li><li><code>src/mockDebug.ts</code>适配代码运行时到调试适配器协议中，你能在这个文件中找到各种各样的调试适配器协议和请求。</li><li>因为调试插件的实现就在调试适配器中，所以我们就完全没有编写平常要求的<em>插件</em>代码的必要了（如：运行在扩展主机环境的代码），不过Mock Debug有一个小的<code>src/extension.ts</code>文件，这个文件描述了一个调试插件都能做些什么。</li></ul><p>现在构建然后加载Mock Debug插件，选择<strong>插件</strong>加载配置，然后按下<code>F5</code>，一开始，全部的Typescript编译会进入编译，然后输出到<code>out</code>文件夹中。全部构建完成后，会启动一个<code>watch task</code>用于监听你所作的任何改动。</p><p>之后会弹出一个新的VS Code窗口“[扩展开发主机]”，Mock Debug插件就运行在调试模式中。在这个窗口中打开<code>mock test</code>，再打开<code>readme.md</code>文件，<code>F5</code>启动调试会话。</p><p><img src="https://raw.githubusercontent.com/Microsoft/vscode-docs/master/docs/extensions/images/example-debuggers/debug-mock-session.png" alt=""></p><p>现在插件已经启动在调试模式中了，你可以在<code>src/extension.ts</code>打断点，但是就如我之前所说，这个文件没有什么有意思的代码，真正重要的部分都在调试适配器中。</p><p>想要调试<em>调试适配器</em>本身，我们必须首先运行在调试模式中。运行调试适配器服务，然后配置VS Code连接上就好了。选中调试面板，从下拉面板中加载<code>Server</code>配置文件，然后按下绿色的开始按钮。</p><p>因为我们已经激活了一个插件的调试会话，VS Code调试器界面现在进入了一个多会话模式，我们也能从调试窗口中看到<strong>Extention</strong>和<strong>Server</strong>的调用栈视图：</p><p><img src="https://raw.githubusercontent.com/Microsoft/vscode-docs/master/docs/extensions/images/example-debuggers/debug-extension-server.png" alt=""></p><p>现在我们可以调试2个插件了，同时模拟调试适配器。使用<strong>Extension + Server</strong>的启动配置文件可以更快到达这一步。我们在<a href="/extension-authoring/example-debug-adapter?id=%E5%8F%AF%E9%80%89%E6%96%B9%E6%A1%88%EF%BC%9A%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E8%B0%83%E8%AF%95%E6%8F%92%E4%BB%B6">下面</a>提供了一个更为简单的调试<strong>插件</strong>和<strong>调试适配器</strong>的方案。</p><p>那么回到正题，我们现在给<code>src/mockDebug.ts</code>的<code>launchRequest(...)</code>方法开头添加一个断点，最后在<em>启动配置</em>中添加<code>debugServer</code>和<code>4711</code>端口将mock debugger连接到调试适配服务器。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.2.0&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mock&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mock test&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${workspaceFolder}/readme.md&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;stopOnEntry&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;debugServer&quot;</span><span class="token operator">:</span> <span class="token number">4711</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你现在加载了这份调试配置，VS Code就不会将mock debug适配器作为分离进程启动，而是直接连接到已启动的服务器端口<code>4711</code>上，然后你就可以在<code>launchRequest</code>上打断点了。</p><p>在这个步骤之后，你就可以轻松地编辑，编译和调试Mock Debug项目了。</p>`,24),b=s("code",null,"src/mockDebug.ts",-1),q=s("code",null,"src/mockRuntime.ts",-1),h=s("em",null,"调试器",-1),y=s("em",null,"运行时",-1),f={href:"https://code.visualstudio.com/docs/extensionAPI/api-debugging",target:"_blank",rel:"noopener noreferrer"},_=e(`<h2 id="剖析调试插件的package-json" tabindex="-1"><a class="header-anchor" href="#剖析调试插件的package-json" aria-hidden="true">#</a> 剖析调试插件的package.json</h2><hr><p><code>package.json</code>文件除了提供调试器所需的调试适配器和调试插件的实现细节之外，这个文件还包括了各式各样和调试相关的<em>内容配置点</em>。</p><p>我们现在就来仔细看看Mock Debug的<code>package.json</code></p><p>就像每个VS Code插件一样，<code>package.json</code>声明了基本的插件属性如<strong>name</strong>，<strong>publisher</strong>，<strong>version</strong>。而<strong>categories</strong>帮助我们能更快地在插件市场找到它。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mock-debug&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;displayName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Mock Debug&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.24.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;publisher&quot;</span><span class="token operator">:</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Starter extension for developing debug adapters for VS Code.&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;...&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;engines&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;vscode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.17.0&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;node&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.9.0&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;icon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;images/mock-debug-icon.png&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;categories&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;Debuggers&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>

    <span class="token property">&quot;contributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;breakpoints&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span> <span class="token property">&quot;language&quot;</span><span class="token operator">:</span> <span class="token string">&quot;markdown&quot;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;debuggers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mock&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Mock Debug&quot;</span><span class="token punctuation">,</span>

            <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./out/mockDebug.js&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;runtime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>

            <span class="token property">&quot;configurationAttributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;launch&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;required&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;program&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                        <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
                            <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Absolute path to a text file.&quot;</span><span class="token punctuation">,</span>
                            <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${workspaceFolder}/\${command:AskForProgramName}&quot;</span>
                        <span class="token punctuation">}</span><span class="token punctuation">,</span>
                        <span class="token property">&quot;stopOnEntry&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span>
                            <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Automatically stop after launch.&quot;</span><span class="token punctuation">,</span>
                            <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>

            <span class="token property">&quot;initialConfigurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mock&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Ask for file name&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${workspaceFolder}/\${command:AskForProgramName}&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;stopOnEntry&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>

            <span class="token property">&quot;configurationSnippets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Mock Debug: Launch&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A new configuration for launching a mock debug program&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mock&quot;</span><span class="token punctuation">,</span>
                        <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>
                        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${2:Launch Program}&quot;</span><span class="token punctuation">,</span>
                        <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^\\&quot;\\\\\${workspaceFolder}/\${1:Program}\\&quot;&quot;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>

            <span class="token property">&quot;variables&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;AskForProgramName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;extension.mock-debug.getProgramName&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token property">&quot;activationEvents&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;onDebug&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;onCommand:extension.mock-debug.getProgramName&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们看看调试插件所需的**发布内容配置（contributes）**部分。</p><p>第一个是<strong>breakpoints</strong>内容配置点，它列出了支持设置断点的语言，没有这个配置点的话，我们就不能在Markdown文件里设置断点了。</p><p>第二个是<strong>debuggers</strong>部分，这里给出了一个调试器，也就是<strong>type</strong>描述的&quot;mock&quot;。用户可以在选择加载调试配置文件的时候看到这个type。可选的<strong>label</strong>属性作为type的别称最后会显示在界面上。</p><p>既然调试插件用了调试适配器，所以它的相对路径可以在<strong>program</strong>中定义。为了使插件自包含，应用必须在插件文件夹内。为了方便起见，我们把这个应用所在的文件夹命名为<code>out</code>和<code>bin</code>，不过你想用别的名字也随便。</p><p>因为让VS Code运行在不同的平台上，所以我们的调试适配程序也必须支持不同的平台，所以我们有了下列选项：</p><ol><li><p>如果程序是平台无关的，如：程序需要一个统一的运行时支持，那么你可以通过<strong>runtime</strong>指定，本项目就是采用了这个方法。到目前为止，VS Code支持<code>node</code>和<code>mono</code>运行时。</p></li><li><p>如果实现你的调试适配器需要执行在不同平台，那么<strong>program</strong>配置可以像下面这样指定：</p></li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;debuggers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gdb&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;windows&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./bin/gdbDebug.exe&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;osx&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./bin/gdbDebug.sh&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;linux&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./bin/gdbDebug.sh&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>组合上面的两种方式也是可行的。下面是一个Mono Debug适配器，只需要macOs和Linux，而不需要Windows支持。</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;debuggers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mono&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./bin/monoDebug.exe&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;osx&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;runtime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mono&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;linux&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;runtime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mono&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>configurationAttributes</strong>表示这个调试器是支持<code>launch.json</code>配置，开启之后它会校验<code>launch.json</code>。另外这个属性还会启用：编辑<em>启动配置</em>文件时的智能提示和悬浮帮助文本。</p><p><strong>initialConfigurations</strong>定义了<code>launch.json</code>的初始默认内容。以便于项目不包含<code>launch.json</code>文件时，用户打开调试或者按下调试侧边栏的齿轮按钮后仍能启动调试会话，VS Code会让用户选择一个调试环境，然后生成对应的<code>launch.json</code>：</p><p><img src="https://raw.githubusercontent.com/Microsoft/vscode-docs/master/docs/extensions/images/example-debuggers/debug-init-config.png" alt=""></p><p><strong>configurationSnippets</strong>定义了编辑<code>launch.json</code><em>启动配置</em>文件的配置补全。方便起见，给调试环境名称加上<code>label</code>前缀以便于补全下拉框出现时能快速地找到我们的目标。</p><p><strong>variables</strong>字段将&quot;variables&quot;绑定到了&quot;commands&quot;，用**\${command:Xxxx}**语法在<em>启动配置</em>中使用这些变量，调试会话启动后这些值会被替换掉。</p>`,20),x=s("code",null,"AskForProgramName",-1),D=s("code",null,"extension.mock-debug.getProgramName",-1),C={href:"https://github.com/Microsoft/vscode-mock-debug/blob/431857ca27e618e2e7164628ff41fa8cedd01bff/src/extension.ts#L33",target:"_blank",rel:"noopener noreferrer"},j=s("code",null,"src/extension.ts",-1),M=s("code",null,"showInputBox",-1),S=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>vscode<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">registerCommand</span><span class="token punctuation">(</span><span class="token string">&#39;extension.mock-debug.getProgramName&#39;</span><span class="token punctuation">,</span> config <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> vscode<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">showInputBox</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        placeHolder<span class="token operator">:</span> <span class="token string">&quot;Please enter the name of a markdown file in the workspace folder&quot;</span><span class="token punctuation">,</span>
        value<span class="token operator">:</span> <span class="token string">&quot;readme.md&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个变量可以用**\${command:AskForProgramName}**形式注入到任何<em>加载配置</em>允许字符串类型的地方。</p><h2 id="使用debugconfigurationprovider" tabindex="-1"><a class="header-anchor" href="#使用debugconfigurationprovider" aria-hidden="true">#</a> 使用DebugConfigurationProvider</h2><hr><p>如果<code>package.json</code>中的静态调试<em>发布配置内容</em>不够，那<code>DebugConfigurationProvider</code>就派上用场了，它能动态控制调试插件的下列内容：</p><ul><li>动态生成launch.json中的debug配置，例如：基于一些工作区可用的上下文信息。</li><li>启动新的调试会话前“解析”<em>加载配置</em>，比如根据工作区的一些信息填充默认值。</li><li>动态计算调试适配器的可执行路径或者其他命令行参数。</li></ul><p><code>src/extension.ts</code>中的<code>MockConfigurationProvider</code>实现了<code>resolveDebugConfiguration</code>，如果Markdown文件打开而启动调试会话后检测是否有launch.json文件存在。这是一个非常典型的用户场景，用户在编辑器内打开了文件，想要调试的时候却发现没有launch.json文件。</p><p><code>vscode.debug.registerDebugConfigurationProvider</code>是一个调试供应器（debug configuration provider）注册的特殊调试类型，一般出现在<code>activate</code>函数中。为了确保<code>DebugConfigurationProvider</code>尽早注册，插件必须在调试功能启动之前就激活，我们可以在<code>package.json</code>的<code>onDebug</code>事件中配置插件激活事件：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;activationEvents&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;onDebug&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个总的<code>onDebug</code>事件在调试功能一启动就会被调用。如果插件的启动开销不大（如：启动时不要花太多时间）那就会运行正常。如果调试插件的启动开销很大（如：启动一个语言服务器），那么<code>onDebug</code>激活事件就会对其他调试插件产生负面影响了，因为它只想尽早启动，而不会把其他类型的调试器考虑在内。</p><p>对于高开销调试插件的更好办法是用粒度更细的激活事件：</p><ul><li><code>onDebugInitialConfigurations</code>：在<code>DebugConfigurationProvider</code>的<code>provideDebugConfigurations</code>调用前触发。</li><li><code>onDebugResolve:type</code>：在<code>DebugConfigurationProvider</code>的<code>resolveDebugConfiguration</code>调用前触发。</li></ul><p>!&gt; <strong>首要准则</strong>：如果插件的开销不大，就用<code>onDebug</code>。如果插件的开销比较高，根据<code>DebugConfigurationProvider</code>是否调用<code>provideDebugConfigurations</code>或<code>resolveDebugConfiguration</code>，在对应的<code>onDebugInitialConfigurations</code>或者<code>onDebugResolve</code>中处理。</p><h2 id="发布你的调试适配器" tabindex="-1"><a class="header-anchor" href="#发布你的调试适配器" aria-hidden="true">#</a> 发布你的调试适配器</h2><hr><p>通过下面的步骤将你的调试适配器发布到市场上：</p>`,16),P=s("li",null,[n("更新"),s("code",null,"package.json"),n("中的发布配置内容表明你调试适配器的功能和目标")],-1),w={href:"https://github.com/Microsoft/vscode-docs/blob/master/docs/extensions/publish-extension.md",target:"_blank",rel:"noopener noreferrer"},E=e('<h2 id="可选方案-开发一个调试插件" tabindex="-1"><a class="header-anchor" href="#可选方案-开发一个调试插件" aria-hidden="true">#</a> 可选方案：开发一个调试插件</h2><hr><p>开发调试插件一般既包含插件，也包含<em>调试器</em>和<em>调试适配器</em>这两个平行session。就如上面解释的，VS Code对一点支持非常友好，不过如果想要开发得更容易的话，还是把插件和调试适配器放在一个程序里，用一个会话启动更方便些。</p><p>当你在使用Typescript/Javascript实现调试适配器的时候会更容易。</p><p>基本的思路是在<code>DebugConfigurationProvider</code>的<code>resolveDebugConfiguration</code>方法中拦截调试会话的加载，然后对<em>连接请求</em>就行侦听，对每一个请求创建新的调试适配器会话。为了确保VS Code使用<em>连接请求</em>（而不是总是加载新的调试适配器），可以修改<em>加载配置</em>，加上<code>debugServer</code>。</p>',5),A=s("strong",null,"Mock Debug",-1),V={href:"https://github.com/Microsoft/vscode-mock-debug/blob/042d19a27a8e3a08f27a24110506b53fbecc75ce/src/extension.ts#L61-L71",target:"_blank",rel:"noopener noreferrer"},F=s("p",null,[n("通过将编译时间标识"),s("code",null,"EMBED_DEBUG_ADAPTER"),n("设置为true启用这个特性。现在如果你用"),s("strong",null,"F5"),n("启动调试，你不仅仅可以插件中打断点了，调试器适配器里也同样可以。")],-1);function B(N,I){const a=i("ExternalLinkIcon");return p(),c("div",null,[u,s("p",null,[n("VS Code自带Node.js的调试插件。你也可以在"),s("a",l,[n("插件市场"),o(a)]),n("找到更多调试插件，本篇教程接下来会告诉你怎么开发一个调试器插件。")]),d,k,g,s("p",null,[n("不过在深入开发模拟调试器之前，我们先安装一个插件市场上的"),s("a",m,[n("预编译版本"),o(a)]),n("来玩玩：")]),v,s("p",null,[n("但是真正的工作现在才开始：你需要把"),b,n("和"),q,n('中的关于"mock"的实现替换成真正和'),h,n("或者"),y,n("通信的代码，你首先可能需要理解"),s("a",f,[n("调试适配器协议"),o(a)]),n("。")]),_,s("p",null,[n("命令是在插件中实现的，它可既可以提供简单的无界面实现，也可以通过插件API提供界面中的复杂功能点。Mock Debug将"),x,n("变量绑定到"),D,n("命令上。这个命令的"),s("a",C,[n("实现"),o(a)]),n("在"),j,n("中，让用户用"),M,n("输入程序的名称。")]),S,s("ul",null,[P,s("li",null,[n("根据"),s("a",w,[n("分享插件"),o(a)]),n("部分把你的插件上传到市场上")])]),E,s("p",null,[n("这是几行"),A,n("项目"),s("a",V,[n("实现的这个方法的代码"),o(a)])]),F])}const R=t(r,[["render",B],["__file","example-debug-adapter.html.vue"]]);export{R as default};
