import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as u,a as s,b as n,d as a,w as e,e as o,r as c}from"./app.ed9f300c.js";const r={},d=s("h1",{id:"示例-word-count",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#示例-word-count","aria-hidden":"true"},"#"),n(" 示例 Word Count")],-1),k=s("p",null,"本篇示例将会告诉你，如何制作一个Markdown辅助编辑工具。开始之前，我们先了解一下本篇你将接触到的插件功能：当编辑Makrdown文件时状态栏会显示编辑区字数，如果你编辑文档或者打开了另一个md文件字数也会随之改变。",-1),v=s("p",null,[s("img",{src:"https://raw.githubusercontent.com/Microsoft/vscode-docs/master/docs/extensions/images/example-word-count/wordcountevent2.gif",alt:""})],-1),m={href:"https://github.com/microsoft/vscode-wordcount",target:"_blank",rel:"noopener noreferrer"},b=o('<h2 id="本节要点" tabindex="-1"><a class="header-anchor" href="#本节要点" aria-hidden="true">#</a> 本节要点</h2><p>本章将通过三个部分让你了解vscode有关的概念：</p><ul><li><a href="#%E6%9B%B4%E6%96%B0%E7%8A%B6%E6%80%81%E6%A0%8F">更新状态栏</a> - 在<em>状态栏</em>中显示自定义文本</li><li><a href="#%E8%AE%A2%E9%98%85%E4%BA%8B%E4%BB%B6">订阅事件</a> - 通过编辑器事件更新<em>状态栏</em></li><li><a href="#%E9%87%8A%E6%94%BE%E6%8F%92%E4%BB%B6%E8%B5%84%E6%BA%90">释放插件资源</a> - 比如：释放事件订阅和UI回调函数</li></ul><p>如果你还不熟悉生成插件的步骤，请先了解之前的章节：<a href="/extension-authoring/extension-generator?id=%E8%BF%90%E8%A1%8Cyo-code%F0%9F%98%8E">生成插件-运行Yo</a></p>',4),h=s("code",null,"F5",-1),g=s("code",null,"Cmd + R",-1),w=o(`<h2 id="更新状态栏" tabindex="-1"><a class="header-anchor" href="#更新状态栏" aria-hidden="true">#</a> 更新状态栏</h2><hr><p>将下列代码更新到<code>extension.ts</code>中。这段代码声明了一个<code>WordCounter</code>类用于控制文本计数并显示到状态栏中，我们依然用了&quot;Hello World&quot;这个命令来执行<code>updateWordCount</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// &#39;vscode&#39;模块包含了VS Code扩展性API</span>
<span class="token comment">// 导入你要用到的扩展类</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
window<span class="token punctuation">,</span> 
commands<span class="token punctuation">,</span> 
Disposable<span class="token punctuation">,</span> 
ExtensionContext<span class="token punctuation">,</span> 
StatusBarAlignment<span class="token punctuation">,</span> 
StatusBarItem<span class="token punctuation">,</span> TextDocument
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vscode&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 当你的插件激活时，会调用这个方法。&#39;activation&#39;是package.json中定义好的activation events</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">activate</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ExtensionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 用console对象输出诊断和错误信息(console.log / console.error).</span>
    <span class="token comment">// 下面这行代码，只会在你的插件激活时执行一次</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Congratulations, your extension &quot;WordCount&quot; is now active!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 新建一个字数计数器</span>
    <span class="token keyword">let</span> wordCounter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WordCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> disposable <span class="token operator">=</span> commands<span class="token punctuation">.</span><span class="token function">registerCommand</span><span class="token punctuation">(</span><span class="token string">&#39;extension.sayHello&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        wordCounter<span class="token punctuation">.</span><span class="token function">updateWordCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 把disposables添加到一个列表中，以便关闭插件时释放资源</span>
    context<span class="token punctuation">.</span>subscriptions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>wordCounter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span>subscriptions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>disposable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">WordCounter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> _statusBarItem<span class="token operator">:</span> StatusBarItem <span class="token operator">=</span>  window<span class="token punctuation">.</span><span class="token function">createStatusBarItem</span><span class="token punctuation">(</span>StatusBarAlignment<span class="token punctuation">.</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">updateWordCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 获取当前编辑器</span>
        <span class="token keyword">let</span> editor <span class="token operator">=</span> window<span class="token punctuation">.</span>activeTextEditor<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>editor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_statusBarItem<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> doc <span class="token operator">=</span> editor<span class="token punctuation">.</span>document<span class="token punctuation">;</span>
        
        <span class="token comment">// 只对markdown文件生效</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>doc<span class="token punctuation">.</span>languageId <span class="token operator">===</span> <span class="token string">&quot;markdown&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> wordCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getWordCount</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 更新状态栏</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_statusBarItem<span class="token punctuation">.</span>text <span class="token operator">=</span> wordCount <span class="token operator">!==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>wordCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> Words</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;1 Word&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_statusBarItem<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_statusBarItem<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">_getWordCount</span><span class="token punctuation">(</span>doc<span class="token operator">:</span> TextDocument<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> docContent <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 去除多余空格</span>
        docContent <span class="token operator">=</span> docContent<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(&lt; ([^&gt;]+)&lt;)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        docContent <span class="token operator">=</span> docContent<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s\\s*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> wordCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>docContent <span class="token operator">!==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            wordCount <span class="token operator">=</span> docContent<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> wordCount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_statusBarItem<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在让我们试试更新插件吧。</p><p>在VS Code中（非开发主机窗口）按下<code>F5</code>或者直接按重启按钮。假设你已经打开了一个markdown文件，然后和Hello-World示例一样，我们在<em>命令面板</em>中输入<code>Hello World</code>启动插件。</p><p><img src="https://github.com/Microsoft/vscode-docs/raw/master/docs/extensions/images/example-word-count/wordcount2.png" alt=""></p><p>很棒，我们接下来做更cool的事情——实时更新字数。</p><h2 id="订阅事件" tabindex="-1"><a class="header-anchor" href="#订阅事件" aria-hidden="true">#</a> 订阅事件</h2><hr><p>我们先来看看事件中的类方法：</p><ul><li><code>onDidChangeTextEditorSelection</code> - 鼠标位置变动时触发。</li><li><code>onDidChangeActiveTextEditor</code> - 激活编辑器（打开的编辑器）切换的时候触发。</li></ul><p>为了实现这个目标，我们给<code>extension.ts</code>添加一个新类，订阅上述事件然后让<code>WordCounter</code>更新字数。</p><p>?&gt;在实现时，你需要注意我们是如何把**消息订阅( subscription )<strong>转换为</strong>释放器( Disposables )**来管理的，它将监听并释放自己。</p><p>根据下列代码，将<code>WordCounterController</code>类添加到<code>extension.ts</code>文件底部。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">WordCounterController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> _wordCounter<span class="token operator">:</span> WordCounter<span class="token punctuation">;</span>
    <span class="token keyword">private</span> _disposable<span class="token operator">:</span> Disposable<span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span>wordCounter<span class="token operator">:</span> WordCounter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_wordCounter <span class="token operator">=</span> wordCounter<span class="token punctuation">;</span>

        <span class="token comment">// 订阅 文本选区变更 和 编辑器激活事件</span>
        <span class="token keyword">let</span> subscriptions<span class="token operator">:</span> Disposable<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        window<span class="token punctuation">.</span><span class="token function">onDidChangeTextEditorSelection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onEvent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> subscriptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
        window<span class="token punctuation">.</span><span class="token function">onDidChangeActiveTextEditor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onEvent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> subscriptions<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 为当前文件更新计数器</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_wordCounter<span class="token punctuation">.</span><span class="token function">updateWordCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 把两个事件订阅器整合成一个临时容器</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_disposable <span class="token operator">=</span> Disposable<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token operator">...</span>subscriptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_disposable<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token function">_onEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_wordCounter<span class="token punctuation">.</span><span class="token function">updateWordCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们不希望通过执行命令才启动词汇计数插件，而是markdown文件一打开插件就应该启动。</p><p>首先，我们将<code>active</code>函数替换成这样：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 输出诊断信息</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Congratulations, your extension &quot;WordCount&quot; is now active!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 新建一个词汇计数器</span>
<span class="token keyword">let</span> wordCounter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WordCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WordCounterController</span><span class="token punctuation">(</span>wordCounter<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 插件关闭时，释放器会自动释放</span>
context<span class="token punctuation">.</span>subscriptions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span>subscriptions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>wordCounter<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们必须保证<code>Markdown</code>文件打开时才激活。在之前的示例中，我们通过<code>extension.sayHello</code>命令激活插件，而我们现在用不到了，删除<code>package.json</code>文件中原来的<code>contributes</code>键。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;contributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;commands&quot;</span><span class="token operator">:</span>
        <span class="token punctuation">[</span><span class="token punctuation">{</span>
            <span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;extension.sayHello&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hello World&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用下面的代码替换掉：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;activationEvents&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;onLanguage:markdown&quot;</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为<a href="">onLanguage: \${language}</a>配置一个语言，在这里是&quot;markdown&quot; 。这样一来打开这一类文件就会触发这个事件了。</p><p>重启插件(按下<code>Cmd + R</code>或者重启按钮)，然后新建一个<code>.md</code>文件，你应该能看到下图的效果。</p><p><img src="https://raw.githubusercontent.com/Microsoft/vscode-docs/master/docs/extensions/images/example-word-count/wordcountevent2.gif" alt=""></p><p>如果你在<code>active</code>函数上打了断点，你应该能看到markdown文件被打开时只触发了一次。<code>WordCountController</code>构造器运行之后，订阅了编辑器事件，这样我们整个插件就正常运行了。</p><h2 id="自定义状态栏" tabindex="-1"><a class="header-anchor" href="#自定义状态栏" aria-hidden="true">#</a> 自定义状态栏</h2><hr><p>VS Code允许你定制状态栏的颜色、图标、提示文本等额外样式。如果你不清楚<strong>状态栏</strong>相关的API，你可以查看该类型的代码提示，你也可以通过<code>vscode.d.ts</code>VS Code扩展性API查看，这个文件就在你生成的项目文件夹里，在编辑器中打开<code>node_modules\\vscode\\vscode.d.ts</code>，你能看到完整的扩展性 API和注释。</p><p><img src="https://raw.githubusercontent.com/Microsoft/vscode-docs/master/docs/extensions/images/example-word-count/vscode-d-ts.png" alt=""></p><p>更新StatusBarItem接口的代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 更新状态栏</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_statusBarItem<span class="token punctuation">.</span>text <span class="token operator">=</span> wordCount <span class="token operator">!==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">$(pencil) </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>wordCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> Words</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;$(pencil) 1 Word&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_statusBarItem<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33),x={href:"https://octicons.github.com/",target:"_blank",rel:"noopener noreferrer"},f=s("code",null,"pencil",-1),C=o(`<p><img src="https://raw.githubusercontent.com/Microsoft/vscode-docs/master/docs/extensions/images/example-word-count/wordcount-pencil.png" alt=""></p><h2 id="释放插件资源" tabindex="-1"><a class="header-anchor" href="#释放插件资源" aria-hidden="true">#</a> 释放插件资源</h2><hr><p>现在，我们来深入了解一下VS Code是怎么通过<a href="/extensibility-reference/principles-patterns?id=disposables%EF%BC%88%E9%87%8A%E6%94%BE%E5%99%A8%EF%BC%89">释放器（Disposables）</a>控制资源的。</p><p>当一个插件被激活，它会传入一个<code>ExtensionContext</code>对象， 这个对象有一个用于订阅释放器（Disposable）的<code>subscriptions</code>方法。插件将=释放器添加到这个订阅列表中，VS Code则会在插件关闭的时候释放这些对象。</p><p>很多能生成工作区（workspace）或者UI对象的VS Code API（比如：<code>registerCommand</code>）会自动返回一个释放器，我们可以直接调用他们的dispose方法释放UI元素。</p><p>事件则有所不同，比如<code>onDid*</code>这类事件订阅器会返回一个释放器。插件通过释放事件的释放器（Disposable）来取消已经订阅的事件。在我们的例子里，<code>WordCountController</code>把事件订阅的释放器直接保存到自己的释放器列表中，在插件关闭时释放。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 订阅选区变动事件和编辑器激活事件</span>
<span class="token keyword">let</span> subscriptions<span class="token operator">:</span> Disposable<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">onDidChangeTextEditorSelection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onEvent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> subscriptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">onDidChangeActiveTextEditor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onEvent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> subscriptions<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 把两个事件订阅器生成一个组合的临时容器</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_disposable <span class="token operator">=</span> Disposable<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token operator">...</span>subscriptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在本地安装你的插件" tabindex="-1"><a class="header-anchor" href="#在本地安装你的插件" aria-hidden="true">#</a> 在本地安装你的插件</h2><hr><p>到目前为止，你的插件都还跑在插件开发模式中，要想让你的插件在正常的VS Code中运行起来将你的插件复制到<code>.vscode/extensions</code>目录下。</p><h2 id="发布插件" tabindex="-1"><a class="header-anchor" href="#发布插件" aria-hidden="true">#</a> 发布插件</h2><hr>`,13),y=s("h2",{id:"下一步",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#下一步","aria-hidden":"true"},"#"),n(" 下一步")],-1);function _(E,B){const t=c("RouterLink"),p=c("ExternalLinkIcon");return l(),u("div",null,[d,s("p",null,[n("如果你还没有接触过"),a(t,{to:"/extension-authoring/example-hello-world.html"},{default:e(()=>[n("你的第一个插件")]),_:1}),n("章节，我们建议你先去了解一下。")]),k,v,s("p",null,[n("?> 小贴士：如果你碰到了什么问题，可以在这里"),s("a",m,[n("下载完整的项目"),a(p)]),n("进行调试")]),b,s("p",null,[n("就像你之前在"),a(t,{to:"/extension-authoring/example-hello-world.html"},{default:e(()=>[n("示例：Hello-world")]),_:1}),n("中做的一样，使用"),h,n("或者"),g,n("运行该项目。")]),w,s("p",null,[n("这样就在计数左边显示了一个"),s("a",x,[n("Github Oction"),a(p)]),n("的"),f,n("图标")]),C,s("p",null,[n("参阅"),a(t,{to:"/extension-authoring/publish-extension.html"},{default:e(()=>[n("分享插件")]),_:1})]),y,s("p",null,[a(t,{to:"/extension-authoring/extension-generator.html"},{default:e(()=>[n("插件生成器")]),_:1}),n(" - 学习Yo Code插件生成器的更多选项")]),s("p",null,[a(t,{to:"/extensibility-reference/overview.html"},{default:e(()=>[n("Extenstion API")]),_:1}),n(" - 插件API概览")]),s("p",null,[a(t,{to:"/extension-authoring/publish-extension.html"},{default:e(()=>[n("发布插件")]),_:1}),n(" - 学会如何在应用市场发布一个公共插件")]),s("p",null,[a(t,{to:"/extensibility-reference/vscode-api.html"},{default:e(()=>[n("编辑器 API")]),_:1}),n(" - 学习更多有关文档, 文档编辑器和编辑的内容")]),s("p",null,[a(t,{to:"/extension-authoring/samples.html"},{default:e(()=>[n("更多插件示例")]),_:1}),n(" - 在插件示例列表学习其他用法")])])}const I=i(r,[["render",_],["__file","example-word-count.html.vue"]]);export{I as default};
