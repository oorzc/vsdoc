import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as i,a as n,b as e,d as a,e as o,r as p}from"./app.ed9f300c.js";const d={},l=n("h1",{id:"vs-code-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vs-code-api","aria-hidden":"true"},"#"),e(" VS Code API")],-1),r=n("p",null,[n("strong",null,"VS Code API"),e("是VS Code提供给插件使用的一系列Javascript API。")],-1),u={href:"https://code.visualstudio.com/api/references/vscode-api",target:"_blank",rel:"noopener noreferrer"},h=o(`<h2 id="api模式" tabindex="-1"><a class="header-anchor" href="#api模式" aria-hidden="true">#</a> API模式</h2><hr><p>以下将介绍我们在VS Code中经常使用的API模式。</p><h4 id="promises-异步" tabindex="-1"><a class="header-anchor" href="#promises-异步" aria-hidden="true">#</a> Promises（异步）</h4><p>VS Code API完全采用了promise的实现。对于插件来说允许任何promise形式的返回格式，如ES6，WinJS，A+等。</p><p>一个promise库需要它的API使用<code>Thenable</code>类型来表达，<code>Thenable</code>类型代表了一种通用特性的实现——then方法。</p><p>大多数时候promise是一个可选项，VS Code调用插件之后，它能直接处理正常的返回结果也能处理<code>Thenable</code>的结果类型。当promise是可选的API返回结果时，API会在返回类型中用<code>Thenable</code>表示。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">provideNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> Thenable<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="cancellation-tokens-取消式令牌" tabindex="-1"><a class="header-anchor" href="#cancellation-tokens-取消式令牌" aria-hidden="true">#</a> Cancellation Tokens（取消式令牌）</h4><p>有些事件可能从不稳定的变化状态开始，而随着状态变化这一事件最后肯能被取消了。比如：IntelliSense（智能补全）被触发后，用户持续输入的行为使得这一操作最终被取消了。</p><p>API也为这种行为提供了解决方案，你可以通过<code>CancellationToken</code>检查取消的状态（<code>isCancellationRequested</code>）或者当<em>取消</em>发生时得到通知（<code>onCancellationRequested</code>）。取消式令牌通常是API函数的最后一个（可选）参数。</p><h4 id="disposables-释放器" tabindex="-1"><a class="header-anchor" href="#disposables-释放器" aria-hidden="true">#</a> Disposables（释放器）</h4>`,12),k={href:"https://en.wikipedia.org/wiki/Dispose_pattern",target:"_blank",rel:"noopener noreferrer"},v=o(`<p>例如：<code>setStatusBarMessage(value: string)</code>事件返回一个<code>Disposable</code>对象，这个对象最终调用<code>dispose</code>方法移除message。</p><h4 id="events-事件" tabindex="-1"><a class="header-anchor" href="#events-事件" aria-hidden="true">#</a> Events（事件）</h4><p>事件在API中被暴露为函数，当你订阅一个事件侦听器时绑定。事件侦听器调用后会返回一个<code>Disposable</code>，它会在dispose触发后，移除事件侦听器。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> <span class="token function-variable function">listener</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;It happened&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 开始侦听</span>
<span class="token keyword">var</span> subscription <span class="token operator">=</span> fsWatcher<span class="token punctuation">.</span><span class="token function">onDidDelete</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 你的代码</span>

subscription<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 停止侦听</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事件的命名规则遵循<code>on[Will | Did] 动词 + 名词</code>的形式。通过<code>onWill</code>表示将要发生，<code>onDid</code>表示已经发生，<code>动词</code>表示行为，<code>名词</code>指代上下文或目标。</p><p>举个栗子：<code>window.onDidChangeActiveTextEditor</code>中，激活的编辑器（ActiveTextEditor：<code>名词</code>）变动（change：<code>动词</code>）后（<code>onDid</code>）会触发事件。</p><h4 id="严格null检查" tabindex="-1"><a class="header-anchor" href="#严格null检查" aria-hidden="true">#</a> 严格null检查</h4>`,7),m=n("code",null,"undefined",-1),b=n("code",null,"null",-1),_={href:"https://github.com/Microsoft/TypeScript/pull/7140",target:"_blank",rel:"noopener noreferrer"};function f(g,I){const s=p("ExternalLinkIcon");return c(),i("div",null,[l,r,n("p",null,[e("!> 注意：VS Code API 变动较快，翻译版本的参与人员和精力有限无法保证实时跟进，有需要的小伙伴请自行参考"),n("a",u,[e("官方文档"),a(s)]),e("，其中包含了完整而且是最新的VS Code API列表。")]),h,n("p",null,[e("VS Code API使用了"),n("a",k,[e("释放器模式"),a(s)]),e("，这个模式被用于事件侦听，命令，UI交互和各类语言配置上。")]),v,n("p",null,[e("VS CodeAPI使用"),m,e("和"),b,e("的Typescript类型，同样也支持"),n("a",_,[e("严格null检查"),a(s)]),e("。")])])}const P=t(d,[["render",f],["__file","01.vscode-api.html.vue"]]);export{P as default};
