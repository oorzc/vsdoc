import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as o,a as s,b as n,d as c,e as p,r as d}from"./app.ed9f300c.js";const i={},r=p(`<h1 id="语义高亮指南" tabindex="-1"><a class="header-anchor" href="#语义高亮指南" aria-hidden="true">#</a> 语义高亮指南</h1><hr><p>语义高亮是对<a href="/language-extensions/syntax-highlight-guide">语法高亮</a>的一种补充。VS Code 的主要分词引擎是 TextMate 语法器。TextMate 使用正则表达式，并根据词法规则将文件分割成一系列的符号。</p><p>语言服务器将项目上下文的符号进行解析，使得语义服务器也能提供<strong>符号</strong>的相关信息。主题可以选择性地使用语义符号来提升语法高亮的体验。编辑器使用语义高亮优先于语法高亮。</p><p>下面是一个语义高亮的例子：</p><p>没有语义高亮：</p><p><img src="https://code.visualstudio.com/assets/api/language-extensions/semantic-highlighting/no-semantic-highlighting.png" alt="no-semantic-highlighting"></p><p>有语义高亮：</p><p><img src="https://code.visualstudio.com/assets/api/language-extensions/semantic-highlighting/with-semantic-highlighting.png" alt="with-semantic-highlighting"></p><p>注意下列颜色差异：</p><ul><li>第 10 行：<code>languageMode</code> 被着色为参数</li><li>第 11 行：<code>Range</code> 和 <code>Position</code> 被着色为“类”，<code>document</code> 被着色为参数</li><li>第 13 行：<code>getFoldingRanges</code> 着色为函数</li></ul><h2 id="语义分词供应器函数" tabindex="-1"><a class="header-anchor" href="#语义分词供应器函数" aria-hidden="true">#</a> 语义分词供应器函数</h2><hr><p>要实现语义高亮，插件需要使用文档的语言类型或文件名注册一个 <code>semantic token provider</code>。编辑器发现需要进行语义分词时，会向该供应器发起请求。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> tokenTypes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;interface&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;enum&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;variable&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> tokenModifiers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;declaration&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;documentation&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> legend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token function">SemanticTokensLegend</span><span class="token punctuation">(</span>tokenTypes<span class="token punctuation">,</span> tokenModifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> provider<span class="token operator">:</span> vscode<span class="token punctuation">.</span>DocumentSemanticTokensProvider <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">provideDocumentSemanticTokens</span><span class="token punctuation">(</span>
    document<span class="token operator">:</span> vscode<span class="token punctuation">.</span>TextDocument
  <span class="token punctuation">)</span><span class="token operator">:</span> vscode<span class="token punctuation">.</span>ProviderResult<span class="token operator">&lt;</span>vscode<span class="token punctuation">.</span>SemanticTokens<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 分析文档，并返回语义符号</span>

    <span class="token keyword">const</span> tokensBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token function">SemanticTokensBuilder</span><span class="token punctuation">(</span>legend<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 第一行的1-5个词，是类型声明</span>
    tokensBuilder<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token function">Position</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token function">Position</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token string">&#39;declaration&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> tokensBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> selector <span class="token operator">=</span> <span class="token punctuation">{</span> language<span class="token operator">:</span> <span class="token string">&#39;java&#39;</span><span class="token punctuation">,</span> scheme<span class="token operator">:</span> <span class="token string">&#39;file&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 为所有本地的 Java 文档注册</span>

vscode<span class="token punctuation">.</span>languages<span class="token punctuation">.</span><span class="token function">registerDocumentSemanticTokensProvider</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> provider<span class="token punctuation">,</span> legend<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>语义分词供应器函数 API 为插件实现提供了两种方式：</p><ol><li><code>DocumentSemanticTokensProvider</code> - 将整个文档作为输入内容 <ul><li><code>provideDocumentSemanticTokens</code> - 为文档提供所有<strong>符号</strong></li><li><code>provideDocumentSemanticTokensEdits</code> - 对上次响应提供文档的所有<strong>符号</strong></li></ul></li><li><code>DocumentRangeSemanticTokensProvider</code> - 只作用于局部范围 <ul><li><code>provideDocumentRangeSemanticTokens</code> - 为局部文档提供所有<strong>符号</strong></li></ul></li></ol><p>每个被供应器函数返回的<strong>符号</strong>都会含有分类信息，分类信息中包含了符号的类型、修改的符号数量、符号的具体语言等。这个信息和 <a href="/language-extensions/syntax-highlight-guide">语法高亮</a> 中的 TextMate 作用域生成的信息很像，不过它有自己专属的更干净的分类系统。</p><p>就如上例所示，这个供应器命名了类型和具体修改，这些东西随后就会被<code>SemanticTokensLegend</code>使用，<code>provide</code> api 将类型和具体修改作为下标返回给 legend。</p><h2 id="语义分词种类" tabindex="-1"><a class="header-anchor" href="#语义分词种类" aria-hidden="true">#</a> 语义分词种类</h2><hr><p>下面是一些VS Code 预定义的标准<strong>语义符号类型</strong>和<strong>语义符号修饰器</strong></p><p>标准类型和修饰器覆盖了很多语言中常见的概念，虽然很多语言都有自己的类型和修饰器术语，但是有了标准分类之后，主题开发者也能够根据这套标准实现跨语言的主题了。</p><p>标准语义符号类型：</p><table><thead><tr><th>Id</th><th>描述</th></tr></thead><tbody><tr><td><code>namespace</code></td><td>声明或引用了一个命名空间、模块或包</td></tr><tr><td><code>class</code></td><td>声明或引用了一个“类”类型</td></tr><tr><td><code>enum</code></td><td>声明或引用了一个枚举类型</td></tr><tr><td><code>interface</code></td><td>声明或引用了一个接口类型</td></tr><tr><td><code>struct</code></td><td>声明或引用了一个结构类型</td></tr><tr><td><code>typeParameter</code></td><td>声明或引用了一个类型参数</td></tr><tr><td><code>type</code></td><td>声明或引用了一个未被上述类型提及的其他类型</td></tr><tr><td><code>parameter</code></td><td>声明或引用了一个函数或方法的参数</td></tr><tr><td><code>variable</code></td><td>声明或引用了一个本地或全局变量</td></tr><tr><td><code>property</code></td><td>声明或引用了一个成员属性，成员域或成员变量</td></tr><tr><td><code>enumMember</code></td><td>声明或引用了一个可枚举的属性、常量或成员</td></tr><tr><td><code>event</code></td><td>声明或引用了一个可枚举的属性</td></tr><tr><td><code>function</code></td><td>声明或引用了一个函数</td></tr><tr><td><code>method</code></td><td>声明或引用了一个函数或方法</td></tr><tr><td><code>macro</code></td><td>声明或引用了一个宏</td></tr><tr><td><code>label</code></td><td>声明或引用了一个标签</td></tr><tr><td><code>comment</code></td><td>表示注释</td></tr><tr><td><code>string</code></td><td>表示字符串字面量</td></tr><tr><td><code>keyword</code></td><td>表示语言关键字</td></tr><tr><td><code>number</code></td><td>表示数字字面量</td></tr><tr><td><code>regexp</code></td><td>表示正则表达式字面量</td></tr><tr><td><code>operator</code></td><td>表示操作符</td></tr></tbody></table><p>标准语义符号修饰符：</p><table><thead><tr><th>Id</th><th>描述</th></tr></thead><tbody><tr><td><code>declaration</code></td><td>符号的声明</td></tr><tr><td><code>definition</code></td><td>符号的定义，比如文件头</td></tr><tr><td><code>readonly</code></td><td>只读变量或成员域，或称常量</td></tr><tr><td><code>static</code></td><td>类成员中的静态成员对象</td></tr><tr><td><code>deprecated</code></td><td>表示不再使用的符号</td></tr><tr><td><code>abstract</code></td><td>表示类型或成员方法是抽象的</td></tr><tr><td><code>async</code></td><td>被标记为异步的函数</td></tr><tr><td><code>modification</code></td><td>被引用变量的原始赋值位置</td></tr><tr><td><code>documentation</code></td><td>符号表示文档的位置</td></tr><tr><td><code>defaultLibrary</code></td><td>符号表示标准库</td></tr></tbody></table><p>必要之时，插件也可以定义新的类型和修饰符，或者通过<code>semanticTokenTypes</code> 和 <code>semanticTokenModifiers</code> 配置点创建现有类型的子类型。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;contributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;semanticTokenTypes&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;templateType&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;superType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A template type.&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;semanticTokenModifiers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;native&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Annotates a symbol that is implemented natively&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>已配置的类型，可以声明它的父级类型，并继承其所有样式规则。</p><h2 id="主题化" tabindex="-1"><a class="header-anchor" href="#主题化" aria-hidden="true">#</a> 主题化</h2><hr><p>主题化是指将颜色和样式应用到 <strong>符号</strong> 的过程。色彩主题确定了主题化的规则，但是用户也可以通过用户设置来自定义主题规则。</p><p>使用 <code>semanticHighlighting</code> 时，色彩主题可以告诉编辑器是否展示<strong>语义符号</strong>。</p><p>如果启用的话，语义符号会优先于<code>semanticTokenColors</code>定义的语义符号规则使用：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;semanticTokenColors&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;variable.readonly:java&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#ff0000&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>variable.readonly:java</code>被称为选择器，它的格式是<code>(*|tokenType)(.tokenModifier)*(:tokenLanguage)?</code></p><p>这是一个样式选择器的例子：</p><ul><li><code>&quot;*.declaration&quot;: { &quot;fontStyle&quot;: &quot;bold&quot; }</code> : 所有声明都标记为粗体</li><li><code>&quot;class:java&quot;: { &quot;foreground&quot;: &quot;#00ff00&quot; &quot;fontStyle&quot;: &quot;bold&quot; }</code> ：java 中的类</li></ul><p>如果没有匹配到任何规则，VS Code 会使用 <a href="#%E8%AF%AD%E4%B9%89%E5%88%86%E8%AF%8D%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%98%A0%E5%B0%84">语义分词作用域映射</a> 将当前语义符号解析为 TextMate 的作用域。然后这个作用域会根据TextMate 主题规则中的 <code>tokenColors</code> 进行匹配。</p><h2 id="语义分词作用域映射" tabindex="-1"><a class="header-anchor" href="#语义分词作用域映射" aria-hidden="true">#</a> 语义分词作用域映射</h2><hr><p>为了使语义高亮在没有任何定义语义规则的主题中能够降级使用，VS Code 维护了一个映射表，将语义符号选择器映射到 TextMate 作用域。</p><table><thead><tr><th>语义符号选择器</th><th>降级 TextMate Scope</th></tr></thead><tbody><tr><td><code>namespace</code></td><td><code>entity.name.namespace</code></td></tr><tr><td><code>type</code></td><td><code>entity.name.type</code></td></tr><tr><td><code>type.defaultLibrary</code></td><td><code>support.type</code></td></tr><tr><td><code>struct</code></td><td><code>storage.type.struct</code></td></tr><tr><td><code>class</code></td><td><code>entity.name.type.class</code></td></tr><tr><td><code>class.defaultLibrary</code></td><td><code>support.class</code></td></tr><tr><td><code>interface</code></td><td><code>entity.name.type.interface</code></td></tr><tr><td><code>enum</code></td><td><code>entity.name.type.enum</code></td></tr><tr><td><code>function</code></td><td><code>entity.name.function</code></td></tr><tr><td><code>function.defaultLibrary</code></td><td><code>support.function</code></td></tr><tr><td><code>method</code></td><td><code>entity.name.function.member</code></td></tr><tr><td><code>macro</code></td><td><code>entity.name.function.macro</code></td></tr><tr><td><code>variable</code></td><td><code>variable.other.readwrite</code> , <code>entity.name.variable</code></td></tr><tr><td><code>variable.readonly</code></td><td><code>variable.other.constant</code></td></tr><tr><td><code>variable.readonly.defaultLibrary</code></td><td><code>support.constant</code></td></tr><tr><td><code>parameter</code></td><td><code>variable.parameter</code></td></tr><tr><td><code>property</code></td><td><code>variable.other.property</code></td></tr><tr><td><code>property.readonly</code></td><td><code>variable.other.constant.property</code></td></tr><tr><td><code>enumMember</code></td><td><code>variable.other.enummember</code></td></tr><tr><td><code>event</code></td><td><code>variable.other.event</code></td></tr></tbody></table><p>这份表可通过<code>semanticTokenScopes</code>配置点进行扩展。</p><p>我们来看两个例子</p><ul><li>当主题未定义语义符号的主题规则时，插件定义了自定义的符号类型和符号修饰器给 TextMate 作用域作为降级方案。</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;contributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;semanticTokenScopes&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;scopes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;templateType&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;entity.name.type.template&quot;</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>TextMate 的供应器函数可以添加特定语言作用域，这样主题就可以针对特对语言实现具体的主题规则。</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;contributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;semanticTokenScopes&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;language&quot;</span><span class="token operator">:</span> <span class="token string">&quot;typescript&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;scopes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;property.readonly&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;variable.other.constant.property.ts&quot;</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="试试看" tabindex="-1"><a class="header-anchor" href="#试试看" aria-hidden="true">#</a> 试试看</h2><hr>`,52),l={href:"https://github.com/microsoft/vscode-extension-samples/tree/master/semantic-tokens-sample",target:"_blank",rel:"noopener noreferrer"},u=s("p",null,[s("a",{href:"/language-extensions/syntax-highlight-guide#%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%A3%80%E6%9F%A5%E5%99%A8"},"作用域检查器"),n(" 可以帮你查看一份源文件中展示了哪些语义符号，以及他们应用了什么规则。想要看到语义符号，你可以打开一个 TyepScript 文件，然后使用内置主题（比如 Dark+）。")],-1);function k(v,m){const t=d("ExternalLinkIcon");return e(),o("div",null,[r,s("p",null,[n("我们有一份 "),s("a",l,[n("语义符号示例"),c(t)]),n(" 展示了如何创建一个语义符号供应器函数。")]),u])}const h=a(i,[["render",k],["__file","02.semantic-highlight-guide.html.vue"]]);export{h as default};
