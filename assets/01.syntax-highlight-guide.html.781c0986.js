import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c,a as s,b as n,d as e,e as t,r as i}from"./app.ed9f300c.js";const l={},r=t('<h1 id="语法高亮" tabindex="-1"><a class="header-anchor" href="#语法高亮" aria-hidden="true">#</a> 语法高亮</h1><hr><p>语法高亮决定源代码的颜色和样式，它主要负责关键字（如javascript中的<code>if</code>，<code>for</code>）、字符串、注释、变量名等等语法的着色工作。</p><p>语法高亮由两部分工作组成：</p><ul><li><a href="#%E5%88%86%E8%AF%8D">分词</a>：将文本分割为一系列符号（包括单词和标点）</li><li><a href="#%E4%B8%BB%E9%A2%98%E5%8C%96">主题化</a>：然后根据主题或用户设置，对符号进行着色添加样式</li></ul><p>在本章开始之前，建议你先玩一下 <a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%A3%80%E6%9F%A5%E5%99%A8">作用域检查器</a> 工具看看文件中的符号都长什么样子，他们都应用了哪些主题样式。用内置主题（比如 Dark+）查看一份 TypeScript 文件，你就能同时看到语义高亮和语法高亮了。</p><h2 id="分词" tabindex="-1"><a class="header-anchor" href="#分词" aria-hidden="true">#</a> 分词</h2><hr><p>文本分词是指将文本打碎成一个个片段，并将每个片段根据符号类型（单词、标点等）进行分类。</p>',9),u={href:"https://macromates.com/manual/en/language_grammars",target:"_blank",rel:"noopener noreferrer"},d=s("code",null,"grammar",-1),m=s("p",null,[n("TextMate 分词引擎和渲染引擎在同一个进程上运行，用户输入时，对应的"),s("strong",null,"符号"),n("也会实时更新。"),s("strong",null,"符号"),n("是语法高亮的最小单位，它将代码分为注释、字符串、正则等类型。")],-1),v={href:"https://code.visualstudio.com/api/references/vscode-api#DocumentSemanticTokensProvider",target:"_blank",rel:"noopener noreferrer"},k=s("p",null,"基于语义化分词的语法高亮，一般被认为是基于 TextMate 语言高亮的一个补充。语义化高亮是语法高亮的上层建筑。由于语言服务器通常都要花不少时间加载和分析项目，所以语义化高亮展现也可能会有所延迟。",-1),g=s("p",null,[n("本章侧重于介绍基于 TextMate 的分词和语法高亮，语义化分词高亮请查看"),s("a",{href:"/language-extensions/semantic-highlight-guide"},"语义高亮"),n("。")],-1),b=s("h3",{id:"textmate-语法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#textmate-语法","aria-hidden":"true"},"#"),n(" TextMate 语法")],-1),q={href:"https://macromates.com/manual/en/language_grammars",target:"_blank",rel:"noopener noreferrer"},h={href:"https://macromates.com/manual/en/regular_expressions",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.apeth.com/nonblog/stories/textmatebundle.html",target:"_blank",rel:"noopener noreferrer"},x=t('<h4 id="textmate符号和作用域" tabindex="-1"><a class="header-anchor" href="#textmate符号和作用域" aria-hidden="true">#</a> TextMate符号和作用域</h4><p><strong>符号</strong>是由一门编程语言中最常见的一到几个字符组成的。符号包括运算符（如：<code>+</code>和<code>*</code>），变量名（如：<code>myVar</code>），或者字符串（如：<code>&quot;my string&quot;</code>）。</p><p>每个<strong>符号</strong>都有其作用域，作用域描述了这个<strong>符号</strong>的上下文。一个<strong>符号</strong>可被由<strong>点</strong>符号序列查找到，比如javascript中的<code>+</code>符号有这样的作用域<code>keyword.operator.arithmetic.js</code>。</p>',3),j={href:"https://macromates.com/manual/en/language_grammars",target:"_blank",rel:"noopener noreferrer"},_=t(`<p><strong>作用域</strong>支持嵌套，每个符号都会关联到它的父作用域上。下面的例子使用了<a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%A3%80%E6%9F%A5%E5%99%A8">作用域检查器</a>，可以清晰地看到javascript函数中的运算符<code>+</code>和它的作用域层级：</p><p><img src="https://code.visualstudio.com/assets/api/language-extensions/syntax-highlighting/scopes.png" alt="scopes"></p><p>父作用域的信息也同样是主题中的一部分。当主题指定了作用域，该作用域下的所有符号都会进行对应的着色，除非主题里面对单个作用域有其特殊配置。</p><h3 id="配置基本语法" tabindex="-1"><a class="header-anchor" href="#配置基本语法" aria-hidden="true">#</a> 配置基本语法</h3><p>VS Code支持JSON格式的TextMate语法。你可以在<a href="/references/contribution-points">发布内容配置</a>里面的<code>grammers</code>进行配置。</p><p>这个配置点可以配置的内容有：语言的id，顶层语法作用域的名称，语法文件的路径。下面是一个<code>abc</code>语言的语法配置文件：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;contributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;languages&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;extensions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;.abc&quot;</span><span class="token punctuation">]</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token property">&quot;grammars&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token property">&quot;language&quot;</span><span class="token operator">:</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;scopeName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;source.abc&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./syntaxes/abc.tmGrammar.json&quot;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个语法文件本身包含了一个顶层规则，里面一般分为两个部分，<code>patterns</code>列出了程序(program)和<code>repository</code>的顶层元素。语法中的其他规则需要从<code>repository</code>中使用<code>{ &quot;include&quot;: &quot;#id&quot; }</code>引入。</p><p><code>abc</code>语法标记了字母<code>a</code>，<code>b</code>和<code>c</code>作为关键字，可以被括号包起来成为一个表达式。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;scopeName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;source.abc&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;patterns&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#expression&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token property">&quot;repository&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;expression&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token property">&quot;patterns&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#letter&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#paren-expression&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token property">&quot;letter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a|b|c&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword.letter&quot;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token property">&quot;paren-expression&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token property">&quot;begin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\\\\(&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\\\\)&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;beginCaptures&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token property">&quot;0&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;punctuation.paren.open&quot;</span> <span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token property">&quot;endCaptures&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token property">&quot;0&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;punctuation.paren.close&quot;</span> <span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;expression.group&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;patterns&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#expression&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>语法引擎会试着逐步将<code>expression</code>中的规则应用到文本中。比如下面这个简单的程序：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>a
(
    b
)
x
(
    (
        c
        xyz
    )
)
(
a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中的语法产生了下面的作用域列表（从左到右，从最佳匹配到最不匹配）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>a               keyword.letter, source.abc
(               punctuation.paren.open, expression.group, source.abc
    b           expression.group, source.abc
)               punctuation.paren.close, expression.group, source.abc
x               source.abc
(               punctuation.paren.open, expression.group, source.abc
    (           punctuation.paren.open, expression.group, expression.group, source.abc
        c       keyword.letter, expression.group, expression.group, source.abc
        xyz     expression.group, expression.group, source.abc
    )           punctuation.paren.close, expression.group, expression.group, source.abc
)               punctuation.paren.close, expression.group, source.abc
(               source.abc
a               keyword.letter, source.abc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意文本匹配不是单一规则，比如字符串<code>xyz</code>，是包含在当前作用域中的。文件的最后一个括号在<code>expression.group</code>里面，因为不会匹配<code>end</code>规则。</p><h3 id="嵌入式语言" tabindex="-1"><a class="header-anchor" href="#嵌入式语言" aria-hidden="true">#</a> 嵌入式语言</h3><p>如果你的语法中需要在父语言中嵌入其他语言，比如HTML中的CSS，那么你可以使用<code>embeddedLanguages</code>配置，告诉VSCode怎么处理嵌入的语言。然后嵌入语言的括号匹配，注释，和其他基础语言功能都会正常运作。</p><p><code>embeddedLanguages</code>配置将嵌入语言的作用域映射到顶层语言的作用域上。下面里的例子里，<code>meta.embedded.block.javascript</code>作用域中的任何符号都会以javscript处理：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;contributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;grammars&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./syntaxes/abc.tmLanguage.json&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;scopeName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;source.abc&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;embeddedLanguages&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token property">&quot;meta.embedded.block.javascript&quot;</span><span class="token operator">:</span> <span class="token string">&quot;source.js&quot;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，如你对应用了<code>meta.embedded.block.javascript</code>的符号进行注释就会有正确的<code>//</code>javascript风格，如果你触发代码片段，也会提示对应的javascript片段。</p><h3 id="开发全新的语法插件" tabindex="-1"><a class="header-anchor" href="#开发全新的语法插件" aria-hidden="true">#</a> 开发全新的语法插件</h3><p>使用<a href="/get-started/your-first-extension">VS Code的Yeoman模板</a>快速创建一个新的语法插件，运行<code>yo code</code>然后选择<code>New Language</code>：</p><p><img src="https://code.visualstudio.com/assets/api/language-extensions/syntax-highlighting/yo-new-language.png" alt="yo-new-language"></p><p>Yeoman通过问问题的方式最后生成新的插件，对于创建语法插件最重要的几点就是：</p><ul><li><code>Language Id</code> - 这个语言的id</li><li><code>Language Name</code> - 友好的名称</li><li><code>Scope names</code> - TextMate根作用域名称</li></ul><p><img src="https://code.visualstudio.com/assets/api/language-extensions/syntax-highlighting/yo-new-language-questions.png" alt="yo-new-language-questions"></p><p>生成器会假设你要同时对新语言定义好语言id和语法。如果你只是根据已有的语言创建新的语法，那么你只要填好目标语言的信息就好，然后一定要删除生成的<code>package.json</code>中的<code>languages</code>部分。</p><p>回答了一大堆问题之后，Yeoman会创建一个新的插件，其结构如下：</p><p><img src="https://code.visualstudio.com/assets/api/language-extensions/syntax-highlighting/generated-new-language-extension.png" alt="generated-new-language-extension"></p><p>!&gt; 注意：如果你只是配置一个VS Code中已有语言的语法，记得删掉生成的<code>package.json</code>中的<code>languages</code>配置。</p><h4 id="迁移现成的textmate语法" tabindex="-1"><a class="header-anchor" href="#迁移现成的textmate语法" aria-hidden="true">#</a> 迁移现成的TextMate语法</h4><p><code>yo code</code>也快成帮你把已有的TextMate语法转成一个VS Code插件。使用<code>yo code</code>，选择<code>Language extension</code>，当询问是否从已有TextMate文件插件的时候，填入后缀为<code>.tmLanguage</code>或<code>.json</code>的TextMate语法文件。</p><p><img src="https://code.visualstudio.com/assets/api/language-extensions/syntax-highlighting/yo-convert.png" alt="yo-convert"></p><h4 id="用yaml配置语法" tabindex="-1"><a class="header-anchor" href="#用yaml配置语法" aria-hidden="true">#</a> 用YAML配置语法</h4><p>随着语言日益复杂，你可能很快就会难以理解和维护你的json文件。如果你发现自己需要写很多正则表达式，或是需要添加大量解释语法层面的注释，你可能需要考虑使用yaml定义语法文件了。</p><p>Yaml语法和json有着同样的结构，但是它的语法更加精简，如多行字符串和注释。</p><p><img src="https://code.visualstudio.com/assets/api/language-extensions/syntax-highlighting/yaml-grammar.png" alt="yaml-grammar"></p>`,37),f={href:"https://www.npmjs.com/package/js-yaml",target:"_blank",rel:"noopener noreferrer"},T=s("code",null,"js-yaml",-1),S=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Install js-yaml as a development only dependency in your extension</span>
$ <span class="token function">npm</span> <span class="token function">install</span> js-yaml --save-dev

<span class="token comment"># Use the command line tool to convert the yaml grammar to json</span>
$ npx js-yaml syntaxes/abc.tmLanguage.yaml <span class="token operator">&gt;</span> syntaxes/abc.tmLanguage.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="语法注入" tabindex="-1"><a class="header-anchor" href="#语法注入" aria-hidden="true">#</a> 语法注入</h4><p>你可以通过<em>语法注入</em>扩展一个现成的语法文件。<em>语法注入</em>就是常规的TextMate语法，<em>语法注入</em>的应用有：</p><ul><li>高亮注释中的关键字，如<code>TODO</code></li><li>对现有语法添加更明确的作用域信息</li><li>向Markdown中的代码区块添加语法高亮</li></ul><p><strong>创建一个基础语法注入</strong></p><p><em>语法注入</em>也是在<code>package.json</code>中配置的，不过这次不需要配置<code>language</code>，而是配置<code>injectTo</code>指明目需要注入的语言作用域列表。</p><p>在这个例子里，我们会新建一个非常简单的注入语法，对javascript注释中的<code>TODO</code>进行高亮。我们在<code>injectTo</code>中用<code>source.js</code>指向目标语言的作用域。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;contributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;grammars&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./syntaxes/injection.json&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;scopeName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;todo-comment.injection&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;injectTo&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;source.js&quot;</span><span class="token punctuation">]</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了顶层的<code>injectionSelector</code>，语法本身就应该是标准的TextMate语法。<code>injectionSelector</code>是一个作用域选择器，它指明了<em>语法注入</em>生效的作用域。在我们的例子里，我们想要在所有<code>//</code>注释中的<code>TODO</code>高亮。使用<a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%A3%80%E6%9F%A5%E5%99%A8">作用域检查器</a>，我们会发现JavaScript的双斜杠存在作用域<code>comment.line.double-slash</code>，所以我们的注入选择器是<code>L:comment.line.double-slash</code>：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;scopeName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;todo-comment.injection&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;injectionSelector&quot;</span><span class="token operator">:</span> <span class="token string">&quot;L:comment.line.double-slash&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;patterns&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token punctuation">{</span>
			<span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#todo-keyword&quot;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token property">&quot;repository&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;todo-keyword&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token string">&quot;TODO&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword.todo&quot;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注入选择器中的<code>L:</code>代表注入的语法添加在现有语法规则的左边。也就是说我们注入的语法规则会在任何现有语法规则之前生效。</p><p><strong>嵌入语法</strong></p><p><em>语法注入</em>也可以用在嵌入语言中，在他们的父级语法中进行配置。就和普通的语法意义，<em>语法注入</em>也可以使用<code>embeddedLanguages</code>将嵌入语言的作用域映射到顶层的语言作用域上。</p><p>比如高亮JS字符串中的sql查询的插件，可以使用<code>embeddedLanguages</code>为字符串中所有匹配<code>meta.embedded.inline.sql</code>的符号应用sql语言的基本功能，比如括号匹配和片段选择。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;contributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;grammars&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./syntaxes/injection.json&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;scopeName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sql-string.injection&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;injectTo&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;source.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token property">&quot;embeddedLanguages&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token property">&quot;meta.embedded.inline.sql&quot;</span><span class="token operator">:</span> <span class="token string">&quot;source.sql&quot;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>符号类型和嵌入语言</strong></p><p>对于嵌入语言中的注入语言还会有个副作用，那就是VS Code把所有字符串（string）中的<em>符号</em>视为字符文本，而且把注释中的所有<em>符号</em>视为符号内容（token content）。 因此诸如括号匹配和自动补全在字符串和注释中是无法使用的，如果<em>嵌入语言</em>刚好出现在字符串或注释中，那么这些功能就无法在<em>嵌入语言</em>中使用。</p><p>想要重载这个行为，你需要使用<code>meta.embedded.*</code>作用域重置VS Code标记字符串和注释行为。最佳实践就是始终将嵌入语言放在<code>meta.embedded.*</code>作用域中，确保VS Code能够正确处理嵌入语言。</p><p>如果你无法为你的语法添加<code>meta.embedded.*</code>作用域，你可以在语法配置中用<code>tokenTypes</code>，指定<em>作用域</em>到内容模式（content mode）上。 下面的<code>tokenTypes</code>确保<code>my.sql.template.string</code>作用域中的任何内容都应视为代码：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;contributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;grammars&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./syntaxes/injection.json&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;scopeName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sql-string.injection&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;injectTo&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;source.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token property">&quot;embeddedLanguages&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token property">&quot;my.sql.template.string&quot;</span><span class="token operator">:</span> <span class="token string">&quot;source.sql&quot;</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token property">&quot;tokenTypes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token property">&quot;my.sql.template.string&quot;</span><span class="token operator">:</span> <span class="token string">&quot;other&quot;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="主题化" tabindex="-1"><a class="header-anchor" href="#主题化" aria-hidden="true">#</a> 主题化</h2><hr><p>主题化是把颜色和样式应用到<strong>符号</strong>的过程。色彩主题定义了主题化规则，但用户可以在<em>用户设置</em>中自定义主题化规则。</p><p><code>tokenColors</code> 定义了 TextMate 主题规则，它的语法和常用的 TextMate 主题是完全一样的。每份规则都定义了 TextMate 作用域选择器，并应用对应的颜色和样式。</p><p>解析符号的颜色或样式时，当前符号的<strong>作用域</strong>需要和规则中的<strong>选择器</strong>相匹配，然后找到最为匹配的样式属性（前景色、加粗、斜体、下划线）。</p><p><a href="/extension-guides/color-theme">色彩主题</a> 章节介绍了如何创建新的色彩主题，语义化分词的主题化则在<a href="/language-extensions/semantic-highlight-guide">语义高亮</a>中。</p><h2 id="作用域检查器" tabindex="-1"><a class="header-anchor" href="#作用域检查器" aria-hidden="true">#</a> 作用域检查器</h2><hr><p>VS Code自带的作用域检查器能帮你调试语法文件。它能显示当前位置<em>符号</em>作用域，以及应用在上面的主题规则和元信息。</p>`,29),M=s("code",null,"Developer: Inspect TM Scopes",-1),E={href:"https://code.visualstudio.com/docs/getstarted/keybindings",target:"_blank",rel:"noopener noreferrer"},C=s("em",null,"作用域检查器",-1),L=t(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cmd+alt+shift+i&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;editor.action.inspectTMScopes&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://code.visualstudio.com/assets/api/language-extensions/syntax-highlighting/scope-inspector.png" alt="scope-inspector"></p><p>作用域检查器可以显示以下的信息：</p><ol><li>当前符号</li><li>关于符号的元信息，这些值都是计算后的值。如果你使用了嵌入语言，那么这里最重要的信息就是<code>language</code>和<code>token type</code>了</li><li>符号使用的主题规则。这里只显示当前应用的规则，而不显示被其他样式覆盖的规则。</li><li>完整的作用域列表，越往上作用域越明确。</li></ol>`,4);function w(V,N){const a=i("ExternalLinkIcon");return p(),c("div",null,[r,s("p",null,[n("VS Code 的分词引擎是通过 "),s("a",u,[n("TextMate"),e(a)]),n(" 驱动的。TextMate 语法是一套使用 plist(XML) 或 JSON 格式的结构化正则表达式集合。VS Code 则可通过 "),d,n(" 配置点进行语法配置。")]),m,s("p",null,[n("从1.43 版本开始，VS Code 也允许插件通过 "),s("a",v,[n("语义化分词供应器函数"),e(a)]),n(" 提供分词功能。语义供应器函数通常由语言服务器实现，它必须能够深入理解源代码，并且能够解析上下文的各类符号。比如，一个常量的名称应该在整个项目中都使用常量类型的语法高亮，而不是只在它声明的地方。")]),k,g,b,s("p",null,[n("VS Code使用"),s("a",q,[n("TextMate 语法"),e(a)]),n("将文本分割成一个个符号。TextMate语法是"),s("a",h,[n("Oniguruma正则表达式"),e(a)]),n("的集合，一般是一份plist或者JSON格式的文件。你可以在"),s("a",y,[n("这里"),e(a)]),n("找到更棒的介绍文档，在里面可以找到你感兴趣的TextMate语法。")]),x,s("p",null,[n("主题会把颜色和样式映射到作用域上，这样一来就实现了语法高亮。TextMate提供了一些主题中"),s("a",j,[n("常用的作用域"),e(a)]),n("，如果你想要尽可能全面地支持语法，最好从现成的主题中入手，避免重新编写主题。")]),_,s("p",null,[n("VS Code只能加载json语法，所以yaml格式的语法文件必须最终转换成json文件。"),s("a",f,[T,n("包"),e(a)]),n("可以帮你完成这个任务：")]),S,s("p",null,[n("在命令面板中输入"),M,n("或者"),s("a",E,[n("使用快捷键"),e(a)]),n("启动"),C,n("。")]),L])}const D=o(l,[["render",w],["__file","01.syntax-highlight-guide.html.vue"]]);export{D as default};
