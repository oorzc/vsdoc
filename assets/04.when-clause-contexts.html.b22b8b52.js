import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as d,c as u,a as n,b as t,d as e,e as o,r as c}from"./app.ed9f300c.js";const a={},i=o(`<h1 id="when-子句上下文" tabindex="-1"><a class="header-anchor" href="#when-子句上下文" aria-hidden="true">#</a> when 子句上下文</h1><p>VS Code 为元素是否处于可见和激活状态，设置了不同的上下文值。这些上下文可以禁用或者启用插件的某些命令和 UI 元素，比如菜单和视图。</p><p>比如，VS Code 用 when 子句启停命令快捷键，你可以在默认快捷键绑定 JSON 文件中找到（<strong>首选项：打开默认键盘快捷键(JSON)</strong>）：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> 
    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;f5&quot;</span><span class="token punctuation">,</span>  
    <span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;workbench.action.debug.start&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;when&quot;</span><span class="token operator">:</span> <span class="token string">&quot;debuggersAvailable &amp;&amp; !inDebugMode&quot;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述内置<strong>启动调试器</strong>命令的快键键是 <code>F5</code>，它仅仅在适当的调试器可用（上下文中的 <code>debuggersAvailable</code> 为 true 时）且编辑器不在调试模式中（上下文中的 <code>inDebugMode</code> 为 false 时）才会启动。</p><h2 id="条件操作符" tabindex="-1"><a class="header-anchor" href="#条件操作符" aria-hidden="true">#</a> 条件操作符</h2><p>你可以使用下列条件操作符</p><table><thead><tr><th>操作符</th><th>符号</th><th>例子</th></tr></thead><tbody><tr><td>相等</td><td><code>==</code></td><td><code>&quot;editorLangId == typescript&quot;</code></td></tr><tr><td>不相等</td><td><code>!=</code></td><td><code>&quot;resourceExtname != .js&quot;</code></td></tr><tr><td>或</td><td><code>||</code></td><td><code>&quot;isLinux || isWindows&quot;</code></td></tr><tr><td>且</td><td><code>&amp;&amp;</code></td><td><code>&quot;textInputFocus &amp;&amp; !editorReadonly&quot;</code></td></tr><tr><td>非</td><td><code>!</code></td><td><code>!editorReadonly</code></td></tr><tr><td>匹配</td><td><code>=~</code></td><td><code>&quot;resourceScheme =~ /^untitled$^file$/&quot; </code></td></tr><tr><td>大于</td><td><code>&gt; &gt;=</code></td><td><code>&quot;gitOpenRepositoryCount &gt;= 1&quot;</code></td></tr><tr><td>小于</td><td><code>&lt; &lt;=</code></td><td><code>&quot;workspaceFolderCount &lt; 2&quot;</code></td></tr><tr><td>包含</td><td><code>in</code></td><td><code>resourceFilename in supportedFolders </code>(<a href="#_39in39-%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6">详见</a> 下方 &#39;in&#39;-条件操作符)</td></tr></tbody></table><h3 id="键-值-when-子句操作符" tabindex="-1"><a class="header-anchor" href="#键-值-when-子句操作符" aria-hidden="true">#</a> 键-值 when 子句操作符</h3><p><code>when</code>子句中可以使用键值对匹配操作符。表达式 <code>key =~ value</code> 会把右侧作为正则表达式来匹配左侧。比如配置 Docker 文件的菜单项，你可以使用：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;when&quot;</span><span class="token operator">:</span> <span class="token string">&quot;resourceFilename =~ /docker/&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="可用上下文变量" tabindex="-1"><a class="header-anchor" href="#可用上下文变量" aria-hidden="true">#</a> 可用上下文变量</h2><p>下面是一些<code>when</code>子句中可以使用的上下文变量，这些值最终会被解析为布尔值 true/false。</p><p>这个表并不包含所有值，你可以在键盘快键键编辑器（<strong>首选项:打开键盘快捷键</strong>）或者默认快捷键绑定 JSON 文件（<strong>首选项：打开默认键盘快捷键(JSON)</strong>）中找到所有上下文变量。</p>`,14),r=n("thead",null,[n("tr",null,[n("th",null,"上下文名称"),n("th",null,"何时为真")])],-1),p=n("tr",null,[n("td",null,[n("strong",null,"编辑器上下文")]),n("td")],-1),h=n("tr",null,[n("td",null,[n("code",null,"editorFocus")]),n("td",null,"编辑器聚焦时，不管是聚焦到文本还是小部件")],-1),_=n("tr",null,[n("td",null,[n("code",null,"editorTextFocus")]),n("td",null,"编辑器内的文本聚焦时（光标闪动）")],-1),m=n("tr",null,[n("td",null,[n("code",null,"textInputFocus")]),n("td",null,"任何编辑器聚焦时（常规编辑器, 调试 REPL等等).")],-1),g=n("tr",null,[n("td",null,[n("code",null,"inputFocus")]),n("td",null,"任何文本输入区域聚焦时（编辑器或文本框）")],-1),v=n("tr",null,[n("td",null,[n("code",null,"editorHasSelection")]),n("td",null,"编辑器中的文本被选中时")],-1),k=n("tr",null,[n("td",null,[n("code",null,"editorHasMultipleSelections")]),n("td",null,"多文本区被选中时（多个光标）")],-1),b=n("tr",null,[n("td",null,[n("code",null,"editorReadonly")]),n("td",null,"编辑器只读时")],-1),w=n("td",null,[n("code",null,"editorLangId")],-1),x={href:"https://code.visualstudio.com/docs/languages/identifiers",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,'"editorLangId == typescript"',-1),q=n("tr",null,[n("td",null,[n("code",null,"isInDiffEditor")]),n("td",null,"激活的编辑器处于差异编辑器状态时")],-1),E=n("tr",null,[n("td",null,[n("code",null,"isInEmbeddedEditor")]),n("td",null,"在嵌入式编辑器聚焦时")],-1),y=n("tr",null,[n("td",null,[n("strong",null,"操作系统上下文")]),n("td")],-1),F=n("tr",null,[n("td",null,[n("code",null,"isLinux")]),n("td",null,"系统是 Linux 时")],-1),C=n("tr",null,[n("td",null,[n("code",null,"isMac")]),n("td",null,"系统是 macOS 时")],-1),I=n("tr",null,[n("td",null,[n("code",null,"isWindows")]),n("td",null,"系统是 Windows 时")],-1),S=n("tr",null,[n("td",null,[n("code",null,"isWeb")]),n("td",null,"从 web 访问编辑器时")],-1),V=n("tr",null,[n("td",null,[n("strong",null,"列表上下文")]),n("td")],-1),D=n("tr",null,[n("td",null,[n("code",null,"listFocus")]),n("td",null,"聚焦到列表时")],-1),j=n("tr",null,[n("td",null,[n("code",null,"listSupportsMultiselect")]),n("td",null,"列表支持多选时")],-1),B=n("tr",null,[n("td",null,[n("code",null,"listHasSelectionOrFocus")]),n("td",null,"列表被选中或聚焦时")],-1),A=n("tr",null,[n("td",null,[n("code",null,"listDoubleSelection")]),n("td",null,"列表包含 2 个元素时")],-1),L=n("tr",null,[n("td",null,[n("code",null,"listMultiSelection")]),n("td",null,"列表包含多个元素时")],-1),M=n("tr",null,[n("td",null,[n("strong",null,"模式上下文")]),n("td")],-1),N=n("tr",null,[n("td",null,[n("code",null,"inSnippetMode")]),n("td",null,"编辑器处于代码片段模式")],-1),O=n("tr",null,[n("td",null,[n("code",null,"inQuickOpen")]),n("td",null,"聚焦到快速选择时")],-1),P=n("tr",null,[n("td",null,[n("strong",null,"资源上下文")]),n("td")],-1),R=n("tr",null,[n("td",null,[n("code",null,"resourceScheme")]),n("td",null,[t("资源的 Uri 协议匹配时。比如："),n("code",null,'"resourceScheme == file"')])],-1),W=n("tr",null,[n("td",null,[n("code",null,"resourceFilename")]),n("td",null,[t("资源管理器或编辑器的文件名匹配时。比如: "),n("code",null,'"resourceFilename == gulpfile.js"')])],-1),H=n("tr",null,[n("td",null,[n("code",null,"resourceExtname")]),n("td",null,[t("资源管理器或编辑器的扩展文件名匹配时。比如: "),n("code",null,'"resourceExtname == .js"')])],-1),T=n("tr",null,[n("td",null,[n("code",null,"resourceDirname")]),n("td",null,[t("资源管理器或编辑器的资源文件夹绝对路径匹配时。比如: "),n("code",null,'"resourceDirname == /users/alice/project/src"')])],-1),U=n("tr",null,[n("td",null,[n("code",null,"resourcePath")]),n("td",null,[t("资源管理器或编辑器的资源绝对路径匹配时。比如: "),n("code",null,'"resourcePath == /users/alice/project/gulpfile.js"')])],-1),G=n("td",null,[n("code",null,"resourceLangId")],-1),J={href:"https://code.visualstudio.com/docs/languages/identifiers",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,'"resourceLangId == markdown"',-1),z=n("tr",null,[n("td",null,[n("code",null,"isFileSystemResource")]),n("td",null,"资源管理器或编辑器的文件是文件系统供应器可处理的文件系统类型时")],-1),Q=n("tr",null,[n("td",null,[n("code",null,"resourceSet")]),n("td",null,"资源管理器或编辑器文件成组时")],-1),Z=n("tr",null,[n("td",null,[n("code",null,"resource")]),n("td",null,"资源管理器或编辑器的完整 Uri")],-1),K=n("tr",null,[n("td",null,[n("strong",null,"资源管理器上下文")]),n("td")],-1),X=n("tr",null,[n("td",null,[n("code",null,"explorerViewletVisible")]),n("td",null,"当资源管理器视图可见时")],-1),Y=n("tr",null,[n("td",null,[n("code",null,"explorerViewletFocus")]),n("td",null,"当资源管理器视图受键盘聚焦时")],-1),nn=n("tr",null,[n("td",null,[n("code",null,"filesExplorerFocus")]),n("td",null,"文件资源管理器区域受键盘聚焦时")],-1),tn=n("tr",null,[n("td",null,[n("code",null,"openEditorsFocus")]),n("td",null,"打开的编辑器区域受键盘聚焦时")],-1),ln=n("tr",null,[n("td",null,[n("code",null,"explorerResourceIsFolder")]),n("td",null,"资源管理器中选中了一个文件夹时")],-1),en=n("tr",null,[n("td",null,[n("strong",null,"编辑器小部件上下文")]),n("td")],-1),on=n("tr",null,[n("td",null,[n("code",null,"findWidgetVisible")]),n("td",null,"编辑器查找小部件可见时")],-1),sn=n("tr",null,[n("td",null,[n("code",null,"suggestWidgetVisible")]),n("td",null,"建议小部件可见时（智能提示）")],-1),dn=n("tr",null,[n("td",null,[n("code",null,"suggestWidgetMultipleSuggestions")]),n("td",null,"展示了多个提示时")],-1),un=n("tr",null,[n("td",null,[n("code",null,"renameInputVisible")]),n("td",null,"重命名输入框可见时")],-1),cn=n("tr",null,[n("td",null,[n("code",null,"referenceSearchVisible")]),n("td",null,"查找引用窗口可见时")],-1),an=n("tr",null,[n("td",null,[n("code",null,"inReferenceSearchEditor")]),n("td",null,"查找引用编辑器聚焦时")],-1),rn=n("tr",null,[n("td",null,[n("code",null,"config.editor.stablePeek")]),n("td",null,[t("引用编辑器保持打开时 (设置中的 "),n("code",null,"editor.stablePeek"),t(")")])],-1),pn=n("tr",null,[n("td",null,[n("code",null,"quickFixWidgetVisible")]),n("td",null,"快速修复小部件可见时")],-1),hn=n("tr",null,[n("td",null,[n("code",null,"parameterHintsVisible")]),n("td",null,[t("参数提示可见时 (设置中的 "),n("code",null,"editor.parameterHints.enabled"),t(").")])],-1),_n=n("tr",null,[n("td",null,[n("code",null,"parameterHintsMultipleSignatures")]),n("td",null,"多参数提示可见时")],-1),mn=n("tr",null,[n("td",null,[n("strong",null,"调试器上下文")]),n("td")],-1),gn=n("tr",null,[n("td",null,[n("code",null,"debuggersAvailable")]),n("td",null,"有合适的调试器插件可用时")],-1),vn=n("tr",null,[n("td",null,[n("code",null,"inDebugMode")]),n("td",null,"调试器会话在运行时")],-1),kn=n("tr",null,[n("td",null,[n("code",null,"debugState")]),n("td",null,[t("调试器激活状态，可用值有 "),n("code",null,"inactive"),t(", "),n("code",null,"initializing"),t(", "),n("code",null,"stopped"),t(", "),n("code",null,"running"),t(".")])],-1),bn=n("tr",null,[n("td",null,[n("code",null,"debugType")]),n("td",null,[t("调试器类型匹配时，比如: "),n("code",null,`"debugType == 'node'"`),t(".")])],-1),wn=n("tr",null,[n("td",null,[n("code",null,"inDebugRepl")]),n("td",null,"调试控制台 REPL 聚焦时")],-1),xn=n("tr",null,[n("td",null,[n("strong",null,"终端上下文")]),n("td")],-1),fn=n("tr",null,[n("td",null,[n("code",null,"terminalFocus")]),n("td",null,"聚焦到终端时")],-1),qn=n("tr",null,[n("td",null,[n("code",null,"terminalIsOpen")]),n("td",null,"终端打开时")],-1),En=n("tr",null,[n("td",null,[n("strong",null,"时间线视图上下文")]),n("td")],-1),yn=n("tr",null,[n("td",null,[n("code",null,"timelineFollowActiveEditor")]),n("td",null,"时间线视图跟随激活的编辑器时")],-1),Fn=n("tr",null,[n("td",null,[n("strong",null,"时间线视图项 上下文")]),n("td")],-1),Cn=n("tr",null,[n("td",null,[n("code",null,"timelineItem")]),n("td",null,[t("时间线项目的上下文变量匹配时，比如: "),n("code",null,'"timelineItem =~ /git:file:commit\\\\b/"'),t(".")])],-1),In=n("tr",null,[n("td",null,[n("strong",null,"插件上下文")]),n("td")],-1),Sn=n("tr",null,[n("td",null,[n("code",null,"extension")]),n("td",null,[t("插件 ID 匹配时，比如: "),n("code",null,'"extension == eamodio.gitlens"'),t(".")])],-1),Vn=n("tr",null,[n("td",null,[n("code",null,"extensionStatus")]),n("td",null,[t("插件安装时，比如: "),n("code",null,'"extensionStatus == installed"'),t(".")])],-1),Dn=n("tr",null,[n("td",null,[n("code",null,"extensionHasConfiguration")]),n("td",null,"插件存在配置时")],-1),jn=n("tr",null,[n("td",null,[n("strong",null,"全局UI上下文")]),n("td")],-1),Bn=n("tr",null,[n("td",null,[n("code",null,"notificationFocus")]),n("td",null,"键盘聚焦到通知窗口")],-1),An=n("tr",null,[n("td",null,[n("code",null,"notificationCenterVisible")]),n("td",null,"通知中心在 VS Code 右下角可见时")],-1),Ln=n("tr",null,[n("td",null,[n("code",null,"notificationToastsVisible")]),n("td",null,"通知窗口在 VS Code 右下角可见时")],-1),Mn=n("tr",null,[n("td",null,[n("code",null,"searchViewletVisible")]),n("td",null,"搜索视图打开时")],-1),Nn=n("tr",null,[n("td",null,[n("code",null,"sideBarVisible")]),n("td",null,"侧边栏展示时")],-1),On=n("tr",null,[n("td",null,[n("code",null,"sideBarFocus")]),n("td",null,"聚焦到侧边栏时")],-1),Pn=n("tr",null,[n("td",null,[n("code",null,"panelFocus")]),n("td",null,"聚焦到面板焦时")],-1),Rn=n("tr",null,[n("td",null,[n("code",null,"inZenMode")]),n("td",null,"窗口处于禅模式")],-1),Wn=n("tr",null,[n("td",null,[n("code",null,"isCenteredLayout")]),n("td",null,"编辑器处于中心布局模式")],-1),Hn=n("tr",null,[n("td",null,[n("code",null,"workbenchState")]),n("td",null,[t("值为 "),n("code",null,"empty"),t("、 "),n("code",null,"folder"),t(" (至少包含一个文件夹) 或 "),n("code",null,"workspace"),t(".")])],-1),Tn=n("tr",null,[n("td",null,[n("code",null,"workspaceFolderCount")]),n("td",null,"工作区文件夹数量")],-1),Un=n("tr",null,[n("td",null,[n("code",null,"replaceActive")]),n("td",null,"搜索视图中的替换文本框打开时")],-1),Gn=n("tr",null,[n("td",null,[n("code",null,"view")]),n("td",null,[t("视图 ID 匹配时，比如: "),n("code",null,'"view == myViewsExplorerID"'),t(".")])],-1),Jn=n("tr",null,[n("td",null,[n("code",null,"viewItem")]),n("td",null,[t("视图项上下文匹配时，比如: "),n("code",null,'"viewItem == someContextValue"'),t(".")])],-1),$n=n("tr",null,[n("td",null,[n("code",null,"isFullscreen")]),n("td",null,"窗口全屏时")],-1),zn=n("tr",null,[n("td",null,[n("code",null,"focusedView")]),n("td",null,"当前聚焦视图的 ID")],-1),Qn=n("tr",null,[n("td",null,[n("code",null,"canNavigateBack")]),n("td",null,"导航是否可以后退")],-1),Zn=n("tr",null,[n("td",null,[n("code",null,"canNavigateForward")]),n("td",null,"导航是否可以前进")],-1),Kn=n("tr",null,[n("td",null,[n("code",null,"canNavigateToLastEditLocation")]),n("td",null,"是否可以导航到上一次编辑位置")],-1),Xn=n("tr",null,[n("td",null,[n("strong",null,"全局编辑器 UI 上下文")]),n("td")],-1),Yn=n("tr",null,[n("td",null,[n("code",null,"textCompareEditorVisible")]),n("td",null,"最少有一个差异（对比）编辑器可见时")],-1),nt=n("tr",null,[n("td",null,[n("code",null,"textCompareEditorActive")]),n("td",null,"最少有一个差异（对比）编辑器激活")],-1),tt=n("tr",null,[n("td",null,[n("code",null,"editorIsOpen")]),n("td",null,"至少有一个编辑器打开时")],-1),lt=n("tr",null,[n("td",null,[n("code",null,"groupEditorsCount")]),n("td",null,"一个组内的编辑器数量")],-1),et=n("tr",null,[n("td",null,[n("code",null,"activeEditorGroupEmpty")]),n("td",null,"激活的编辑器组内没有编辑器时")],-1),ot=n("tr",null,[n("td",null,[n("code",null,"activeEditorGroupIndex")]),n("td",null,[t("编辑器群块中的编辑器组的下标位置，从数字 "),n("code",null,"1"),t(" 开始。下标 "),n("code",null,"1"),t(" 表示从左上角开始计数的首个编辑器组")])],-1),st=n("tr",null,[n("td",null,[n("code",null,"activeEditorGroupLast")]),n("td",null,"编辑器群块中的最后一个编辑器组")],-1),dt=n("tr",null,[n("td",null,[n("code",null,"multipleEditorGroups")]),n("td",null,"多个编辑器群出现时")],-1),ut=n("tr",null,[n("td",null,[n("code",null,"activeEditor")]),n("td",null,"组内的某个激活的编辑器ID")],-1),ct=n("tr",null,[n("td",null,[n("code",null,"activeEditorIsDirty")]),n("td",null,"组内的某个激活的编辑器为脏时")],-1),at=n("tr",null,[n("td",null,[n("code",null,"activeEditorIsNotPreview")]),n("td",null,"组内的某个激活的编辑器不在预览模式中")],-1),it=n("tr",null,[n("td",null,[n("code",null,"activeEditorIsPinned")]),n("td",null,"组内的某个激活的编辑器被固定时")],-1),rt=n("tr",null,[n("td",null,[n("code",null,"inSearchEditor")]),n("td",null,"当焦点在搜索编辑器内时")],-1),pt=n("tr",null,[n("td",null,[n("strong",null,"设置上下文")]),n("td")],-1),ht=n("tr",null,[n("td",null,[n("code",null,"config.editor.minimap.enabled")]),n("td",null,[t("当设置中的 "),n("code",null,"editor.minimap.enabled"),t(" 为 "),n("code",null,"true"),t(" 时")])],-1),_t=o(`<p>?&gt; 注意：你可以使用<code>config.</code>前缀，使用任意用户或工作区设置中的值。</p><h2 id="激活-聚焦视图或面板相关的上下文变量" tabindex="-1"><a class="header-anchor" href="#激活-聚焦视图或面板相关的上下文变量" aria-hidden="true">#</a> 激活/聚焦视图或面板相关的上下文变量</h2><p>你可以用 when 子句检查特定视图是否是可见的</p><table><thead><tr><th>上下文名称</th><th>何时为真</th></tr></thead><tbody><tr><td>activeViewlet</td><td>当视图可见时，比如<code>&quot;activeViewlet == &#39;workbench.view.explorer&#39;&quot;</code></td></tr><tr><td>activePanel</td><td>当面板可见时，比如<code>&quot;activePanel == &#39;workbench.panel.explorer&#39;&quot;</code></td></tr><tr><td>focusedView</td><td>当聚焦到视图时，比如<code>&quot;focusedView == myViewsExplorerID&quot;</code></td></tr></tbody></table><p>视图标识：</p><ul><li>workbench.view.explorer - 资源文件管理器</li><li>workbench.view.search - 搜索</li><li>workbench.view.scm - 源控制</li><li>workbench.view.debug - 运行</li><li>workbench.view.extensions - 插件</li></ul><p>面板标识:</p><ul><li>workbench.panel.markers - 问题</li><li>workbench.panel.output - 输出</li><li>workbench.panel.repl - 调试控制台</li><li>terminal - 终端</li><li>workbench.panel.comments - 评论</li><li>workbench.view.search - 搜索， 当 <code>search.location</code> 设置到 <code>panel</code> 时</li></ul><p>如果你想要在特定视图或者面板聚焦时触发 when 子句，使用 <code>sideBarFocus</code> 或 <code>panelFocus</code> 与 <code>activeViewlet</code> 或 <code>activiewFocus</code> 进行组合。</p><p>比如，下列 when 子句只会在文件资源管理器聚焦时才会为真</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token string">&quot;sideBarFocus &amp;&amp; activeViewlet == &#39;workbench.view.explorer&#39;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="在-when-子句中检查设置" tabindex="-1"><a class="header-anchor" href="#在-when-子句中检查设置" aria-hidden="true">#</a> 在 when 子句中检查设置</h2><p>在 when 子句中，你可以使用<code>config.</code>获取配置（设置）中的值。比如 <code>config.editor.tabCompletion</code> 或 <code>config.breadcrumbs.enabled</code></p><h2 id="添加自定义-when-子句上下文" tabindex="-1"><a class="header-anchor" href="#添加自定义-when-子句上下文" aria-hidden="true">#</a> 添加自定义 when 子句上下文</h2><p>如果你的插件需要使用 when 子句启动/禁用命令、菜单或者视图，而已有的上下文变量都不满足你的需求，你可以用 <code>setContext</code> 命令设置你自己的变量。</p><p>下面的第一个例子设置键<code>myExtension:showMyCommand</code>为真，你就可以在命令中或者 <code>when</code> 属性中进行使用了。第二个例子储存了一个值，那么你就可以在 <code>when</code> 子句中检查这个属性值是否大于 2 了。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>vscode<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token string">&#39;setContext&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;myExtension.showMyCommand&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

vscode<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token string">&#39;setContext&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;myExtension.numberOfCoolOpenThings&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="in-条件操作符" tabindex="-1"><a class="header-anchor" href="#in-条件操作符" aria-hidden="true">#</a> &#39;in&#39; 条件操作符</h2><p><code>when</code>中的操作符<code>in</code> 允许在上下文变量中动态查找其他的上下文变量值。比如，给包含特定文件的文件夹添加一个特殊的菜单命令（或者无法静态得知的其他东西），你可以使用 <code>in</code> 操作符来实现。</p><p>第一，确定需要支持的文件夹类型，比如是一个名称数组。然后，使用 <code>setContext</code> 命令把数组注入到上下文变量中：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>vscode<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token string">&#39;setContext&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ext.supportedFolders&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;bar&#39;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 或者</span>

<span class="token comment">// 注意本例（使用了一个对象）, 具体值是无关紧要的只要键存在于对象中</span>
vscode<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token string">&#39;setContext&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ext.supportedFolders&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  test<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  foo<span class="token operator">:</span> <span class="token string">&#39;anything&#39;</span><span class="token punctuation">,</span>
  bar<span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <code>package.json</code> 中添加<code>explorer/context</code>菜单配置：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 注意，本例假设你已经定义了一个叫做ext.doSpecial的命令</span>
<span class="token property">&quot;menus&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;explorer/context&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ext.doSpecial&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;when&quot;</span><span class="token operator">:</span> <span class="token string">&quot;explorerResourceIsFolder &amp;&amp; resourceFilename in ext:supportedFolders&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子里，我们拿到 <code>resourceFilename</code> 的值（在本例中也就是文件夹的名字）然后检查它是否在 <code>ext:supportedFolders</code> 之中。如果存在的话，菜单就会展示出来。这个强大的操作符使得更复杂的条件分支得以实现，同时也支持了动态配置。</p><h2 id="查看上下文变量的工具" tabindex="-1"><a class="header-anchor" href="#查看上下文变量的工具" aria-hidden="true">#</a> 查看上下文变量的工具</h2><p>如果你想在运行时查看当前所有激活的上下文变量，你可以打开命令面板(<code>⇧⌘P</code>) 使用 <strong>开发人员:检查上下文键值</strong> 命令。这个命令会打开 VS Code 开发者工具的 <strong>Console</strong> 标签（或 <strong>帮助 &gt; 打开开发者工具</strong>）然后显示出上下文变量的键值。</p><p>当你运行 <strong>开发人员:检查上下文键值</strong>，你的鼠标会高亮 VS Code UI 中的元素，当你点击一个元素时，对应的上下文变量和它们的状态就会输出到 <strong>Console</strong> 中。</p><p><img src="https://code.visualstudio.com/assets/api/references/when-clause-contexts/inspect-context-keys.png" alt="inspect-context-keys"></p><p>一系列可能包含 <a href="#%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89-when-%E5%AD%90%E5%8F%A5%E4%B8%8A%E4%B8%8B%E6%96%87">自定义上下文变量</a> 的键值对会展示出来。</p><p>!&gt; 注意：部分 VS Code 内部使用的上下文变量在未来可能会有所变化。</p>`,30);function mt(gt,vt){const l=c("ExternalLinkIcon");return d(),u("div",null,[i,n("table",null,[r,n("tbody",null,[p,h,_,m,g,v,k,b,n("tr",null,[w,n("td",null,[t("当编辑器的"),n("a",x,[t("语言 ID"),e(l)]),t(" 匹配时。比如: "),f,t(".")])]),q,E,y,F,C,I,S,V,D,j,B,A,L,M,N,O,P,R,W,H,T,U,n("tr",null,[G,n("td",null,[t("资源管理器或编辑器的"),n("a",J,[t("语言 ID"),e(l)]),t("匹配时，比如: "),$])]),z,Q,Z,K,X,Y,nn,tn,ln,en,on,sn,dn,un,cn,an,rn,pn,hn,_n,mn,gn,vn,kn,bn,wn,xn,fn,qn,En,yn,Fn,Cn,In,Sn,Vn,Dn,jn,Bn,An,Ln,Mn,Nn,On,Pn,Rn,Wn,Hn,Tn,Un,Gn,Jn,$n,zn,Qn,Zn,Kn,Xn,Yn,nt,tt,lt,et,ot,st,dt,ut,ct,at,it,rt,pt,ht])]),_t])}const wt=s(a,[["render",mt],["__file","04.when-clause-contexts.html.vue"]]);export{wt as default};
