import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as o,e as a}from"./app.ed9f300c.js";const n={},r=a('<h1 id="插件主机" tabindex="-1"><a class="header-anchor" href="#插件主机" aria-hidden="true">#</a> 插件主机</h1><p>你已经在<a href="/get-started/extension-anatomy">插件诊断</a>中学习了插件会将<code>active</code>和<code>deactive</code>声明周期函数暴露给VS Code，在本节我们来看看**插件主机/插件宿主(Extension Host)**是怎么管理所有运行中的插件的。</p><p><strong>插件主机</strong>是VS Code中负责加载和运行插件的Node.js进程，虽然你在写插件时不必关心这件事，但是掌握插件主机的运行原理对你创作插件还是非常有用的。</p><h2 id="稳定性和性能" tabindex="-1"><a class="header-anchor" href="#稳定性和性能" aria-hidden="true">#</a> 稳定性和性能</h2><hr><p>VS Code致力于为用户提供一个稳定且高性能的编辑环境，因此出错的插件不应该影响到用户的体验。所以<strong>插件主机</strong>可以预防这些事情：</p><ul><li>启动性能影响</li><li>阻塞的UI操作</li><li>修改UI</li></ul><p>另外，VS Code提供的<a href="/references/activation-events">激活事件机制</a>也让插件只在用到时才懒加载它们，比如，Markdown插件应该只在用户打开了Markdown文件时才启动，因此避免了不必要CPU和内存消耗。</p>',8),s=[r];function i(d,c){return t(),o("div",null,s)}const _=e(n,[["render",i],["__file","01.extension-host.html.vue"]]);export{_ as default};
