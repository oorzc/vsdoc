import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c,a as n,b as s,d as t,e,r as i}from"./app.ed9f300c.js";const l={},u=n("h1",{id:"命令",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#命令","aria-hidden":"true"},"#"),s(" 命令")],-1),d={href:"https://code.visualstudio.com/docs/getstarted/keybindings",target:"_blank",rel:"noopener noreferrer"},r=e('<h2 id="使用命令" tabindex="-1"><a class="header-anchor" href="#使用命令" aria-hidden="true">#</a> 使用命令</h2><hr><p>VS Code内部含有大量和编辑器交互、控制UI、后台操作的<a href="/references/commands">内置命令</a>。许多插件将它们的核心功能暴露为<em>命令</em>的形式供用户或者其他插件使用。</p><h3 id="程序性执行一个命令" tabindex="-1"><a class="header-anchor" href="#程序性执行一个命令" aria-hidden="true">#</a> 程序性执行一个命令</h3>',4),k={href:"https://code.visualstudio.com/api/references/vscode-api#commands.executeCommand",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"vscode.commands.executeCommand",-1),v=e(`<p>我们看个例子🌰：<code>editor.action.addCommentLine</code>命令可以将当前选中行变成注释(你可以偷偷把这个功能地集成到你自己的插件中哦)：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> vscode <span class="token keyword">from</span> <span class="token string">&#39;vscode&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">commentLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	vscode<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token string">&#39;editor.action.addCommentLine&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有些命令可以接收改变行为的参数，有些会有返回结果。形如<code>vscode.executeDefinitionProvider</code>的API，它要求传入一个document的URI地址和position作为参数，并返回一个包含定义列表的promise：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> vscode <span class="token keyword">from</span> <span class="token string">&#39;vscode&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">printDefinitionsForActiveEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> activeEditor <span class="token operator">=</span> vscode<span class="token punctuation">.</span>window<span class="token punctuation">.</span>activeTextEditor<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeEditor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> definitions <span class="token operator">=</span> <span class="token keyword">await</span> vscode<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">executeCommand</span><span class="token generic class-name"><span class="token operator">&lt;</span>vscode<span class="token punctuation">.</span>Location<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
		<span class="token string">&#39;vscode.executeDefinitionProvider&#39;</span><span class="token punctuation">,</span>
		activeEditor<span class="token punctuation">.</span>document<span class="token punctuation">.</span>uri<span class="token punctuation">,</span>
		activeEditor<span class="token punctuation">.</span>selection<span class="token punctuation">.</span>active
	<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> definition <span class="token keyword">of</span> definitions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多命令详见：</p>`,5),b={href:"https://code.visualstudio.com/docs/getstarted/keybindings",target:"_blank",rel:"noopener noreferrer"},g=n("li",null,[n("a",{href:"/references/commands"},"VS Code内置高级命令API")],-1),h=e(`<h3 id="命令的urls" tabindex="-1"><a class="header-anchor" href="#命令的urls" aria-hidden="true">#</a> 命令的URLs</h3><p>命令URI是执行注册命令的链接。它们可被用于悬停文本上的可点击链接，代码补全提示中的细节信息，甚至可以出现在webview中。</p><p>命令URI使用<code>command</code>作为协议头，然后紧跟着命令名称。比如：<code>editor.action.addCommentLine</code>的命令URI是：<code>command:editor.action.addCommentLine</code>。下面是一个显示在当前行注释中显示链接的悬停函数。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> vscode <span class="token keyword">from</span> <span class="token string">&#39;vscode&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">activate</span><span class="token punctuation">(</span>context<span class="token operator">:</span> vscode<span class="token punctuation">.</span>ExtensionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	vscode<span class="token punctuation">.</span>languages<span class="token punctuation">.</span><span class="token function">registerHoverProvider</span><span class="token punctuation">(</span>
		<span class="token string">&#39;javascript&#39;</span><span class="token punctuation">,</span>
		<span class="token keyword">new</span> <span class="token class-name"><span class="token keyword">class</span></span> <span class="token keyword">implements</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span>HoverProvider <span class="token punctuation">{</span>
			<span class="token function">provideHover</span><span class="token punctuation">(</span>
				_document<span class="token operator">:</span> vscode<span class="token punctuation">.</span>TextDocument<span class="token punctuation">,</span>
				_position<span class="token operator">:</span> vscode<span class="token punctuation">.</span>Position<span class="token punctuation">,</span>
				_token<span class="token operator">:</span> vscode<span class="token punctuation">.</span>CancellationToken
			<span class="token punctuation">)</span><span class="token operator">:</span> vscode<span class="token punctuation">.</span>ProviderResult<span class="token operator">&lt;</span>vscode<span class="token punctuation">.</span>Hover<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
				<span class="token keyword">const</span> commentCommandUri <span class="token operator">=</span> vscode<span class="token punctuation">.</span>Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">command:editor.action.addCommentLine</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">const</span> contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token function">MarkdownString</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[Add comment](</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>commentCommandUri<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token comment">// command URIs如果想在Markdown 内容中生效, 你必须设置\`isTrusted\`。</span>
				<span class="token comment">// 当创建可信的Markdown 字符, 请合理地清理所有的输入内容</span>
				<span class="token comment">// 以便你期望的命令command URIs生效</span>
				contents<span class="token punctuation">.</span>isTrusted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

				<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token function">Hover</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令上的参数列表会从JSON数组变成URI格式：下面的例子使用了<code>git.stage</code>命令创建一个悬停操作——将当前文件进行git暂存：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> vscode <span class="token keyword">from</span> <span class="token string">&#39;vscode&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">activate</span><span class="token punctuation">(</span>context<span class="token operator">:</span> vscode<span class="token punctuation">.</span>ExtensionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	vscode<span class="token punctuation">.</span>languages<span class="token punctuation">.</span><span class="token function">registerHoverProvider</span><span class="token punctuation">(</span>
		<span class="token string">&#39;javascript&#39;</span><span class="token punctuation">,</span>
		<span class="token keyword">new</span> <span class="token class-name"><span class="token keyword">class</span></span> <span class="token keyword">implements</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span>HoverProvider <span class="token punctuation">{</span>
			<span class="token function">provideHover</span><span class="token punctuation">(</span>
				document<span class="token operator">:</span> vscode<span class="token punctuation">.</span>TextDocument<span class="token punctuation">,</span>
				_position<span class="token operator">:</span> vscode<span class="token punctuation">.</span>Position<span class="token punctuation">,</span>
				_token<span class="token operator">:</span> vscode<span class="token punctuation">.</span>CancellationToken
			<span class="token punctuation">)</span><span class="token operator">:</span> vscode<span class="token punctuation">.</span>ProviderResult<span class="token operator">&lt;</span>vscode<span class="token punctuation">.</span>Hover<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
				<span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> resourceUri<span class="token operator">:</span> document<span class="token punctuation">.</span>uri <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
				<span class="token keyword">const</span> commentCommandUri <span class="token operator">=</span> vscode<span class="token punctuation">.</span>Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>
					<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">command:git.stage?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
				<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">const</span> contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token function">MarkdownString</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[Stage file](</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>commentCommandUri<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				contents<span class="token punctuation">.</span>isTrusted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
				<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token function">Hover</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="新建命令" tabindex="-1"><a class="header-anchor" href="#新建命令" aria-hidden="true">#</a> 新建命令</h2><hr><h3 id="注册一个命令" tabindex="-1"><a class="header-anchor" href="#注册一个命令" aria-hidden="true">#</a> 注册一个命令</h3>`,9),y={href:"https://code.visualstudio.com/api/references/vscode-api#commands.registerCommand",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"vscode.commands.registerCommand",-1),w=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> vscode <span class="token keyword">from</span> <span class="token string">&#39;vscode&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">activate</span><span class="token punctuation">(</span>context<span class="token operator">:</span> vscode<span class="token punctuation">.</span>ExtensionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> command <span class="token operator">=</span> <span class="token string">&#39;myExtension.sayHello&#39;</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> commandHandler <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!!!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	context<span class="token punctuation">.</span>subscriptions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>vscode<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">registerCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> commandHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要<code>myExtension.sayHello</code>命令执行，就会调用对应的处理函数，你也可以通过<code>executeCommand</code>程序性调用它，或者从VS Code UI中，抑或快捷键的方式调用。</p><h3 id="创建面向用户的命令" tabindex="-1"><a class="header-anchor" href="#创建面向用户的命令" aria-hidden="true">#</a> 创建面向用户的命令</h3><p><code>vscode.commands.registerCommand</code>仅仅是将命令id绑定到了处理函数上，如果想让用户从<em>命令面板</em>中找到你的命令，你还需要在<code>package.json</code>中配置对应的命令<code>配置项(contribution)</code>：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;contributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;commands&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;myExtension.sayHello&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Say Hello&quot;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>commands</code>配置告诉VS Code你的插件提供了一个命令，而且允许你控制命令在UI中的显示。现在，我们的命令终于出现在<em>命令面板</em>中了：</p><p><img src="https://media.githubusercontent.com/media/Microsoft/vscode-docs/master/api/extension-guides/images/commands/palette.png" alt="命令面板"></p><p>我们依旧需要使用<code>registerCommand</code>将真实的命令id绑定到函数上。也就是说，如果我们的插件没有激活，那么用户从<em>命令面板</em>中选择<code>myExtension.sayHello</code>也不会有任何效果。为了避免这种事，插件必须注册一个面向全部用户场景的命令<code>onCommand</code> <code>activiationEvent</code>：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;activationEvents&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;onCommand:myExtension.sayHello&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在当用户第一次调用<code>myExtension.sayHello</code>时，插件就会自动激活，<code>registerCommand</code>会将<code>myExtension.sayHello</code>绑定到正确的处理函数上。</p><p>对于内部命令你不需要使用<code>onCommand</code>，但是下面的场景中你必须定义好激活事件：</p><ul><li>需要使用<em>命令面板</em>调用</li><li>需要快捷键调用</li><li>需要通过VS Code UI调用，比如在编辑器标题栏上触发</li><li>意在供其他插件使用时</li></ul><h3 id="控制命令出现在命令面板的时机" tabindex="-1"><a class="header-anchor" href="#控制命令出现在命令面板的时机" aria-hidden="true">#</a> 控制命令出现在<em>命令面板</em>的时机</h3><p>默认情况下，所有<em>命令面板</em>中出现的命令都可以在<code>package.json</code>的<code>commands</code>部分中配置。不过，有些命令是场景相关的，比如在特定的语言的编辑器中，或者只有用户设置了某些选项时才展示。</p>`,14),_=n("a",{href:"/references/contribution-points#contributesmenus"},[n("code",null,"menus.commandPalette")],-1),x=n("em",null,"命令面板",-1),C={href:"https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts",target:"_blank",rel:"noopener noreferrer"},q=e(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;contributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;menus&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token property">&quot;commandPalette&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
				<span class="token punctuation">{</span>
					<span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;myExtension.sayHello&quot;</span><span class="token punctuation">,</span>
					<span class="token property">&quot;when&quot;</span><span class="token operator">:</span> <span class="token string">&quot;editorLangId == markdown&quot;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">]</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在<code>myExtension.sayHello</code>命令只会出现在用户的Markdown文件中了。</p>`,2);function E(H,I){const a=i("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[s("命令会触发VS Code中注册的行为，如果你"),n("a",d,[s("配置过键位"),t(a)]),s("，那么你就处理过了命令。命令也是插件将功能暴露给用户的地方，它绑定了VS Code UI中的行为，并在内部处理了相关逻辑。")]),r,n("p",null,[n("a",k,[m,t(a)]),s("API可以程序性调用一个命令，你可以通过它将VS Code的内置函数构建在你的插件中，比如VS Code内置的Git和Markdown插件中的东西。")]),v,n("ul",null,[n("li",null,[n("a",b,[s("浏览键盘快捷键"),t(a)])]),g]),h,n("p",null,[n("a",y,[f,t(a)]),s("会把命令ID绑定到你插件的函数上：")]),w,n("p",null,[_,s("发布内容配置运行你限制命令出现在"),x,s("的时机。你需要配置命令ID和一条"),n("a",C,[s("when语句"),t(a)]),s("：")]),q])}const P=o(l,[["render",E],["__file","01.command.html.vue"]]);export{P as default};
